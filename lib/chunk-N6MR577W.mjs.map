{"version":3,"sources":["../src/programmers/misc/MiscAssertCloneProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { MiscCloneProgrammer } from \"./MiscCloneProgrammer\";\n\nexport namespace MiscAssertCloneProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createImportTypeNode(\n          ts.factory.createLiteralTypeNode(\n            ts.factory.createStringLiteral(\"typia\"),\n          ),\n          undefined,\n          ts.factory.createIdentifier(\"Resolved\"),\n          [\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ],\n          false,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write(project)(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"clone\",\n            MiscCloneProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"assert\"),\n              undefined,\n              [\n                ts.factory.createIdentifier(\"input\"),\n                AssertProgrammer.Guardian.identifier(),\n              ],\n            ),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"clone\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,4BAAAA;6BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;IACzDC,iBAAiBC,SAASJ,UAAUN,IAAAA;KAEtCC,GAAGC,QAAQS,qBACTV,GAAGC,QAAQU,sBACTX,GAAGC,QAAQW,oBAAoB,OAAA,CAAA,GAEjCT,QACAH,GAAGC,QAAQY,iBAAiB,UAAA,GAC5B;IACEb,GAAGC,QAAQa,wBACThB,QAAQQ,YAAYS,YAAYpB,QAAQqB,OAAO,EAAEnB,IAAAA,CAAAA;KAGrD,KAAA,GAEFM,QACAH,GAAGC,QAAQgB,YAAY;IACrBC,iBAAiBC,SACf,UACAX,iBAAiBd,MAAMC,OAAAA,EAASC,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAEvDoB,iBAAiBC,SACf,SACAC,oBAAoB1B,MAAM;MACxB,GAAGC;MACH0B,SAAS;QACP,GAAG1B,QAAQ0B;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG3B,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBE,GAAGC,QAAQuB,0BACTxB,GAAGC,QAAQwB,qBACTzB,GAAGC,QAAQY,iBAAiB,QAAA,GAC5BV,QACA;MACEH,GAAGC,QAAQY,iBAAiB,OAAA;MAC5BL,iBAAiBC,SAASiB,WAAU;KACrC,CAAA;IAGLR,iBAAiBC,SACf,UACAnB,GAAGC,QAAQwB,qBACTzB,GAAGC,QAAQY,iBAAiB,OAAA,GAC5BV,QACA;MAACH,GAAGC,QAAQY,iBAAiB,OAAA;KAAS,CAAA;IAG1Cb,GAAGC,QAAQ0B,sBACT3B,GAAGC,QAAQY,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GAjEiBpB,8BAAAA,4BAAAA,CAAAA,EAAAA;","names":["ts","MiscAssertCloneProgrammer","write","project","modulo","type","name","init","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","createTypeReferenceNode","getFullName","checker","createBlock","StatementFactory","constant","MiscCloneProgrammer","options","functional","numeric","createExpressionStatement","createCallExpression","identifier","createReturnStatement"]}