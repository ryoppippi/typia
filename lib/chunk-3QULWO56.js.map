{"version":3,"sources":["../src/programmers/protobuf/ProtobufAssertEncodeProgrammer.ts"],"names":["ts","ProtobufAssertEncodeProgrammer","write","project","modulo","type","name","init","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createTypeReferenceNode","createBlock","StatementFactory","constant","options","functional","numeric","ProtobufEncodeProgrammer","createReturnStatement","createCallExpression","createIdentifier","identifier"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,iCAAAA;kCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BP,GAAGQ,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;IACzDC,iBAAiBC,SAASJ,UAAUL,IAAAA;KAEtCP,GAAGQ,QAAQS,wBAAwB,YAAA,GACnCP,QACAV,GAAGQ,QAAQU,YAAY;IACrBC,iBAAiBC,SACf,UACAL,iBAAiBb,MAAM;MACrB,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1Ba,iBAAiBC,SACf,UACAI,yBAAyBtB,MAAM;MAC7B,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBN,GAAGQ,QAAQiB,sBACTzB,GAAGQ,QAAQkB,qBACT1B,GAAGQ,QAAQmB,iBAAiB,QAAA,GAC5BjB,QACA;MACEV,GAAGQ,QAAQkB,qBACT1B,GAAGQ,QAAQmB,iBAAiB,QAAA,GAC5BjB,QACA;QACEV,GAAGQ,QAAQmB,iBAAiB,OAAA;QAC5BZ,iBAAiBC,SAASY,WAAU;OACrC;KAEJ,CAAA;GAGN,CAAA;AAET,GAvDiB3B,mCAAAA,iCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { ProtobufEncodeProgrammer } from \"./ProtobufEncodeProgrammer\";\n\nexport namespace ProtobufAssertEncodeProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createTypeReferenceNode(\"Uint8Array\"),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"encode\",\n            ProtobufEncodeProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"encode\"),\n              undefined,\n              [\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"assert\"),\n                  undefined,\n                  [\n                    ts.factory.createIdentifier(\"input\"),\n                    AssertProgrammer.Guardian.identifier(),\n                  ],\n                ),\n              ],\n            ),\n          ),\n        ]),\n      );\n}\n"]}