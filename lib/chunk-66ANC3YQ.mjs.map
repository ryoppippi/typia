{"version":3,"sources":["../src/functional/$QueryReader/$QueryReader.ts"],"sourcesContent":["export const boolean = (str: string | null): boolean | null | undefined =>\n  str === null\n    ? undefined\n    : str === \"null\"\n      ? null\n      : str.length === 0\n        ? true\n        : str === \"true\" || str === \"1\"\n          ? true\n          : str === \"false\" || str === \"0\"\n            ? false\n            : (str as any); // wrong type\n\nexport const number = (str: string | null): number | null | undefined =>\n  !!str?.length ? (str === \"null\" ? null : (toNumber(str) as any)) : undefined;\n\nexport const bigint = (str: string | null): bigint | null | undefined =>\n  !!str?.length ? (str === \"null\" ? null : (toBigint(str) as any)) : undefined;\n\nexport const string = (str: string | null): string | null | undefined =>\n  str === null ? undefined : str === \"null\" ? null : str;\n\nexport const params = (input: string | URLSearchParams) => {\n  if (typeof input === \"string\") {\n    const index: number = input.indexOf(\"?\");\n    input = index === -1 ? \"\" : input.substring(index + 1);\n    return new URLSearchParams(input);\n  }\n  return input;\n};\n\nexport const array = (input: any[], alternative: null | undefined) =>\n  input.length ? input : alternative;\n\nconst toNumber = (str: string): number | string => {\n  const value: number = Number(str);\n  return isNaN(value) ? str : value;\n};\n\nconst toBigint = (str: string): bigint | string => {\n  try {\n    return BigInt(str);\n  } catch {\n    return str;\n  }\n};\n"],"mappings":";;;;;;AAAA;;;;;;;;;AAAO,IAAMA,UAAU,wBAACC,QACtBA,QAAQ,OACJC,SACAD,QAAQ,SACN,OACAA,IAAIE,WAAW,IACb,OACAF,QAAQ,UAAUA,QAAQ,MACxB,OACAA,QAAQ,WAAWA,QAAQ,MACzB,QACCA,KAXQ;AAahB,IAAMG,SAAS,wBAACH,QACrB,CAAC,CAACA,KAAKE,SAAUF,QAAQ,SAAS,OAAQI,SAASJ,GAAAA,IAAgBC,QAD/C;AAGf,IAAMI,SAAS,wBAACL,QACrB,CAAC,CAACA,KAAKE,SAAUF,QAAQ,SAAS,OAAQM,SAASN,GAAAA,IAAgBC,QAD/C;AAGf,IAAMM,SAAS,wBAACP,QACrBA,QAAQ,OAAOC,SAAYD,QAAQ,SAAS,OAAOA,KAD/B;AAGf,IAAMQ,SAAS,wBAACC,UAAAA;AACrB,MAAI,OAAOA,UAAU,UAAU;AAC7B,UAAMC,QAAgBD,MAAME,QAAQ,GAAA;AACpCF,YAAQC,UAAU,KAAK,KAAKD,MAAMG,UAAUF,QAAQ,CAAA;AACpD,WAAO,IAAIG,gBAAgBJ,KAAAA;EAC7B;AACA,SAAOA;AACT,GAPsB;AASf,IAAMK,QAAQ,wBAACL,OAAcM,gBAClCN,MAAMP,SAASO,QAAQM,aADJ;AAGrB,IAAMX,WAAW,wBAACJ,QAAAA;AAChB,QAAMgB,QAAgBC,OAAOjB,GAAAA;AAC7B,SAAOkB,MAAMF,KAAAA,IAAShB,MAAMgB;AAC9B,GAHiB;AAKjB,IAAMV,WAAW,wBAACN,QAAAA;AAChB,MAAI;AACF,WAAOmB,OAAOnB,GAAAA;EAChB,QAAQ;AACN,WAAOA;EACT;AACF,GANiB;","names":["boolean","str","undefined","length","number","toNumber","bigint","toBigint","string","params","input","index","indexOf","substring","URLSearchParams","array","alternative","value","Number","isNaN","BigInt"]}