{"version":3,"sources":["../../src/functional/$varint.ts"],"sourcesContent":["function EncodeVarNumber(\n  dst: Uint8Array,\n  offset: number,\n  value: number,\n): number {\n  value = (value | 0) >>> 0; // 32-bit integer\n\n  while (value > 127) {\n    dst[offset++] = (value & 0b01111111) | 0b10000000;\n    value >>>= 7;\n  }\n  dst[offset++] = value;\n\n  return offset;\n}\n\nfunction DecodeVarNumber(\n  buf: Uint8Array,\n  offset: number,\n): [value: number, offset: number] {\n  let value = 0;\n  let shift = 0;\n\n  while (true) {\n    const byte = buf[offset++]!;\n    value |= (byte & 0b01111111) << shift;\n    if (byte < 128) {\n      break;\n    }\n    shift += 7;\n  }\n\n  return [value | 0, offset];\n}\n\nfunction DecodeVarBigInt(\n  buf: Uint8Array,\n  offset: number,\n): [value: bigint, offset: number] {\n  let value = BigInt(0);\n  let shift = BigInt(0);\n\n  while (true) {\n    const byte = buf[offset++]!;\n    value |= BigInt(byte & 0b01111111) << shift;\n    if (byte < 128) {\n      break;\n    }\n    shift += BigInt(7);\n  }\n\n  return [BigInt.asIntN(64, value), offset];\n}\n\nexport function $varint_decode_i32(\n  buf: Uint8Array,\n  offset: number,\n): [value: number, offset: number] {\n  const [v, o] = DecodeVarNumber(buf, offset);\n  return [v, o];\n}\n\nexport function $varint_decode_u32(\n  buf: Uint8Array,\n  offset: number,\n): [value: number, offset: number] {\n  const [v, o] = DecodeVarNumber(buf, offset);\n  return [v >>> 0, o];\n}\n\nexport function $varint_decode_i64(\n  buf: Uint8Array,\n  offset: number,\n): [value: bigint, offset: number] {\n  const [v, o] = DecodeVarBigInt(buf, offset);\n  return [v, o];\n}\n\nexport function $varint_decode_u64(\n  buf: Uint8Array,\n  offset: number,\n): [value: bigint, offset: number] {\n  const [v, o] = DecodeVarBigInt(buf, offset);\n  return [BigInt.asUintN(64, v), o];\n}\n\nfunction EncodeVarBigInt(\n  dst: Uint8Array,\n  offset: number,\n  value: bigint,\n): number {\n  value = BigInt.asUintN(64, value);\n\n  while (value > BigInt(127)) {\n    dst[offset++] = Number(value & BigInt(0b01111111)) | 0b10000000;\n    value >>= BigInt(7);\n  }\n  dst[offset++] = Number(value);\n\n  return offset;\n}\n\nexport function $varint_encode(\n  dst: Uint8Array,\n  offset: number,\n  value: number,\n): number;\nexport function $varint_encode(\n  dst: Uint8Array,\n  offset: number,\n  value: bigint,\n): number;\n\nexport function $varint_encode(\n  dst: Uint8Array,\n  offset: number,\n  value: number | bigint,\n): number {\n  if (typeof value === \"bigint\") {\n    offset = EncodeVarBigInt(dst, offset, value);\n  } else {\n    if (value < 0) {\n      // NOTE: Protocol Buffers signed varint encoding uses two's complement of 64-bit unsigned integers.\n      offset = EncodeVarBigInt(dst, offset, BigInt(value));\n    } else {\n      offset = EncodeVarNumber(dst, offset, value);\n    }\n  }\n  return offset;\n}\n"],"mappings":";;;;;AAAA,SAASA,gBACPC,KACAC,QACAC,OAAa;AAEbA,WAASA,QAAQ,OAAO;AAExB,SAAOA,QAAQ,KAAK;AAClBF,QAAIC,QAAAA,IAAaC,QAAQ,MAAc;AACvCA,eAAW;EACb;AACAF,MAAIC,QAAAA,IAAYC;AAEhB,SAAOD;AACT;AAdSF;AAgBT,SAASI,gBACPC,KACAH,QAAc;AAEd,MAAIC,QAAQ;AACZ,MAAIG,QAAQ;AAEZ,SAAO,MAAM;AACX,UAAMC,OAAOF,IAAIH,QAAAA;AACjBC,cAAUI,OAAO,QAAeD;AAChC,QAAIC,OAAO,KAAK;AACd;IACF;AACAD,aAAS;EACX;AAEA,SAAO;IAACH,QAAQ;IAAGD;;AACrB;AAjBSE;AAmBT,SAASI,gBACPH,KACAH,QAAc;AAEd,MAAIC,QAAQM,OAAO,CAAA;AACnB,MAAIH,QAAQG,OAAO,CAAA;AAEnB,SAAO,MAAM;AACX,UAAMF,OAAOF,IAAIH,QAAAA;AACjBC,aAASM,OAAOF,OAAO,GAAA,KAAeD;AACtC,QAAIC,OAAO,KAAK;AACd;IACF;AACAD,aAASG,OAAO,CAAA;EAClB;AAEA,SAAO;IAACA,OAAOC,OAAO,IAAIP,KAAAA;IAAQD;;AACpC;AAjBSM;AAmBF,SAASG,mBACdN,KACAH,QAAc;AAEd,QAAM,CAACU,GAAGC,CAAAA,IAAKT,gBAAgBC,KAAKH,MAAAA;AACpC,SAAO;IAACU;IAAGC;;AACb;AANgBF;AAQT,SAASG,mBACdT,KACAH,QAAc;AAEd,QAAM,CAACU,GAAGC,CAAAA,IAAKT,gBAAgBC,KAAKH,MAAAA;AACpC,SAAO;IAACU,MAAM;IAAGC;;AACnB;AANgBC;AAQT,SAASC,mBACdV,KACAH,QAAc;AAEd,QAAM,CAACU,GAAGC,CAAAA,IAAKL,gBAAgBH,KAAKH,MAAAA;AACpC,SAAO;IAACU;IAAGC;;AACb;AANgBE;AAQT,SAASC,mBACdX,KACAH,QAAc;AAEd,QAAM,CAACU,GAAGC,CAAAA,IAAKL,gBAAgBH,KAAKH,MAAAA;AACpC,SAAO;IAACO,OAAOQ,QAAQ,IAAIL,CAAAA;IAAIC;;AACjC;AANgBG;AAQhB,SAASE,gBACPjB,KACAC,QACAC,OAAa;AAEbA,UAAQM,OAAOQ,QAAQ,IAAId,KAAAA;AAE3B,SAAOA,QAAQM,OAAO,GAAA,GAAM;AAC1BR,QAAIC,QAAAA,IAAYiB,OAAOhB,QAAQM,OAAO,GAAA,CAAA,IAAe;AACrDN,cAAUM,OAAO,CAAA;EACnB;AACAR,MAAIC,QAAAA,IAAYiB,OAAOhB,KAAAA;AAEvB,SAAOD;AACT;AAdSgB;AA2BF,SAASE,eACdnB,KACAC,QACAC,OAAsB;AAEtB,MAAI,OAAOA,UAAU,UAAU;AAC7BD,aAASgB,gBAAgBjB,KAAKC,QAAQC,KAAAA;EACxC,OAAO;AACL,QAAIA,QAAQ,GAAG;AAEbD,eAASgB,gBAAgBjB,KAAKC,QAAQO,OAAON,KAAAA,CAAAA;IAC/C,OAAO;AACLD,eAASF,gBAAgBC,KAAKC,QAAQC,KAAAA;IACxC;EACF;AACA,SAAOD;AACT;AAhBgBkB;","names":["EncodeVarNumber","dst","offset","value","DecodeVarNumber","buf","shift","byte","DecodeVarBigInt","BigInt","asIntN","$varint_decode_i32","v","o","$varint_decode_u32","$varint_decode_i64","$varint_decode_u64","asUintN","EncodeVarBigInt","Number","$varint_encode"]}