{"version":3,"sources":["../src/functional/$ProtobufReader.ts"],"names":["$ProtobufReader","buf","ptr","view","DataView","buffer","byteOffset","byteLength","index","size","length","uint32","varint32","int32","sint32","value","uint64","varint64","int64","sint64","N01","bool","float","getFloat32","double","getFloat64","bytes","from","subarray","string","utf8","decode","skip","u8","Error","skipType","wireType","ProtobufWire","VARIANT","I64","LEN","START_GROUP","END_GROUP","I32","loaded","u8n","N7F","N80","BigInt","asIntN","getUint8","TextDecoder"],"mappings":"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","sourcesContent":["import { ProtobufWire } from \"../programmers/helpers/ProtobufWire\";\n\n/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedReader.ts\nexport class $ProtobufReader {\n  /**\n   * Read buffer\n   */\n  private buf: Uint8Array;\n\n  /**\n   * Read buffer pointer.\n   */\n  private ptr: number;\n\n  /**\n   * DataView for buffer.\n   */\n  private view: DataView;\n\n  public constructor(buf: Uint8Array) {\n    this.buf = buf;\n    this.ptr = 0;\n    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  public index(): number {\n    return this.ptr;\n  }\n\n  public size(): number {\n    return this.buf.length;\n  }\n\n  public uint32(): number {\n    return this.varint32();\n  }\n\n  public int32(): number {\n    return this.varint32();\n  }\n\n  public sint32(): number {\n    const value: number = this.varint32();\n    return (value >>> 1) ^ -(value & 1);\n  }\n\n  public uint64(): bigint {\n    return this.varint64();\n  }\n\n  public int64(): bigint {\n    return this.varint64();\n  }\n\n  public sint64(): bigint {\n    const value = this.varint64();\n    return (value >> N01) ^ -(value & N01);\n  }\n\n  public bool(): boolean {\n    return this.varint32() !== 0;\n  }\n\n  public float(): number {\n    const value: number = this.view.getFloat32(this.ptr, true);\n    this.ptr += 4;\n    return value;\n  }\n\n  public double(): number {\n    const value: number = this.view.getFloat64(this.ptr, true);\n    this.ptr += 8;\n    return value;\n  }\n\n  public bytes(): Uint8Array {\n    const length: number = this.uint32();\n    const from: number = this.ptr;\n    this.ptr += length;\n    return this.buf.subarray(from, from + length);\n  }\n\n  public string(): string {\n    return utf8.decode(this.bytes());\n  }\n\n  public skip(length: number): void {\n    if (length === 0) while (this.u8() & 0x80);\n    else {\n      if (this.index() + length > this.size())\n        throw new Error(\"Error on typia.protobuf.decode(): buffer overflow.\");\n      this.ptr += length;\n    }\n  }\n\n  public skipType(wireType: ProtobufWire): void {\n    switch (wireType) {\n      case ProtobufWire.VARIANT:\n        this.skip(0);\n        break;\n      case ProtobufWire.I64:\n        this.skip(8);\n        break;\n      case ProtobufWire.LEN:\n        this.skip(this.uint32());\n        break;\n      case ProtobufWire.START_GROUP:\n        while ((wireType = this.uint32() & 0x07) !== ProtobufWire.END_GROUP)\n          this.skipType(wireType);\n        break;\n      case ProtobufWire.I32:\n        this.skip(4);\n        break;\n      default:\n        throw new Error(`Invalid wire type ${wireType} at offset ${this.ptr}.`);\n    }\n  }\n\n  private varint32(): number {\n    let loaded: number;\n    let value: number;\n\n    value = (loaded = this.u8()) & 0x7f;\n    if (loaded < 0x80) return value;\n\n    value |= ((loaded = this.u8()) & 0x7f) << 7;\n    if (loaded < 0x80) return value;\n\n    value |= ((loaded = this.u8()) & 0x7f) << 14;\n    if (loaded < 0x80) return value;\n\n    value |= ((loaded = this.u8()) & 0x7f) << 21;\n    if (loaded < 0x80) return value;\n\n    value |= ((loaded = this.u8()) & 0xf) << 28;\n    if (loaded < 0x80) return value;\n\n    // increment position until there is no continuation bit or until we read 10 bytes\n    if (this.u8() < 0x80) return value;\n    if (this.u8() < 0x80) return value;\n    if (this.u8() < 0x80) return value;\n    if (this.u8() < 0x80) return value;\n    if (this.u8() < 0x80) return value;\n\n    return value;\n  }\n\n  private varint64(): bigint {\n    let loaded: bigint;\n    let value: bigint;\n\n    value = (loaded = this.u8n()) & N7F;\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(7);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(14);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(21);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(28);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(35);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(42);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(49);\n    if (loaded < N80) return value;\n\n    value |= ((loaded = this.u8n()) & N7F) << BigInt(56);\n    if (loaded < N80) return value;\n\n    value |= (this.u8n() & N01) << BigInt(63);\n    return BigInt.asIntN(64, value);\n  }\n\n  private u8(): number {\n    return this.view.getUint8(this.ptr++);\n  }\n\n  private u8n(): bigint {\n    return BigInt(this.u8());\n  }\n}\n\nconst utf8 = /** @__PURE__ */ new TextDecoder();\nconst N01 = /** @__PURE__ */ BigInt(0x01);\nconst N7F = /** @__PURE__ */ BigInt(0x7f);\nconst N80 = /** @__PURE__ */ BigInt(0x80);\n"]}