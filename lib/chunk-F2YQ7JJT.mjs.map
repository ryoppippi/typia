{"version":3,"sources":["../src/transformers/CallExpressionTransformer.ts"],"sourcesContent":["import path from \"path\";\nimport ts from \"typescript\";\n\nimport { FunctionalAssertFunctionProgrammer } from \"../programmers/functional/FunctionalAssertFunctionProgrammer\";\nimport { FunctionalAssertParametersProgrammer } from \"../programmers/functional/FunctionalAssertParametersProgrammer\";\nimport { FunctionAssertReturnProgrammer } from \"../programmers/functional/FunctionalAssertReturnProgrammer\";\nimport { FunctionalIsFunctionProgrammer } from \"../programmers/functional/FunctionalIsFunctionProgrammer\";\nimport { FunctionalIsParametersProgrammer } from \"../programmers/functional/FunctionalIsParametersProgrammer\";\nimport { FunctionalIsReturnProgrammer } from \"../programmers/functional/FunctionalIsReturnProgrammer\";\nimport { FunctionalValidateFunctionProgrammer } from \"../programmers/functional/FunctionalValidateFunctionProgrammer\";\nimport { FunctionalValidateParametersProgrammer } from \"../programmers/functional/FunctionalValidateParametersProgrammer\";\nimport { FunctionalValidateReturnProgrammer } from \"../programmers/functional/FunctionalValidateReturnProgrammer\";\nimport { FunctionalGenericTransformer } from \"./features/functional/FunctionalGenericTransformer\";\n\nimport { NamingConvention } from \"../utils/NamingConvention\";\n\nimport { IProject } from \"./IProject\";\nimport { AssertTransformer } from \"./features/AssertTransformer\";\nimport { CreateAssertTransformer } from \"./features/CreateAssertTransformer\";\nimport { CreateIsTransformer } from \"./features/CreateIsTransformer\";\nimport { CreateRandomTransformer } from \"./features/CreateRandomTransformer\";\nimport { CreateValidateTransformer } from \"./features/CreateValidateTransformer\";\nimport { IsTransformer } from \"./features/IsTransformer\";\nimport { RandomTransformer } from \"./features/RandomTransformer\";\nimport { ValidateTransformer } from \"./features/ValidateTransformer\";\nimport { CreateHttpAssertFormDataTransformer } from \"./features/http/CreateHttpAssertFormDataTransformer\";\nimport { CreateHttpAssertHeadersTransformer } from \"./features/http/CreateHttpAssertHeadersTransformer\";\nimport { CreateHttpAssertQueryTransformer } from \"./features/http/CreateHttpAssertQueryTransformer\";\nimport { CreateHttpFormDataTransformer } from \"./features/http/CreateHttpFormDataTransformer\";\nimport { CreateHttpHeadersTransformer } from \"./features/http/CreateHttpHeadersTransformer\";\nimport { CreateHttpIsFormDataTransformer } from \"./features/http/CreateHttpIsFormDataTransformer\";\nimport { CreateHttpIsHeadersTransformer } from \"./features/http/CreateHttpIsHeadersTransformer\";\nimport { CreateHttpIsQueryTransformer } from \"./features/http/CreateHttpIsQueryTransformer\";\nimport { CreateHttpParameterTransformer } from \"./features/http/CreateHttpParameterTransformer\";\nimport { CreateHttpQueryTransformer } from \"./features/http/CreateHttpQueryTransformer\";\nimport { CreateHttpValidateFormDataTransformer } from \"./features/http/CreateHttpValidateFormDataTransformer\";\nimport { CreateHttpValidateHeadersTransformer } from \"./features/http/CreateHttpValidateHeadersTransformer\";\nimport { CreateHttpValidateQueryTransformer } from \"./features/http/CreateHttpValidateQueryTransformer\";\nimport { HttpAssertFormDataTransformer } from \"./features/http/HttpAssertFormDataTransformer\";\nimport { HttpAssertHeadersTransformer } from \"./features/http/HttpAssertHeadersTransformer\";\nimport { HttpAssertQueryTransformer } from \"./features/http/HttpAssertQueryTransformer\";\nimport { HttpFormDataTransformer } from \"./features/http/HttpFormDataTransformer\";\nimport { HttpHeadersTransformer } from \"./features/http/HttpHeadersTransformer\";\nimport { HttpIsFormDataTransformer } from \"./features/http/HttpIsFormDataTransformer\";\nimport { HttpIsHeadersTransformer } from \"./features/http/HttpIsHeadersTransformer\";\nimport { HttpIsQueryTransformer } from \"./features/http/HttpIsQueryTransformer\";\nimport { HttpParameterTransformer } from \"./features/http/HttpParameterTransformer\";\nimport { HttpQueryTransformer } from \"./features/http/HttpQueryTransformer\";\nimport { HttpValidateFormDataTransformer } from \"./features/http/HttpValidateFormDataTransformer\";\nimport { HttpValidateHeadersTransformer } from \"./features/http/HttpValidateHeadersTransformer\";\nimport { HttpValidateQueryTransformer } from \"./features/http/HttpValidateQueryTransformer\";\nimport { JsonApplicationTransformer } from \"./features/json/JsonApplicationTransformer\";\nimport { JsonAssertParseTransformer } from \"./features/json/JsonAssertParseTransformer\";\nimport { JsonAssertStringifyTransformer } from \"./features/json/JsonAssertStringifyTransformer\";\nimport { JsonCreateAssertParseTransformer } from \"./features/json/JsonCreateAssertParseTransformer\";\nimport { JsonCreateAssertStringifyTransformer } from \"./features/json/JsonCreateAssertStringifyTransformer\";\nimport { JsonCreateIsParseTransformer } from \"./features/json/JsonCreateIsParseTransformer\";\nimport { JsonCreateIsStringifyTransformer } from \"./features/json/JsonCreateIsStringifyTransformer\";\nimport { JsonCreateStringifyTransformer } from \"./features/json/JsonCreateStringifyTransformer\";\nimport { JsonCreateValidateParseTransformer } from \"./features/json/JsonCreateValidateParseTransformer\";\nimport { JsonCreateValidateStringifyTransformer } from \"./features/json/JsonCreateValidateStringifyProgrammer\";\nimport { JsonIsParseTransformer } from \"./features/json/JsonIsParseTransformer\";\nimport { JsonIsStringifyTransformer } from \"./features/json/JsonIsStringifyTransformer\";\nimport { JsonStringifyTransformer } from \"./features/json/JsonStringifyTransformer\";\nimport { JsonValidateParseTransformer } from \"./features/json/JsonValidateParseTransformer\";\nimport { JsonValidateStringifyTransformer } from \"./features/json/JsonValidateStringifyTransformer\";\nimport { MiscAssertCloneTransformer } from \"./features/misc/MiscAssertCloneTransformer\";\nimport { MiscAssertPruneTransformer } from \"./features/misc/MiscAssertPruneTransformer\";\nimport { MiscCloneTransformer } from \"./features/misc/MiscCloneTransformer\";\nimport { MiscCreateAssertCloneTransformer } from \"./features/misc/MiscCreateAssertCloneTransformer\";\nimport { MiscCreateAssertPruneTransformer } from \"./features/misc/MiscCreateAssertPruneTransformer\";\nimport { MiscCreateCloneTransformer } from \"./features/misc/MiscCreateCloneTransformer\";\nimport { MiscCreateIsCloneTransformer } from \"./features/misc/MiscCreateIsCloneTransformer\";\nimport { MiscCreateIsPruneTransformer } from \"./features/misc/MiscCreateIsPruneTransformer\";\nimport { MiscCreatePruneTransformer } from \"./features/misc/MiscCreatePruneTransformer\";\nimport { MiscCreateValidateCloneTransformer } from \"./features/misc/MiscCreateValidateCloneTransformer\";\nimport { MiscCreateValidatePruneTransformer } from \"./features/misc/MiscCreateValidatePruneTransformer\";\nimport { MiscIsCloneTransformer } from \"./features/misc/MiscIsCloneTransformer\";\nimport { MiscIsPruneTransformer } from \"./features/misc/MiscIsPruneTransformer\";\nimport { MiscLiteralsTransformer } from \"./features/misc/MiscLiteralsTransformer\";\nimport { MiscPruneTransformer } from \"./features/misc/MiscPruneTransformer\";\nimport { MiscValidateCloneTransformer } from \"./features/misc/MiscValidateCloneTransformer\";\nimport { MiscValidatePruneTransformer } from \"./features/misc/MiscValidatePruneTransformer\";\nimport { NotationAssertGeneralTransformer } from \"./features/notations/NotationAssertGeneralTransformer\";\nimport { NotationCreateAssertGeneralTransformer } from \"./features/notations/NotationCreateAssertGeneralTransformer\";\nimport { NotationCreateGeneralTransformer } from \"./features/notations/NotationCreateGeneralTransformer\";\nimport { NotationCreateIsGeneralTransformer } from \"./features/notations/NotationCreateIsGeneralTransformer\";\nimport { NotationCreateValidateGeneralTransformer } from \"./features/notations/NotationCreateValidateGeneralTransformer\";\nimport { NotationGeneralTransformer } from \"./features/notations/NotationGeneralTransformer\";\nimport { NotationIsGeneralTransformer } from \"./features/notations/NotationIsGeneralTransformer\";\nimport { NotationValidateGeneralTransformer } from \"./features/notations/NotationValidateGeneralTransformer\";\nimport { ProtobufAssertDecodeTransformer } from \"./features/protobuf/ProtobufAssertDecodeTransformer\";\nimport { ProtobufAssertEncodeTransformer } from \"./features/protobuf/ProtobufAssertEncodeTransformer\";\nimport { ProtobufCreateAssertDecodeTransformer } from \"./features/protobuf/ProtobufCreateAssertDecodeTransformer\";\nimport { ProtobufCreateAssertEncodeTransformer } from \"./features/protobuf/ProtobufCreateAssertEncodeTransformer\";\nimport { ProtobufCreateDecodeTransformer } from \"./features/protobuf/ProtobufCreateDecodeTransformer\";\nimport { ProtobufCreateEncodeTransformer } from \"./features/protobuf/ProtobufCreateEncodeTransformer\";\nimport { ProtobufCreateIsDecodeTransformer } from \"./features/protobuf/ProtobufCreateIsDecodeTransformer\";\nimport { ProtobufCreateIsEncodeTransformer } from \"./features/protobuf/ProtobufCreateIsEncodeTransformer\";\nimport { ProtobufCreateValidateDecodeTransformer } from \"./features/protobuf/ProtobufCreateValidateDecodeTransformer\";\nimport { ProtobufCreateValidateEncodeTransformer } from \"./features/protobuf/ProtobufCreateValidateEncodeTransformer\";\nimport { ProtobufDecodeTransformer } from \"./features/protobuf/ProtobufDecodeTransformer\";\nimport { ProtobufEncodeTransformer } from \"./features/protobuf/ProtobufEncodeTransformer\";\nimport { ProtobufIsDecodeTransformer } from \"./features/protobuf/ProtobufIsDecodeTransformer\";\nimport { ProtobufIsEncodeTransformer } from \"./features/protobuf/ProtobufIsEncodeTransformer\";\nimport { ProtobufMessageTransformer } from \"./features/protobuf/ProtobufMessageTransformer\";\nimport { ProtobufValidateDecodeTransformer } from \"./features/protobuf/ProtobufValidateDecodeTransformer\";\nimport { ProtobufValidateEncodeTransformer } from \"./features/protobuf/ProtobufValidateEncodeTransformer\";\nimport { ReflectMetadataTransformer } from \"./features/reflect/ReflectMetadataTransformer\";\n\nexport namespace CallExpressionTransformer {\n  export const transform =\n    (project: IProject) =>\n    (expression: ts.CallExpression): ts.Expression | null => {\n      //----\n      // VALIDATIONS\n      //----\n      // SIGNATURE DECLARATION\n      const declaration: ts.Declaration | undefined =\n        project.checker.getResolvedSignature(expression)?.declaration;\n      if (!declaration) return expression;\n\n      // FILE PATH\n      const location: string = path.resolve(\n        declaration.getSourceFile().fileName,\n      );\n      if (isTarget(location) === false) return expression;\n\n      //----\n      // TRANSFORMATION\n      //----\n      // FUNCTION NAME\n      const module: string = location.split(path.sep).at(-1)!.split(\".\")[0]!;\n      const { name } = project.checker.getTypeAtLocation(declaration).symbol;\n\n      // FIND TRANSFORMER\n      const functor: (() => Task) | undefined = FUNCTORS[module]?.[name];\n      if (functor === undefined) return expression;\n\n      // RETURNS WITH TRANSFORMATION\n      const result: ts.Expression | null = functor()(project)(\n        expression.expression,\n      )(expression);\n      return result ?? expression;\n    };\n\n  const isTarget = (location: string): boolean => {\n    const files: string[] = Object.keys(FUNCTORS);\n    return files.some((f) =>\n      location.includes(path.join(\"typia\", \"lib\", `${f}.d.ts`)),\n    );\n  };\n}\n\ntype Task = (\n  project: IProject,\n) => (\n  modulo: ts.LeftHandSideExpression,\n) => (expression: ts.CallExpression) => ts.Expression | null;\n\nconst FUNCTORS: Record<string, Record<string, () => Task>> = {\n  module: {\n    // BASIC\n    assert: () => AssertTransformer.transform({ equals: false, guard: false }),\n    assertGuard: () =>\n      AssertTransformer.transform({ equals: false, guard: true }),\n    assertType: () =>\n      AssertTransformer.transform({ equals: false, guard: false }),\n    is: () => IsTransformer.transform(false),\n    validate: () => ValidateTransformer.transform(false),\n\n    // STRICT\n    assertEquals: () =>\n      AssertTransformer.transform({ equals: true, guard: false }),\n    assertGuardEquals: () =>\n      AssertTransformer.transform({ equals: true, guard: true }),\n    equals: () => IsTransformer.transform(true),\n    validateEquals: () => ValidateTransformer.transform(true),\n\n    // RANDOM + INTERNAL\n    random: () => RandomTransformer.transform,\n    metadata: () => ReflectMetadataTransformer.transform,\n\n    // FACTORIES\n    createAssert: () =>\n      CreateAssertTransformer.transform({ equals: false, guard: false }),\n    createAssertGuard: () =>\n      CreateAssertTransformer.transform({ equals: false, guard: true }),\n    createAssertType: () =>\n      CreateAssertTransformer.transform({ equals: false, guard: false }),\n    createIs: () => CreateIsTransformer.transform(false),\n    createValidate: () => CreateValidateTransformer.transform(false),\n    createAssertEquals: () =>\n      CreateAssertTransformer.transform({ equals: true, guard: false }),\n    createAssertGuardEquals: () =>\n      CreateAssertTransformer.transform({ equals: true, guard: true }),\n    createEquals: () => CreateIsTransformer.transform(true),\n    createValidateEquals: () => CreateValidateTransformer.transform(true),\n    createRandom: () => CreateRandomTransformer.transform,\n  },\n  functional: {\n    // ASSERTIONS\n    assertFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertFunction\",\n        equals: false,\n        programmer: FunctionalAssertFunctionProgrammer.write,\n      }),\n    assertParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertParameters\",\n        equals: false,\n        programmer: FunctionalAssertParametersProgrammer.write,\n      }),\n    assertReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertReturn\",\n        equals: false,\n        programmer: FunctionAssertReturnProgrammer.write,\n      }),\n    assertEqualsFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertEqualsFunction\",\n        equals: true,\n        programmer: FunctionalAssertFunctionProgrammer.write,\n      }),\n    assertEqualsParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertEqualsParameters\",\n        equals: true,\n        programmer: FunctionalAssertParametersProgrammer.write,\n      }),\n    assertEqualsReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"assertEqualsReturn\",\n        equals: true,\n        programmer: FunctionAssertReturnProgrammer.write,\n      }),\n\n    // IS\n    isFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"isFunction\",\n        equals: false,\n        programmer: FunctionalIsFunctionProgrammer.write,\n      }),\n    isParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"isParameters\",\n        equals: false,\n        programmer: FunctionalIsParametersProgrammer.write,\n      }),\n    isReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"isReturn\",\n        equals: false,\n        programmer: FunctionalIsReturnProgrammer.write,\n      }),\n    equalsFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"equalsFunction\",\n        equals: true,\n        programmer: FunctionalIsFunctionProgrammer.write,\n      }),\n    equalsParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"equalsParameters\",\n        equals: true,\n        programmer: FunctionalIsParametersProgrammer.write,\n      }),\n    equalsReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"equalsReturn\",\n        equals: true,\n        programmer: FunctionalIsReturnProgrammer.write,\n      }),\n\n    // VALIDATIONS\n    validateFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateFunction\",\n        equals: false,\n        programmer: FunctionalValidateFunctionProgrammer.write,\n      }),\n    validateParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateParameters\",\n        equals: false,\n        programmer: FunctionalValidateParametersProgrammer.write,\n      }),\n    validateReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateReturn\",\n        equals: false,\n        programmer: FunctionalValidateReturnProgrammer.write,\n      }),\n    validateEqualsFunction: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateEqualsFunction\",\n        equals: true,\n        programmer: FunctionalValidateFunctionProgrammer.write,\n      }),\n    validateEqualsParameters: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateEqualsParameters\",\n        equals: true,\n        programmer: FunctionalValidateParametersProgrammer.write,\n      }),\n    validateEqualsReturn: () =>\n      FunctionalGenericTransformer.transform({\n        method: \"validateEqualsReturn\",\n        equals: true,\n        programmer: FunctionalValidateReturnProgrammer.write,\n      }),\n  },\n  http: {\n    // FORM-DATA\n    formData: () => HttpFormDataTransformer.transform,\n    isFormData: () => HttpIsFormDataTransformer.transform,\n    assertFormData: () => HttpAssertFormDataTransformer.transform,\n    validateFormData: () => HttpValidateFormDataTransformer.transform,\n\n    // HEADERS\n    headers: () => HttpHeadersTransformer.transform,\n    isHeaders: () => HttpIsHeadersTransformer.transform,\n    assertHeaders: () => HttpAssertHeadersTransformer.transform,\n    validateHeaders: () => HttpValidateHeadersTransformer.transform,\n\n    // PARAMETER\n    parameter: () => HttpParameterTransformer.transform,\n\n    // QUERY\n    query: () => HttpQueryTransformer.transform,\n    isQuery: () => HttpIsQueryTransformer.transform,\n    assertQuery: () => HttpAssertQueryTransformer.transform,\n    validateQuery: () => HttpValidateQueryTransformer.transform,\n\n    // FACTORIES\n    createFormData: () => CreateHttpFormDataTransformer.transform,\n    createIsFormData: () => CreateHttpIsFormDataTransformer.transform,\n    createAssertFormData: () => CreateHttpAssertFormDataTransformer.transform,\n    createValidateFormData: () =>\n      CreateHttpValidateFormDataTransformer.transform,\n    createHeaders: () => CreateHttpHeadersTransformer.transform,\n    createIsHeaders: () => CreateHttpIsHeadersTransformer.transform,\n    createAssertHeaders: () => CreateHttpAssertHeadersTransformer.transform,\n    createValidateHeaders: () => CreateHttpValidateHeadersTransformer.transform,\n    createParameter: () => CreateHttpParameterTransformer.transform,\n    createQuery: () => CreateHttpQueryTransformer.transform,\n    createIsQuery: () => CreateHttpIsQueryTransformer.transform,\n    createAssertQuery: () => CreateHttpAssertQueryTransformer.transform,\n    createValidateQuery: () => CreateHttpValidateQueryTransformer.transform,\n  },\n  json: {\n    // SCHEMA\n    application: () => (P) => () => JsonApplicationTransformer.transform(P),\n\n    // PARSER\n    isParse: () => JsonIsParseTransformer.transform,\n    assertParse: () => JsonAssertParseTransformer.transform,\n    validateParse: () => JsonValidateParseTransformer.transform,\n\n    // STRINGIFY\n    stringify: () => JsonStringifyTransformer.transform,\n    assertStringify: () => JsonAssertStringifyTransformer.transform,\n    isStringify: () => JsonIsStringifyTransformer.transform,\n    validateStringify: () => JsonValidateStringifyTransformer.transform,\n\n    // FACTORIES\n    createIsParse: () => JsonCreateIsParseTransformer.transform,\n    createAssertParse: () => JsonCreateAssertParseTransformer.transform,\n    createValidateParse: () => JsonCreateValidateParseTransformer.transform,\n    createStringify: () => JsonCreateStringifyTransformer.transform,\n    createAssertStringify: () => JsonCreateAssertStringifyTransformer.transform,\n    createIsStringify: () => JsonCreateIsStringifyTransformer.transform,\n    createValidateStringify: () =>\n      JsonCreateValidateStringifyTransformer.transform,\n  },\n  protobuf: {\n    // SCHEMA\n    message: () => ProtobufMessageTransformer.transform,\n\n    // ENCODE\n    encode: () => ProtobufEncodeTransformer.transform,\n    assertEncode: () => ProtobufAssertEncodeTransformer.transform,\n    isEncode: () => ProtobufIsEncodeTransformer.transform,\n    validateEncode: () => ProtobufValidateEncodeTransformer.transform,\n\n    // DECODE\n    decode: () => ProtobufDecodeTransformer.transform,\n    assertDecode: () => ProtobufAssertDecodeTransformer.transform,\n    isDecode: () => ProtobufIsDecodeTransformer.transform,\n    validateDecode: () => ProtobufValidateDecodeTransformer.transform,\n\n    // FACTORIES\n    createEncode: () => ProtobufCreateEncodeTransformer.transform,\n    createAssertEncode: () => ProtobufCreateAssertEncodeTransformer.transform,\n    createIsEncode: () => ProtobufCreateIsEncodeTransformer.transform,\n    createValidateEncode: () =>\n      ProtobufCreateValidateEncodeTransformer.transform,\n    createDecode: () => ProtobufCreateDecodeTransformer.transform,\n    createAssertDecode: () => ProtobufCreateAssertDecodeTransformer.transform,\n    createIsDecode: () => ProtobufCreateIsDecodeTransformer.transform,\n    createValidateDecode: () =>\n      ProtobufCreateValidateDecodeTransformer.transform,\n  },\n  reflect: {\n    metadata: () => ReflectMetadataTransformer.transform,\n  },\n  misc: {\n    literals: () => (project) => () =>\n      MiscLiteralsTransformer.transform(project),\n\n    // CLONE\n    clone: () => MiscCloneTransformer.transform,\n    assertClone: () => MiscAssertCloneTransformer.transform,\n    isClone: () => MiscIsCloneTransformer.transform,\n    validateClone: () => MiscValidateCloneTransformer.transform,\n\n    // PRUNE\n    prune: () => MiscPruneTransformer.transform,\n    assertPrune: () => MiscAssertPruneTransformer.transform,\n    isPrune: () => MiscIsPruneTransformer.transform,\n    validatePrune: () => MiscValidatePruneTransformer.transform,\n\n    // FACTORIES\n    createClone: () => MiscCreateCloneTransformer.transform,\n    createAssertClone: () => MiscCreateAssertCloneTransformer.transform,\n    createIsClone: () => MiscCreateIsCloneTransformer.transform,\n    createValidateClone: () => MiscCreateValidateCloneTransformer.transform,\n    createPrune: () => MiscCreatePruneTransformer.transform,\n    createAssertPrune: () => MiscCreateAssertPruneTransformer.transform,\n    createIsPrune: () => MiscCreateIsPruneTransformer.transform,\n    createValidatePrune: () => MiscCreateValidatePruneTransformer.transform,\n  },\n  notations: {\n    // CAMEL\n    camel: () => NotationGeneralTransformer.transform(NamingConvention.camel),\n    assertCamel: () =>\n      NotationAssertGeneralTransformer.transform(NamingConvention.camel),\n    isCamel: () =>\n      NotationIsGeneralTransformer.transform(NamingConvention.camel),\n    validateCamel: () =>\n      NotationValidateGeneralTransformer.transform(NamingConvention.camel),\n\n    // PASCAL\n    pascal: () => NotationGeneralTransformer.transform(NamingConvention.pascal),\n    assertPascal: () =>\n      NotationAssertGeneralTransformer.transform(NamingConvention.pascal),\n    isPascal: () =>\n      NotationIsGeneralTransformer.transform(NamingConvention.pascal),\n    validatePascal: () =>\n      NotationValidateGeneralTransformer.transform(NamingConvention.pascal),\n\n    // SNAKE\n    snake: () => NotationGeneralTransformer.transform(NamingConvention.snake),\n    assertSnake: () =>\n      NotationAssertGeneralTransformer.transform(NamingConvention.snake),\n    isSnake: () =>\n      NotationIsGeneralTransformer.transform(NamingConvention.snake),\n    validateSnake: () =>\n      NotationValidateGeneralTransformer.transform(NamingConvention.snake),\n\n    // FACTORIES\n    createCamel: () =>\n      NotationCreateGeneralTransformer.transform(NamingConvention.camel),\n    createAssertCamel: () =>\n      NotationCreateAssertGeneralTransformer.transform(NamingConvention.camel),\n    createIsCamel: () =>\n      NotationCreateIsGeneralTransformer.transform(NamingConvention.camel),\n    createValidateCamel: () =>\n      NotationCreateValidateGeneralTransformer.transform(\n        NamingConvention.camel,\n      ),\n    createPascal: () =>\n      NotationCreateGeneralTransformer.transform(NamingConvention.pascal),\n    createAssertPascal: () =>\n      NotationCreateAssertGeneralTransformer.transform(NamingConvention.pascal),\n    createIsPascal: () =>\n      NotationCreateIsGeneralTransformer.transform(NamingConvention.pascal),\n    createValidatePascal: () =>\n      NotationCreateValidateGeneralTransformer.transform(\n        NamingConvention.pascal,\n      ),\n    createSnake: () =>\n      NotationCreateGeneralTransformer.transform(NamingConvention.snake),\n    createAssertSnake: () =>\n      NotationCreateAssertGeneralTransformer.transform(NamingConvention.snake),\n    createIsSnake: () =>\n      NotationCreateIsGeneralTransformer.transform(NamingConvention.snake),\n    createValidateSnake: () =>\n      NotationCreateValidateGeneralTransformer.transform(\n        NamingConvention.snake,\n      ),\n  },\n};\n"],"mappings":"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","names":["path","CallExpressionTransformer","transform","project","expression","declaration","checker","getResolvedSignature","location","path","resolve","getSourceFile","fileName","isTarget","module","split","sep","at","name","getTypeAtLocation","symbol","functor","FUNCTORS","undefined","result","files","Object","keys","some","f","includes","join","assert","AssertTransformer","equals","guard","assertGuard","assertType","is","IsTransformer","validate","ValidateTransformer","assertEquals","assertGuardEquals","validateEquals","random","RandomTransformer","metadata","ReflectMetadataTransformer","createAssert","CreateAssertTransformer","createAssertGuard","createAssertType","createIs","CreateIsTransformer","createValidate","CreateValidateTransformer","createAssertEquals","createAssertGuardEquals","createEquals","createValidateEquals","createRandom","CreateRandomTransformer","functional","assertFunction","FunctionalGenericTransformer","method","programmer","FunctionalAssertFunctionProgrammer","write","assertParameters","FunctionalAssertParametersProgrammer","assertReturn","FunctionAssertReturnProgrammer","assertEqualsFunction","assertEqualsParameters","assertEqualsReturn","isFunction","FunctionalIsFunctionProgrammer","isParameters","FunctionalIsParametersProgrammer","isReturn","FunctionalIsReturnProgrammer","equalsFunction","equalsParameters","equalsReturn","validateFunction","FunctionalValidateFunctionProgrammer","validateParameters","FunctionalValidateParametersProgrammer","validateReturn","FunctionalValidateReturnProgrammer","validateEqualsFunction","validateEqualsParameters","validateEqualsReturn","http","formData","HttpFormDataTransformer","isFormData","HttpIsFormDataTransformer","assertFormData","HttpAssertFormDataTransformer","validateFormData","HttpValidateFormDataTransformer","headers","HttpHeadersTransformer","isHeaders","HttpIsHeadersTransformer","assertHeaders","HttpAssertHeadersTransformer","validateHeaders","HttpValidateHeadersTransformer","parameter","HttpParameterTransformer","query","HttpQueryTransformer","isQuery","HttpIsQueryTransformer","assertQuery","HttpAssertQueryTransformer","validateQuery","HttpValidateQueryTransformer","createFormData","CreateHttpFormDataTransformer","createIsFormData","CreateHttpIsFormDataTransformer","createAssertFormData","CreateHttpAssertFormDataTransformer","createValidateFormData","CreateHttpValidateFormDataTransformer","createHeaders","CreateHttpHeadersTransformer","createIsHeaders","CreateHttpIsHeadersTransformer","createAssertHeaders","CreateHttpAssertHeadersTransformer","createValidateHeaders","CreateHttpValidateHeadersTransformer","createParameter","CreateHttpParameterTransformer","createQuery","CreateHttpQueryTransformer","createIsQuery","CreateHttpIsQueryTransformer","createAssertQuery","CreateHttpAssertQueryTransformer","createValidateQuery","CreateHttpValidateQueryTransformer","json","application","P","JsonApplicationTransformer","isParse","JsonIsParseTransformer","assertParse","JsonAssertParseTransformer","validateParse","JsonValidateParseTransformer","stringify","JsonStringifyTransformer","assertStringify","JsonAssertStringifyTransformer","isStringify","JsonIsStringifyTransformer","validateStringify","JsonValidateStringifyTransformer","createIsParse","JsonCreateIsParseTransformer","createAssertParse","JsonCreateAssertParseTransformer","createValidateParse","JsonCreateValidateParseTransformer","createStringify","JsonCreateStringifyTransformer","createAssertStringify","JsonCreateAssertStringifyTransformer","createIsStringify","JsonCreateIsStringifyTransformer","createValidateStringify","JsonCreateValidateStringifyTransformer","protobuf","message","ProtobufMessageTransformer","encode","ProtobufEncodeTransformer","assertEncode","ProtobufAssertEncodeTransformer","isEncode","ProtobufIsEncodeTransformer","validateEncode","ProtobufValidateEncodeTransformer","decode","ProtobufDecodeTransformer","assertDecode","ProtobufAssertDecodeTransformer","isDecode","ProtobufIsDecodeTransformer","validateDecode","ProtobufValidateDecodeTransformer","createEncode","ProtobufCreateEncodeTransformer","createAssertEncode","ProtobufCreateAssertEncodeTransformer","createIsEncode","ProtobufCreateIsEncodeTransformer","createValidateEncode","ProtobufCreateValidateEncodeTransformer","createDecode","ProtobufCreateDecodeTransformer","createAssertDecode","ProtobufCreateAssertDecodeTransformer","createIsDecode","ProtobufCreateIsDecodeTransformer","createValidateDecode","ProtobufCreateValidateDecodeTransformer","reflect","misc","literals","MiscLiteralsTransformer","clone","MiscCloneTransformer","assertClone","MiscAssertCloneTransformer","isClone","MiscIsCloneTransformer","validateClone","MiscValidateCloneTransformer","prune","MiscPruneTransformer","assertPrune","MiscAssertPruneTransformer","isPrune","MiscIsPruneTransformer","validatePrune","MiscValidatePruneTransformer","createClone","MiscCreateCloneTransformer","createAssertClone","MiscCreateAssertCloneTransformer","createIsClone","MiscCreateIsCloneTransformer","createValidateClone","MiscCreateValidateCloneTransformer","createPrune","MiscCreatePruneTransformer","createAssertPrune","MiscCreateAssertPruneTransformer","createIsPrune","MiscCreateIsPruneTransformer","createValidatePrune","MiscCreateValidatePruneTransformer","notations","camel","NotationGeneralTransformer","NamingConvention","assertCamel","NotationAssertGeneralTransformer","isCamel","NotationIsGeneralTransformer","validateCamel","NotationValidateGeneralTransformer","pascal","assertPascal","isPascal","validatePascal","snake","assertSnake","isSnake","validateSnake","createCamel","NotationCreateGeneralTransformer","createAssertCamel","NotationCreateAssertGeneralTransformer","createIsCamel","NotationCreateIsGeneralTransformer","createValidateCamel","NotationCreateValidateGeneralTransformer","createPascal","createAssertPascal","createIsPascal","createValidatePascal","createSnake","createAssertSnake","createIsSnake","createValidateSnake"]}