{"version":3,"sources":["../src/factories/CommentFactory.ts"],"sourcesContent":["import ts from \"typescript\";\n\nexport namespace CommentFactory {\n  export const description = (\n    symbol: ts.Symbol,\n    includeTags: boolean = false,\n  ): string | undefined => {\n    const node = symbol.declarations?.[0];\n    if (!node) return undefined;\n\n    // FOR LEGACY TS < 5.2\n    const [major, minor] = ts.versionMajorMinor.split(\".\").map(Number) as [\n      number,\n      number,\n    ];\n    if (major < 5 || (major === 5 && minor < 1)) {\n      const content: string[] = [];\n      const main: string = ts.displayPartsToString(\n        symbol.getDocumentationComment(undefined),\n      );\n      if (main.length) {\n        content.push(main);\n        if (includeTags && symbol.getJsDocTags().length) content.push(\"\");\n      }\n      if (includeTags)\n        for (const tag of symbol.getJsDocTags()) {\n          content.push(\n            tag.text\n              ? `@${tag.name} ${ts.displayPartsToString(tag.text)}`\n              : `@${tag.name}`,\n          );\n        }\n      return content.length\n        ? content.map((line) => line.split(\"\\r\\n\").join(\"\\n\")).join(\"\\n\")\n        : undefined;\n    }\n\n    // NEW FEATURE OF TS 5.2\n    const elements: readonly (ts.JSDoc | ts.JSDocTag)[] =\n      ts.getJSDocCommentsAndTags(node);\n    if (elements.length === 0) return undefined;\n\n    const content: string[] = [];\n    for (const comment of elements) {\n      if (ts.isJSDoc(comment)) {\n        const parsed: string | undefined = ts.getTextOfJSDocComment(\n          comment.comment,\n        );\n        if (parsed?.length) {\n          content.push(parsed);\n          if (includeTags && comment.tags?.length) content.push(\"\");\n        }\n        if (includeTags)\n          for (const tag of comment.tags ?? [])\n            content.push(parseJSDocTag(tag));\n      } else if (includeTags) content.push(parseJSDocTag(comment));\n    }\n    const output: string = content\n      .map((line) => line.split(\"\\r\\n\").join(\"\\n\"))\n      .join(\"\\n\");\n    return output.length ? output : undefined;\n  };\n\n  export const merge = (comments: ts.SymbolDisplayPart[]): string =>\n    comments\n      .map((part) => part.text)\n      .map((str) => str.split(\"\\r\\n\").join(\"\\n\"))\n      .join(\"\");\n}\n\nconst parseJSDocTag = (tag: ts.JSDocTag): string => {\n  const name: string | undefined = (\n    tag as ts.JSDocParameterTag\n  ).name?.getText();\n  const parsed: string | undefined = ts.getTextOfJSDocComment(tag.comment);\n  return [`@${tag.tagName.text}`, name, parsed]\n    .filter((str) => !!str?.length)\n    .join(\" \");\n};\n"],"mappings":";;;;;AAAA,OAAOA,QAAQ;;UAEEC,iBAAAA;kBACFC,cAAc,CACzBC,QACAC,cAAuB,UAAK;AAE5B,UAAMC,OAAOF,OAAOG,eAAe,CAAA;AACnC,QAAI,CAACD,KAAM,QAAOE;AAGlB,UAAM,CAACC,OAAOC,KAAAA,IAASC,GAAGC,kBAAkBC,MAAM,GAAA,EAAKC,IAAIC,MAAAA;AAI3D,QAAIN,QAAQ,KAAMA,UAAU,KAAKC,QAAQ,GAAI;AAC3C,YAAMM,WAAoB,CAAA;AAC1B,YAAMC,OAAeN,GAAGO,qBACtBd,OAAOe,wBAAwBX,MAAAA,CAAAA;AAEjC,UAAIS,KAAKG,QAAQ;AACfJ,QAAAA,SAAQK,KAAKJ,IAAAA;AACb,YAAIZ,eAAeD,OAAOkB,aAAY,EAAGF,OAAQJ,CAAAA,SAAQK,KAAK,EAAA;MAChE;AACA,UAAIhB,YACF,YAAWkB,OAAOnB,OAAOkB,aAAY,GAAI;AACvCN,QAAAA,SAAQK,KACNE,IAAIC,OACA,IAAID,IAAIE,IAAI,IAAId,GAAGO,qBAAqBK,IAAIC,IAAI,CAAA,KAChD,IAAID,IAAIE,IAAI,EAAE;MAEtB;AACF,aAAOT,SAAQI,SACXJ,SAAQF,IAAI,CAACY,SAASA,KAAKb,MAAM,MAAA,EAAQc,KAAK,IAAA,CAAA,EAAOA,KAAK,IAAA,IAC1DnB;IACN;AAGA,UAAMoB,WACJjB,GAAGkB,wBAAwBvB,IAAAA;AAC7B,QAAIsB,SAASR,WAAW,EAAG,QAAOZ;AAElC,UAAMQ,UAAoB,CAAA;AAC1B,eAAWc,WAAWF,UAAU;AAC9B,UAAIjB,GAAGoB,QAAQD,OAAAA,GAAU;AACvB,cAAME,SAA6BrB,GAAGsB,sBACpCH,QAAQA,OAAO;AAEjB,YAAIE,QAAQZ,QAAQ;AAClBJ,kBAAQK,KAAKW,MAAAA;AACb,cAAI3B,eAAeyB,QAAQI,MAAMd,OAAQJ,SAAQK,KAAK,EAAA;QACxD;AACA,YAAIhB,YACF,YAAWkB,OAAOO,QAAQI,QAAQ,CAAA,EAChClB,SAAQK,KAAKc,cAAcZ,GAAAA,CAAAA;MACjC,WAAWlB,YAAaW,SAAQK,KAAKc,cAAcL,OAAAA,CAAAA;IACrD;AACA,UAAMM,SAAiBpB,QACpBF,IAAI,CAACY,SAASA,KAAKb,MAAM,MAAA,EAAQc,KAAK,IAAA,CAAA,EACtCA,KAAK,IAAA;AACR,WAAOS,OAAOhB,SAASgB,SAAS5B;EAClC;kBAEa6B,QAAQ,CAACC,aACpBA,SACGxB,IAAI,CAACyB,SAASA,KAAKf,IAAI,EACvBV,IAAI,CAAC0B,QAAQA,IAAI3B,MAAM,MAAA,EAAQc,KAAK,IAAA,CAAA,EACpCA,KAAK,EAAA;AACZ,GAlEiBzB,mBAAAA,iBAAAA,CAAAA,EAAAA;AAoEjB,IAAMiC,gBAAgB,wBAACZ,QAAAA;AACrB,QAAME,OACJF,IACAE,MAAMgB,QAAAA;AACR,QAAMT,SAA6BrB,GAAGsB,sBAAsBV,IAAIO,OAAO;AACvE,SAAO;IAAC,IAAIP,IAAImB,QAAQlB,IAAI;IAAIC;IAAMO;IACnCW,OAAO,CAACH,QAAQ,CAAC,CAACA,KAAKpB,MAAAA,EACvBO,KAAK,GAAA;AACV,GARsB;","names":["ts","CommentFactory","description","symbol","includeTags","node","declarations","undefined","major","minor","ts","versionMajorMinor","split","map","Number","content","main","displayPartsToString","getDocumentationComment","length","push","getJsDocTags","tag","text","name","line","join","elements","getJSDocCommentsAndTags","comment","isJSDoc","parsed","getTextOfJSDocComment","tags","parseJSDocTag","output","merge","comments","part","str","getText","tagName","filter"]}