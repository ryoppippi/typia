{"version":3,"sources":["../src/programmers/misc/MiscIsCloneProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { MiscCloneProgrammer } from \"./MiscCloneProgrammer\";\n\nexport namespace MiscIsCloneProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\"))],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createImportTypeNode(\n            ts.factory.createLiteralTypeNode(\n              ts.factory.createStringLiteral(\"typia\"),\n            ),\n            undefined,\n            ts.factory.createIdentifier(\"Resolved\"),\n            [\n              ts.factory.createTypeReferenceNode(\n                name ?? TypeFactory.getFullName(project.checker)(type),\n              ),\n            ],\n            false,\n          ),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write(project)(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"clone\",\n            MiscCloneProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createPrefixUnaryExpression(\n              ts.SyntaxKind.ExclamationToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n            ),\n            ts.factory.createReturnStatement(ts.factory.createNull()),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"clone\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,wBAAAA;yBACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IAACC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;KAC1DP,GAAGC,QAAQO,oBAAoB;IAC7BR,GAAGC,QAAQQ,qBACTT,GAAGC,QAAQS,sBACTV,GAAGC,QAAQU,oBAAoB,OAAA,CAAA,GAEjCR,QACAH,GAAGC,QAAQW,iBAAiB,UAAA,GAC5B;MACEZ,GAAGC,QAAQY,wBACTd,QAAQO,YAAYQ,YAAYlB,QAAQmB,OAAO,EAAEjB,IAAAA,CAAAA;OAGrD,KAAA;IAEFE,GAAGC,QAAQS,sBAAsBV,GAAGC,QAAQe,WAAU,CAAA;GACvD,GACDb,QACAH,GAAGC,QAAQgB,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAazB,MAAMC,OAAAA,EAASC,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAEnDmB,iBAAiBC,SACf,SACAE,oBAAoB1B,MAAM;MACxB,GAAGC;MACH0B,SAAS;QACP,GAAG1B,QAAQ0B;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG3B,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBC,GAAGC,QAAQwB,kBACTzB,GAAGC,QAAQyB,4BACT1B,GAAG2B,WAAWC,kBACd5B,GAAGC,QAAQ4B,qBACT7B,GAAGC,QAAQW,iBAAiB,IAAA,GAC5BT,QACA;MAACH,GAAGC,QAAQW,iBAAiB,OAAA;KAAS,CAAA,GAG1CZ,GAAGC,QAAQ6B,sBAAsB9B,GAAGC,QAAQe,WAAU,CAAA,CAAA;IAExDE,iBAAiBC,SACf,UACAnB,GAAGC,QAAQ4B,qBACT7B,GAAGC,QAAQW,iBAAiB,OAAA,GAC5BT,QACA;MAACH,GAAGC,QAAQW,iBAAiB,OAAA;KAAS,CAAA;IAG1CZ,GAAGC,QAAQ6B,sBACT9B,GAAGC,QAAQW,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GAlEiBlB,0BAAAA,wBAAAA,CAAAA,EAAAA;","names":["ts","MiscIsCloneProgrammer","write","project","modulo","type","name","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","createUnionTypeNode","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","createTypeReferenceNode","getFullName","checker","createNull","createBlock","StatementFactory","constant","IsProgrammer","MiscCloneProgrammer","options","functional","numeric","createIfStatement","createPrefixUnaryExpression","SyntaxKind","ExclamationToken","createCallExpression","createReturnStatement"]}