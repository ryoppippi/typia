{"version":3,"sources":["../src/transformers/features/misc/MiscLiteralsTransformer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { MiscLiteralsProgrammer } from \"../../../programmers/misc/MiscLiteralsProgrammer\";\n\nimport { IProject } from \"../../IProject\";\nimport { TransformerError } from \"../../TransformerError\";\n\nexport namespace MiscLiteralsTransformer {\n  export const transform =\n    (project: IProject) =>\n    (expression: ts.CallExpression): ts.Expression => {\n      // CHECK GENERIC ARGUMENT EXISTENCE\n      if (!expression.typeArguments?.[0])\n        throw new TransformerError({\n          code: \"typia.misc.literals\",\n          message: \"generic argument is not specified.\",\n        });\n\n      // GET TYPE INFO\n      const node: ts.TypeNode = expression.typeArguments[0];\n      const type: ts.Type = project.checker.getTypeFromTypeNode(node);\n\n      if (type.isTypeParameter())\n        throw new TransformerError({\n          code: \"typia.misc.literals\",\n          message: \"non-specified generic argument.\",\n        });\n\n      // DO TRANSFORM\n      return MiscLiteralsProgrammer.write(project)(type);\n    };\n}\n"],"mappings":";;;;;;;;;UAOiBA,0BAAAA;2BACFC,YACX,CAACC,YACD,CAACC,eAAAA;AAEC,QAAI,CAACA,WAAWC,gBAAgB,CAAA,EAC9B,OAAM,IAAIC,iBAAiB;MACzBC,MAAM;MACNC,SAAS;IACX,CAAA;AAGF,UAAMC,OAAoBL,WAAWC,cAAc,CAAA;AACnD,UAAMK,OAAgBP,QAAQQ,QAAQC,oBAAoBH,IAAAA;AAE1D,QAAIC,KAAKG,gBAAe,EACtB,OAAM,IAAIP,iBAAiB;MACzBC,MAAM;MACNC,SAAS;IACX,CAAA;AAGF,WAAOM,uBAAuBC,MAAMZ,OAAAA,EAASO,IAAAA;EAC/C;AACJ,GAxBiBT,4BAAAA,0BAAAA,CAAAA,EAAAA;","names":["MiscLiteralsTransformer","transform","project","expression","typeArguments","TransformerError","code","message","node","type","checker","getTypeFromTypeNode","isTypeParameter","MiscLiteralsProgrammer","write"]}