{"version":3,"sources":["../src/factories/internal/metadata/iterate_metadata_native.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { Metadata } from \"../../../schemas/metadata/Metadata\";\n\nimport { ArrayUtil } from \"../../../utils/ArrayUtil\";\n\nimport { TypeFactory } from \"../../TypeFactory\";\n\nexport const iterate_metadata_native =\n  (checker: ts.TypeChecker) =>\n  (meta: Metadata, type: ts.Type): boolean => {\n    const validator = validate(checker)(type);\n    const name: string = TypeFactory.getFullName(checker)(\n      type,\n      type.getSymbol(),\n    );\n\n    const simple = SIMPLES.get(name);\n    if (simple && validator(simple)) {\n      ArrayUtil.set(meta.natives, name, (str) => str);\n      return true;\n    }\n\n    for (const generic of GENERICS)\n      if (\n        name.substring(0, generic.name.length) === generic.name &&\n        validator(generic)\n      ) {\n        ArrayUtil.set(meta.natives, generic.name ?? name, (str) => str);\n        return true;\n      }\n    return false;\n  };\n\nconst validate =\n  (checker: ts.TypeChecker) => (type: ts.Type) => (info: IClassInfo) =>\n    (info.methods ?? []).every((method) => {\n      const returnType = TypeFactory.getReturnType(checker)(type)(method.name);\n      return (\n        returnType !== null &&\n        checker.typeToString(returnType) === method.return\n      );\n    }) &&\n    (info.properties ?? []).every((property) => {\n      const prop = checker.getPropertyOfType(type, property.name);\n      const propType = prop?.valueDeclaration\n        ? checker.getTypeAtLocation(prop?.valueDeclaration)\n        : undefined;\n      return (\n        propType !== undefined &&\n        checker.typeToString(propType) === property.type\n      );\n    });\n\nconst getBinaryProps = (className: string): IClassInfo => ({\n  name: className,\n  methods: [\n    ...[\"indexOf\", \"lastIndexOf\"].map((name) => ({\n      name,\n      return: \"number\",\n    })),\n    ...[\"some\", \"every\"].map((name) => ({\n      name,\n      return: \"boolean\",\n    })),\n    ...[\"join\", \"toLocaleString\"].map((name) => ({\n      name,\n      return: \"string\",\n    })),\n    ...[\"reverse\", \"slice\", \"subarray\"].map((name) => ({\n      name,\n      return: className,\n    })),\n  ],\n  properties: [\"BYTES_PER_ELEMENT\", \"length\", \"byteLength\", \"byteOffset\"].map(\n    (name) => ({\n      name,\n      type: \"number\",\n    }),\n  ),\n});\nconst SIMPLES: Map<string, IClassInfo> = new Map([\n  [\n    \"Date\",\n    {\n      methods: [\"getTime\", \"getFullYear\", \"getMonth\", \"getMinutes\"].map(\n        (name) => ({\n          name,\n          return: \"number\",\n        }),\n      ),\n    },\n  ],\n  [\n    \"Boolean\",\n    {\n      methods: [\n        {\n          name: \"valueOf\",\n          return: \"boolean\",\n        },\n      ],\n    },\n  ],\n  [\n    \"Number\",\n    {\n      methods: [\n        ...[\"toFixed\", \"toExponential\", \"toPrecision\"].map((name) => ({\n          name,\n          return: \"string\",\n        })),\n        { name: \"valueOf\", return: \"number\" },\n      ],\n    },\n  ],\n  [\n    \"String\",\n    {\n      methods: [\n        \"charAt\",\n        \"concat\",\n        \"valueOf\",\n        \"trim\",\n        \"replace\",\n        \"substring\",\n      ].map((name) => ({ name, return: \"string\" })),\n    },\n  ],\n  ...[\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigUint64Array\",\n    \"Int8Array\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"BigInt64Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n  ].map((name) => [name, getBinaryProps(name)] as const),\n  ...[\"ArrayBuffer\", \"SharedArrayBuffer\"].map((className) => {\n    const info: IClassInfo = {\n      methods: [{ name: \"slice\", return: className }],\n      properties: [{ name: \"byteLength\", type: \"number\" }],\n    };\n    return [className, info] as const;\n  }),\n  ...[\"Blob\", \"File\"].map(\n    (className) =>\n      [\n        className,\n        {\n          methods: [\n            { name: \"arrayBuffer\", return: \"Promise<ArrayBuffer>\" },\n            { name: \"slice\", return: \"Blob\" },\n            { name: \"text\", return: \"Promise<string>\" },\n          ],\n          properties: [\n            { name: \"size\", type: \"number\" },\n            { name: \"type\", type: \"string\" },\n          ],\n        },\n      ] satisfies [string, IClassInfo],\n  ),\n  [\n    \"DataView\",\n    {\n      methods: [\n        \"getFloat32\",\n        \"getFloat64\",\n        \"getInt8\",\n        \"getInt16\",\n        \"getInt32\",\n        \"getUint8\",\n        \"getUint16\",\n        \"getUint32\",\n      ].map((name) => ({\n        name,\n        return: \"number\",\n      })),\n    },\n  ],\n]);\nconst GENERICS: Array<IClassInfo & { name: string }> = [\n  \"WeakMap\",\n  \"WeakSet\",\n].map((name) => ({\n  name,\n  methods: [\"has\", \"delete\"].map((name) => ({\n    name,\n    return: \"boolean\",\n  })),\n}));\n\ninterface IClassInfo {\n  name?: string;\n  methods?: IMethod[];\n  properties?: IProperty[];\n}\ninterface IProperty {\n  name: string;\n  type: string;\n}\ninterface IMethod {\n  name: string;\n  return: string;\n}\n"],"mappings":";;;;;;;;;;;AAQO,IAAMA,0BACX,wBAACC,YACD,CAACC,MAAgBC,SAAAA;AACf,QAAMC,YAAYC,SAASJ,OAAAA,EAASE,IAAAA;AACpC,QAAMG,OAAeC,YAAYC,YAAYP,OAAAA,EAC3CE,MACAA,KAAKM,UAAS,CAAA;AAGhB,QAAMC,SAASC,QAAQC,IAAIN,IAAAA;AAC3B,MAAII,UAAUN,UAAUM,MAAAA,GAAS;AAC/BG,cAAUC,IAAIZ,KAAKa,SAAST,MAAM,CAACU,QAAQA,GAAAA;AAC3C,WAAO;EACT;AAEA,aAAWC,WAAWC,SACpB,KACEZ,KAAKa,UAAU,GAAGF,QAAQX,KAAKc,MAAM,MAAMH,QAAQX,QACnDF,UAAUa,OAAAA,GACV;AACAJ,cAAUC,IAAIZ,KAAKa,SAASE,QAAQX,QAAQA,MAAM,CAACU,QAAQA,GAAAA;AAC3D,WAAO;EACT;AACF,SAAO;AACT,GAvBA;AAyBF,IAAMX,WACJ,wBAACJ,YAA4B,CAACE,SAAkB,CAACkB,UAC9CA,KAAKC,WAAW,CAAA,GAAIC,MAAM,CAACC,WAAAA;AAC1B,QAAMC,aAAalB,YAAYmB,cAAczB,OAAAA,EAASE,IAAAA,EAAMqB,OAAOlB,IAAI;AACvE,SACEmB,eAAe,QACfxB,QAAQ0B,aAAaF,UAAAA,MAAgBD,OAAOI;AAEhD,CAAA,MACCP,KAAKQ,cAAc,CAAA,GAAIN,MAAM,CAACO,aAAAA;AAC7B,QAAMC,OAAO9B,QAAQ+B,kBAAkB7B,MAAM2B,SAASxB,IAAI;AAC1D,QAAM2B,WAAWF,MAAMG,mBACnBjC,QAAQkC,kBAAkBJ,MAAMG,gBAAAA,IAChCE;AACJ,SACEH,aAAaG,UACbnC,QAAQ0B,aAAaM,QAAAA,MAAcH,SAAS3B;AAEhD,CAAA,GAjBF;AAmBF,IAAMkC,iBAAiB,wBAACC,eAAmC;EACzDhC,MAAMgC;EACNhB,SAAS;OACJ;MAAC;MAAW;MAAeiB,IAAI,CAACjC,UAAU;MAC3CA;MACAsB,QAAQ;IACV,EAAA;OACG;MAAC;MAAQ;MAASW,IAAI,CAACjC,UAAU;MAClCA;MACAsB,QAAQ;IACV,EAAA;OACG;MAAC;MAAQ;MAAkBW,IAAI,CAACjC,UAAU;MAC3CA;MACAsB,QAAQ;IACV,EAAA;OACG;MAAC;MAAW;MAAS;MAAYW,IAAI,CAACjC,UAAU;MACjDA;MACAsB,QAAQU;IACV,EAAA;;EAEFT,YAAY;IAAC;IAAqB;IAAU;IAAc;IAAcU,IACtE,CAACjC,UAAU;IACTA;IACAH,MAAM;EACR,EAAA;AAEJ,IA1BuB;AA2BvB,IAAMQ,UAAmC,IAAI6B,IAAI;EAC/C;IACE;IACA;MACElB,SAAS;QAAC;QAAW;QAAe;QAAY;QAAciB,IAC5D,CAACjC,UAAU;QACTA;QACAsB,QAAQ;MACV,EAAA;IAEJ;;EAEF;IACE;IACA;MACEN,SAAS;QACP;UACEhB,MAAM;UACNsB,QAAQ;QACV;;IAEJ;;EAEF;IACE;IACA;MACEN,SAAS;WACJ;UAAC;UAAW;UAAiB;UAAeiB,IAAI,CAACjC,UAAU;UAC5DA;UACAsB,QAAQ;QACV,EAAA;QACA;UAAEtB,MAAM;UAAWsB,QAAQ;QAAS;;IAExC;;EAEF;IACE;IACA;MACEN,SAAS;QACP;QACA;QACA;QACA;QACA;QACA;QACAiB,IAAI,CAACjC,UAAU;QAAEA;QAAMsB,QAAQ;MAAS,EAAA;IAC5C;;KAEC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAW,IAAI,CAACjC,SAAS;IAACA;IAAM+B,eAAe/B,IAAAA;GAAM;KACzC;IAAC;IAAe;IAAqBiC,IAAI,CAACD,cAAAA;AAC3C,UAAMjB,OAAmB;MACvBC,SAAS;QAAC;UAAEhB,MAAM;UAASsB,QAAQU;QAAU;;MAC7CT,YAAY;QAAC;UAAEvB,MAAM;UAAcH,MAAM;QAAS;;IACpD;AACA,WAAO;MAACmC;MAAWjB;;EACrB,CAAA;KACG;IAAC;IAAQ;IAAQkB,IAClB,CAACD,cACC;IACEA;IACA;MACEhB,SAAS;QACP;UAAEhB,MAAM;UAAesB,QAAQ;QAAuB;QACtD;UAAEtB,MAAM;UAASsB,QAAQ;QAAO;QAChC;UAAEtB,MAAM;UAAQsB,QAAQ;QAAkB;;MAE5CC,YAAY;QACV;UAAEvB,MAAM;UAAQH,MAAM;QAAS;QAC/B;UAAEG,MAAM;UAAQH,MAAM;QAAS;;IAEnC;GACD;EAEL;IACE;IACA;MACEmB,SAAS;QACP;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAiB,IAAI,CAACjC,UAAU;QACfA;QACAsB,QAAQ;MACV,EAAA;IACF;;CAEH;AACD,IAAMV,WAAiD;EACrD;EACA;EACAqB,IAAI,CAACjC,UAAU;EACfA;EACAgB,SAAS;IAAC;IAAO;IAAUiB,IAAI,CAACjC,WAAU;IACxCA,MAAAA;IACAsB,QAAQ;EACV,EAAA;AACF,EAAA;","names":["iterate_metadata_native","checker","meta","type","validator","validate","name","TypeFactory","getFullName","getSymbol","simple","SIMPLES","get","ArrayUtil","set","natives","str","generic","GENERICS","substring","length","info","methods","every","method","returnType","getReturnType","typeToString","return","properties","property","prop","getPropertyOfType","propType","valueDeclaration","getTypeAtLocation","undefined","getBinaryProps","className","map","Map"]}