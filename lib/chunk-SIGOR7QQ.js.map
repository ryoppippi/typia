{"version":3,"sources":["../src/schemas/metadata/MetadataTuple.ts"],"names":["MetadataTuple","type","tags","props","create","toJSON","map","row","slice"],"mappings":";;;;;AAMO,IAAMA,gBAAN,MAAMA,eAAAA;EAAb,OAAaA;;;EACKC;EACAC;;;;EAKhB,YAAoBC,OAAuC;AACzD,SAAKF,OAAOE,MAAMF;AAClB,SAAKC,OAAOC,MAAMD;EACpB;;;;EAKA,OAAcE,OAAOD,OAAsD;AACzE,WAAO,IAAIH,eAAcG,KAAAA;EAC3B;EAEOE,SAAyB;AAC9B,WAAO;MACLJ,MAAM,KAAKA,KAAKI,OAAM;MACtBH,MAAM,KAAKA,KAAKI,IAAI,CAACC,QAAQA,IAAIC,MAAK,CAAA;IACxC;EACF;AACF","sourcesContent":["import { ClassProperties } from \"../../typings/ClassProperties\";\n\nimport { IMetadataTuple } from \"./IMetadataTuple\";\nimport { IMetadataTypeTag } from \"./IMetadataTypeTag\";\nimport { MetadataTupleType } from \"./MetadataTupleType\";\n\nexport class MetadataTuple {\n  public readonly type: MetadataTupleType;\n  public readonly tags: IMetadataTypeTag[][];\n\n  /**\n   * @hidden\n   */\n  private constructor(props: ClassProperties<MetadataTuple>) {\n    this.type = props.type;\n    this.tags = props.tags;\n  }\n\n  /**\n   * @internal\n   */\n  public static create(props: ClassProperties<MetadataTuple>): MetadataTuple {\n    return new MetadataTuple(props);\n  }\n\n  public toJSON(): IMetadataTuple {\n    return {\n      type: this.type.toJSON(),\n      tags: this.tags.map((row) => row.slice()),\n    };\n  }\n}\n"]}