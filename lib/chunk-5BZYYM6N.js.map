{"version":3,"sources":["../src/programmers/misc/MiscValidateCloneProgrammer.ts"],"names":["ts","MiscValidateCloneProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","createTypeReferenceNode","getFullName","checker","createBlock","StatementFactory","constant","ValidateProgrammer","options","functional","numeric","MiscCloneProgrammer","createAsExpression","createCallExpression","createIdentifier","createIfStatement","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,8BAAAA;+BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IAACC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;KAC1Db,GAAGO,QAAQO,wBACT,oCACER,QAAQM,YAAYG,YAAYZ,QAAQa,OAAO,EAAEX,IAAAA,CAAAA,IAC/C,GAENI,QACAT,GAAGO,QAAQU,YAAY;IACrBC,iBAAiBC,SACf,YACAC,mBAAmBlB,MAAM;MACvB,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BY,iBAAiBC,SACf,SACAK,oBAAoBtB,MAAM;MACxB,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBY,iBAAiBC,SACf,UACAnB,GAAGO,QAAQkB,mBACTzB,GAAGO,QAAQmB,qBACT1B,GAAGO,QAAQoB,iBAAiB,UAAA,GAC5BlB,QACA;MAACT,GAAGO,QAAQoB,iBAAiB,OAAA;KAAS,GAExCf,YAAYC,QAAQ,KAAA,CAAA,CAAA;IAGxBb,GAAGO,QAAQqB,kBACT5B,GAAGO,QAAQoB,iBAAiB,gBAAA,GAC5B3B,GAAGO,QAAQsB,0BACT7B,GAAGO,QAAQuB,uBACT9B,GAAGO,QAAQoB,iBAAiB,aAAA,GAC5B3B,GAAG+B,WAAWC,aACdhC,GAAGO,QAAQmB,qBACT1B,GAAGO,QAAQoB,iBAAiB,OAAA,GAC5BlB,QACA;MAACT,GAAGO,QAAQoB,iBAAiB,OAAA;KAAS,CAAA,CAAA,CAAA;IAK9C3B,GAAGO,QAAQ0B,sBACTjC,GAAGO,QAAQoB,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GApEiB1B,gCAAAA,8BAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ValidateProgrammer } from \"../ValidateProgrammer\";\nimport { MiscCloneProgrammer } from \"./MiscCloneProgrammer\";\n\nexport namespace MiscValidateCloneProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\"))],\n        ts.factory.createTypeReferenceNode(\n          `typia.IValidation<typia.Resolved<${\n            name ?? TypeFactory.getFullName(project.checker)(type)\n          }>>`,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"validate\",\n            ValidateProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"clone\",\n            MiscCloneProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"validate\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createIdentifier(\"output.success\"),\n            ts.factory.createExpressionStatement(\n              ts.factory.createBinaryExpression(\n                ts.factory.createIdentifier(\"output.data\"),\n                ts.SyntaxKind.EqualsToken,\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"clone\"),\n                  undefined,\n                  [ts.factory.createIdentifier(\"input\")],\n                ),\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}