{"version":3,"sources":["../src/programmers/internal/check_native.ts"],"names":["ts","check_native","type","input","instanceOf","ExpressionFactory","isInstanceOf","ATOMIC_LIKE","has","factory","createLogicalOr","createStrictEquality","createStringLiteral","toLowerCase","createTypeOfExpression","Set"],"mappings":";;;;;;;;AAAA,OAAOA,QAAQ;AAOR,IAAMC,eAAe,wBAACC,SAAiB,CAACC,UAAAA;AAC7C,QAAMC,aAAaC,kBAAkBC,aAAaJ,IAAAA,EAAMC,KAAAA;AACxD,SAAOI,YAAYC,IAAIN,IAAAA,IACnBF,GAAGS,QAAQC,gBACTV,GAAGS,QAAQE,qBACTX,GAAGS,QAAQG,oBAAoBV,KAAKW,YAAW,CAAA,GAC/Cb,GAAGS,QAAQK,uBAAuBX,KAAAA,CAAAA,GAEpCC,UAAAA,IAEFA;AACN,GAX4B;AAa5B,IAAMG,cAAc,oBAAIQ,IAAI;EAAC;EAAW;EAAU;CAAS","sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\n\n/**\n * @internal\n */\nexport const check_native = (type: string) => (input: ts.Expression) => {\n  const instanceOf = ExpressionFactory.isInstanceOf(type)(input);\n  return ATOMIC_LIKE.has(type)\n    ? ts.factory.createLogicalOr(\n        ts.factory.createStrictEquality(\n          ts.factory.createStringLiteral(type.toLowerCase()),\n          ts.factory.createTypeOfExpression(input),\n        ),\n        instanceOf,\n      )\n    : instanceOf;\n};\n\nconst ATOMIC_LIKE = new Set([\"Boolean\", \"Number\", \"String\"]);\n"]}