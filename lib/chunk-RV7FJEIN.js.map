{"version":3,"sources":["../src/programmers/json/JsonAssertStringifyProgrammer.ts"],"names":["ts","JsonAssertStringifyProgrammer","write","project","modulo","type","name","init","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createBlock","StatementFactory","constant","options","functional","numeric","JsonStringifyProgrammer","createReturnStatement","createCallExpression","createIdentifier","identifier"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,gCAAAA;iCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BP,GAAGQ,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;IACzDC,iBAAiBC,SAASJ,UAAUL,IAAAA;KAEtCM,YAAYC,QAAQ,QAAA,GACpBJ,QACAV,GAAGQ,QAAQS,YAAY;IACrBC,iBAAiBC,SACf,UACAJ,iBAAiBb,MAAM;MACrB,GAAGC;MACHiB,SAAS;QACP,GAAGjB,QAAQiB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGlB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BY,iBAAiBC,SACf,aACAI,wBAAwBrB,MAAM;MAC5B,GAAGC;MACHiB,SAAS;QACP,GAAGjB,QAAQiB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGlB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBN,GAAGQ,QAAQgB,sBACTxB,GAAGQ,QAAQiB,qBACTzB,GAAGQ,QAAQkB,iBAAiB,WAAA,GAC5BhB,QACA;MACEV,GAAGQ,QAAQiB,qBACTzB,GAAGQ,QAAQkB,iBAAiB,QAAA,GAC5BhB,QACA;QACEV,GAAGQ,QAAQkB,iBAAiB,OAAA;QAC5BX,iBAAiBC,SAASW,WAAU;OACrC;KAEJ,CAAA;GAGN,CAAA;AAET,GAvDiB1B,kCAAAA,gCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { JsonStringifyProgrammer } from \"./JsonStringifyProgrammer\";\n\nexport namespace JsonAssertStringifyProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        TypeFactory.keyword(\"string\"),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"stringify\",\n            JsonStringifyProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"stringify\"),\n              undefined,\n              [\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"assert\"),\n                  undefined,\n                  [\n                    ts.factory.createIdentifier(\"input\"),\n                    AssertProgrammer.Guardian.identifier(),\n                  ],\n                ),\n              ],\n            ),\n          ),\n        ]),\n      );\n}\n"]}