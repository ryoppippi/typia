{"version":3,"sources":["../src/programmers/http/HttpAssertQueryProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { HttpQueryProgrammer } from \"./HttpQueryProgrammer\";\n\nexport namespace HttpAssertQueryProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(HttpQueryProgrammer.INPUT_TYPE),\n          ),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createImportTypeNode(\n          ts.factory.createLiteralTypeNode(\n            ts.factory.createStringLiteral(\"typia\"),\n          ),\n          undefined,\n          ts.factory.createIdentifier(\"Resolved\"),\n          [\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ],\n          false,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"decode\",\n            HttpQueryProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"assert\"),\n                undefined,\n                [\n                  ts.factory.createIdentifier(\"output\"),\n                  AssertProgrammer.Guardian.identifier(),\n                ],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,4BAAAA;6BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAL,GAAGC,QAAQK,wBAAwBC,oBAAoBC,UAAU,CAAA;IAEnEC,iBAAiBC,SAASL,UAAUN,IAAAA;KAEtCC,GAAGC,QAAQU,qBACTX,GAAGC,QAAQW,sBACTZ,GAAGC,QAAQY,oBAAoB,OAAA,CAAA,GAEjCV,QACAH,GAAGC,QAAQa,iBAAiB,UAAA,GAC5B;IACEd,GAAGC,QAAQK,wBACTR,QAAQiB,YAAYC,YAAYrB,QAAQsB,OAAO,EAAEpB,IAAAA,CAAAA;KAGrD,KAAA,GAEFM,QACAH,GAAGC,QAAQiB,YAAY;IACrBC,iBAAiBC,SACf,UACAb,oBAAoBb,MAAM;MACxB,GAAGC;MACH0B,SAAS;QACP,GAAG1B,QAAQ0B;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG3B,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBqB,iBAAiBC,SACf,UACAX,iBAAiBf,MAAM;MACrB,GAAGC;MACH0B,SAAS;QACP,GAAG1B,QAAQ0B;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG3B,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BqB,iBAAiBC,SACf,UACApB,GAAGC,QAAQuB,qBACTxB,GAAGC,QAAQa,iBAAiB,QAAA,GAC5BX,QACA;MAACH,GAAGC,QAAQa,iBAAiB,OAAA;KAAS,CAAA;IAG1Cd,GAAGC,QAAQwB,sBACTzB,GAAGC,QAAQyB,mBACT1B,GAAGC,QAAQuB,qBACTxB,GAAGC,QAAQa,iBAAiB,QAAA,GAC5BX,QACA;MACEH,GAAGC,QAAQa,iBAAiB,QAAA;MAC5BL,iBAAiBC,SAASiB,WAAU;KACrC,GAEHZ,YAAYa,QAAQ,KAAA,CAAA,CAAA;GAGzB,CAAA;AAET,GA3EiBnC,8BAAAA,4BAAAA,CAAAA,EAAAA;","names":["ts","HttpAssertQueryProgrammer","write","project","modulo","type","name","init","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","HttpQueryProgrammer","INPUT_TYPE","AssertProgrammer","Guardian","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","TypeFactory","getFullName","checker","createBlock","StatementFactory","constant","options","functional","numeric","createCallExpression","createReturnStatement","createAsExpression","identifier","keyword"]}