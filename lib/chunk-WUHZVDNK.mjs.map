{"version":3,"sources":["../src/programmers/protobuf/ProtobufIsEncodeProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { ProtobufEncodeProgrammer } from \"./ProtobufEncodeProgrammer\";\n\nexport namespace ProtobufIsEncodeProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ),\n        ],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createTypeReferenceNode(\"Uint8Array\"),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"encode\",\n            ProtobufEncodeProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createConditionalExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              undefined,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"encode\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              undefined,\n              ts.factory.createNull(),\n            ),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,6BAAAA;8BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAL,GAAGC,QAAQK,wBACTP,QAAQQ,YAAYC,YAAYZ,QAAQa,OAAO,EAAEX,IAAAA,CAAAA,CAAAA;KAIvDE,GAAGC,QAAQS,oBAAoB;IAC7BV,GAAGC,QAAQK,wBAAwB,YAAA;IACnCN,GAAGC,QAAQU,sBAAsBX,GAAGC,QAAQW,WAAU,CAAA;GACvD,GACDT,QACAH,GAAGC,QAAQY,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAarB,MAAM;MACjB,GAAGC;MACHqB,SAAS;QACP,GAAGrB,QAAQqB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGtB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1Be,iBAAiBC,SACf,UACAK,yBAAyBzB,MAAM;MAC7B,GAAGC;MACHqB,SAAS;QACP,GAAGrB,QAAQqB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGtB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBC,GAAGC,QAAQoB,sBACTrB,GAAGC,QAAQqB,4BACTtB,GAAGC,QAAQsB,qBACTvB,GAAGC,QAAQuB,iBAAiB,IAAA,GAC5BrB,QACA;MAACH,GAAGC,QAAQuB,iBAAiB,OAAA;KAAS,GAExCrB,QACAH,GAAGC,QAAQsB,qBACTvB,GAAGC,QAAQuB,iBAAiB,QAAA,GAC5BrB,QACA;MAACH,GAAGC,QAAQuB,iBAAiB,OAAA;KAAS,GAExCrB,QACAH,GAAGC,QAAQW,WAAU,CAAA,CAAA;GAG1B,CAAA;AAET,GA/DiBlB,+BAAAA,6BAAAA,CAAAA,EAAAA;","names":["ts","ProtobufIsEncodeProgrammer","write","project","modulo","type","name","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","TypeFactory","getFullName","checker","createUnionTypeNode","createLiteralTypeNode","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","ProtobufEncodeProgrammer","createReturnStatement","createConditionalExpression","createCallExpression","createIdentifier"]}