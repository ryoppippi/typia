{"version":3,"sources":["../src/programmers/misc/MiscAssertPruneProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { MiscPruneProgrammer } from \"./MiscPruneProgrammer\";\n\nexport namespace MiscAssertPruneProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createTypeReferenceNode(\n          name ?? TypeFactory.getFullName(project.checker)(type),\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write(project)(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"prune\",\n            MiscPruneProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"assert\"),\n              undefined,\n              [\n                ts.factory.createIdentifier(\"input\"),\n                AssertProgrammer.Guardian.identifier(),\n              ],\n            ),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"prune\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"input\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,4BAAAA;6BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;IACzDC,iBAAiBC,SAASJ,UAAUN,IAAAA;KAEtCC,GAAGC,QAAQS,wBACTZ,QAAQQ,YAAYK,YAAYhB,QAAQiB,OAAO,EAAEf,IAAAA,CAAAA,GAEnDM,QACAH,GAAGC,QAAQY,YAAY;IACrBC,iBAAiBC,SACf,UACAP,iBAAiBd,MAAMC,OAAAA,EAASC,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAEvDgB,iBAAiBC,SACf,SACAC,oBAAoBtB,MAAM;MACxB,GAAGC;MACHsB,SAAS;QACP,GAAGtB,QAAQsB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGvB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBE,GAAGC,QAAQmB,0BACTpB,GAAGC,QAAQoB,qBACTrB,GAAGC,QAAQqB,iBAAiB,QAAA,GAC5BnB,QACA;MACEH,GAAGC,QAAQqB,iBAAiB,OAAA;MAC5Bd,iBAAiBC,SAASc,WAAU;KACrC,CAAA;IAGLvB,GAAGC,QAAQmB,0BACTpB,GAAGC,QAAQoB,qBACTrB,GAAGC,QAAQqB,iBAAiB,OAAA,GAC5BnB,QACA;MAACH,GAAGC,QAAQqB,iBAAiB,OAAA;KAAS,CAAA;IAG1CtB,GAAGC,QAAQuB,sBACTxB,GAAGC,QAAQqB,iBAAiB,OAAA,CAAA;GAE/B,CAAA;AAET,GAtDiB7B,8BAAAA,4BAAAA,CAAAA,EAAAA;","names":["ts","MiscAssertPruneProgrammer","write","project","modulo","type","name","init","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createTypeReferenceNode","getFullName","checker","createBlock","StatementFactory","constant","MiscPruneProgrammer","options","functional","numeric","createExpressionStatement","createCallExpression","createIdentifier","identifier","createReturnStatement"]}