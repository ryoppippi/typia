{"version":3,"sources":["../src/programmers/helpers/StringifyJoinder.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { TemplateFactory } from \"../../factories/TemplateFactory\";\n\nimport { stringify_dynamic_properties } from \"../internal/stringify_dynamic_properties\";\nimport { stringify_regular_properties } from \"../internal/stringify_regular_properties\";\nimport { FunctionImporter } from \"./FunctionImporter\";\nimport { IExpressionEntry } from \"./IExpressionEntry\";\n\nexport namespace StringifyJoiner {\n  export const object =\n    (importer: FunctionImporter) =>\n    (\n      _input: ts.Expression,\n      entries: IExpressionEntry<ts.Expression>[],\n    ): ts.Expression => {\n      // CHECK AND SORT ENTRIES\n      if (entries.length === 0) return ts.factory.createStringLiteral(\"{}\");\n\n      // PROPERTIES\n      const regular: IExpressionEntry<ts.Expression>[] = entries.filter(\n        (entry) => entry.key.isSoleLiteral(),\n      );\n      const dynamic: IExpressionEntry<ts.Expression>[] = entries.filter(\n        (entry) => !entry.key.isSoleLiteral(),\n      );\n      const expressions: ts.Expression[] = [\n        ...stringify_regular_properties(regular, dynamic),\n        ...(dynamic.length\n          ? [\n              stringify_dynamic_properties(\n                dynamic,\n                regular.map((r) => r.key.getSoleLiteral()!),\n              ),\n            ]\n          : []),\n      ];\n\n      // POP LAST COMMA, IF REQUIRED\n      const filtered: ts.Expression[] =\n        (regular.length &&\n          regular[regular.length - 1]!.meta.isRequired() &&\n          dynamic.length === 0) ||\n        (regular.length === 0 && dynamic.length)\n          ? expressions\n          : [\n              ts.factory.createCallExpression(importer.use(\"tail\"), undefined, [\n                TemplateFactory.generate(expressions),\n              ]),\n            ];\n\n      // RETURNS WITH OBJECT BRACKET\n      return TemplateFactory.generate([\n        ts.factory.createStringLiteral(`{`),\n        ...filtered,\n        ts.factory.createStringLiteral(`}`),\n      ]);\n    };\n\n  export const array = (\n    input: ts.Expression,\n    arrow: ts.ArrowFunction,\n  ): ts.Expression =>\n    TemplateFactory.generate([\n      ts.factory.createStringLiteral(`[`),\n      ts.factory.createCallExpression(\n        ts.factory.createPropertyAccessExpression(\n          ts.factory.createCallExpression(\n            IdentifierFactory.access(input)(\"map\"),\n            undefined,\n            [arrow],\n          ),\n          ts.factory.createIdentifier(\"join\"),\n        ),\n        undefined,\n        [ts.factory.createStringLiteral(`,`)],\n      ),\n      ts.factory.createStringLiteral(`]`),\n    ]);\n\n  export const tuple = (\n    children: ts.Expression[],\n    rest: ts.Expression | null,\n  ): ts.Expression => {\n    if (children.length === 0) return ts.factory.createStringLiteral(\"[]\");\n    if (rest === null && children.every((child) => ts.isStringLiteral(child)))\n      return ts.factory.createStringLiteral(\n        \"[\" +\n          children.map((child) => (child as ts.StringLiteral).text).join(\",\") +\n          \"]\",\n      );\n\n    const elements: ts.Expression[] = [ts.factory.createStringLiteral(`[`)];\n    children.forEach((child, i) => {\n      elements.push(child);\n      if (i !== children.length - 1)\n        elements.push(ts.factory.createStringLiteral(`,`));\n    });\n    if (rest !== null) elements.push(rest);\n\n    elements.push(ts.factory.createStringLiteral(`]`));\n    return TemplateFactory.generate(elements);\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAUEC,kBAAAA;mBACFC,SACX,CAACC,aACD,CACEC,QACAC,YAAAA;AAGA,QAAIA,QAAQC,WAAW,EAAG,QAAOC,GAAGC,QAAQC,oBAAoB,IAAA;AAGhE,UAAMC,UAA6CL,QAAQM,OACzD,CAACC,UAAUA,MAAMC,IAAIC,cAAa,CAAA;AAEpC,UAAMC,UAA6CV,QAAQM,OACzD,CAACC,UAAU,CAACA,MAAMC,IAAIC,cAAa,CAAA;AAErC,UAAME,cAA+B;SAChCC,6BAA6BP,SAASK,OAAAA;SACrCA,QAAQT,SACR;QACEY,6BACEH,SACAL,QAAQS,IAAI,CAACC,MAAMA,EAAEP,IAAIQ,eAAc,CAAA,CAAA;UAG3C,CAAA;;AAIN,UAAMC,WACHZ,QAAQJ,UACPI,QAAQA,QAAQJ,SAAS,CAAA,EAAIiB,KAAKC,WAAU,KAC5CT,QAAQT,WAAW,KACpBI,QAAQJ,WAAW,KAAKS,QAAQT,SAC7BU,cACA;MACET,GAAGC,QAAQiB,qBAAqBtB,SAASuB,IAAI,MAAA,GAASC,QAAW;QAC/DC,gBAAgBC,SAASb,WAAAA;OAC1B;;AAIT,WAAOY,gBAAgBC,SAAS;MAC9BtB,GAAGC,QAAQC,oBAAoB,GAAG;SAC/Ba;MACHf,GAAGC,QAAQC,oBAAoB,GAAG;KACnC;EACH;mBAEWqB,QAAQ,CACnBC,OACAC,UAEAJ,gBAAgBC,SAAS;IACvBtB,GAAGC,QAAQC,oBAAoB,GAAG;IAClCF,GAAGC,QAAQiB,qBACTlB,GAAGC,QAAQyB,+BACT1B,GAAGC,QAAQiB,qBACTS,kBAAkBC,OAAOJ,KAAAA,EAAO,KAAA,GAChCJ,QACA;MAACK;KAAM,GAETzB,GAAGC,QAAQ4B,iBAAiB,MAAA,CAAA,GAE9BT,QACA;MAACpB,GAAGC,QAAQC,oBAAoB,GAAG;KAAE;IAEvCF,GAAGC,QAAQC,oBAAoB,GAAG;GACnC;mBAEU4B,QAAQ,CACnBC,UACAC,SAAAA;AAEA,QAAID,SAAShC,WAAW,EAAG,QAAOC,GAAGC,QAAQC,oBAAoB,IAAA;AACjE,QAAI8B,SAAS,QAAQD,SAASE,MAAM,CAACC,UAAUlC,GAAGmC,gBAAgBD,KAAAA,CAAAA,EAChE,QAAOlC,GAAGC,QAAQC,oBAChB,MACE6B,SAASnB,IAAI,CAACsB,UAAWA,MAA2BE,IAAI,EAAEC,KAAK,GAAA,IAC/D,GAAA;AAGN,UAAMC,WAA4B;MAACtC,GAAGC,QAAQC,oBAAoB,GAAG;;AACrE6B,aAASQ,QAAQ,CAACL,OAAOM,MAAAA;AACvBF,eAASG,KAAKP,KAAAA;AACd,UAAIM,MAAMT,SAAShC,SAAS,EAC1BuC,UAASG,KAAKzC,GAAGC,QAAQC,oBAAoB,GAAG,CAAA;IACpD,CAAA;AACA,QAAI8B,SAAS,KAAMM,UAASG,KAAKT,IAAAA;AAEjCM,aAASG,KAAKzC,GAAGC,QAAQC,oBAAoB,GAAG,CAAA;AAChD,WAAOmB,gBAAgBC,SAASgB,QAAAA;EAClC;AACF,GA9FiB5C,oBAAAA,kBAAAA,CAAAA,EAAAA;","names":["ts","StringifyJoiner","object","importer","_input","entries","length","ts","factory","createStringLiteral","regular","filter","entry","key","isSoleLiteral","dynamic","expressions","stringify_regular_properties","stringify_dynamic_properties","map","r","getSoleLiteral","filtered","meta","isRequired","createCallExpression","use","undefined","TemplateFactory","generate","array","input","arrow","createPropertyAccessExpression","IdentifierFactory","access","createIdentifier","tuple","children","rest","every","child","isStringLiteral","text","join","elements","forEach","i","push"]}