{"version":3,"sources":["../src/programmers/json/JsonAssertParseProgrammer.ts"],"names":["ts","JsonAssertParseProgrammer","write","project","modulo","type","name","init","JsonMetadataFactory","analyze","getText","checker","context","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","createTypeReferenceNode","getFullName","createBlock","StatementFactory","constant","options","functional","numeric","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createCallExpression","createReturnStatement","createAsExpression","identifier"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,4BAAAA;6BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAAAA;AAC7BC,wBAAoBC,QAAQ,cAAcL,OAAOM,QAAO,CAAA,EAAI,EAC1DP,QAAQQ,SACRR,QAAQS,OAAO,EACfP,IAAAA;AACF,WAAOL,GAAGa,QAAQC,oBAChBC,QACAA,QACA;MACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,QAAA,CAAA;MACzDC,iBAAiBC,SAASJ,UAAUV,IAAAA;OAEtCP,GAAGa,QAAQS,qBACTtB,GAAGa,QAAQU,sBACTvB,GAAGa,QAAQW,oBAAoB,OAAA,CAAA,GAEjCT,QACAf,GAAGa,QAAQY,iBAAiB,WAAA,GAC5B;MACEzB,GAAGa,QAAQa,wBACTpB,QAAQY,YAAYS,YAAYxB,QAAQQ,OAAO,EAAEN,IAAAA,CAAAA;OAGrD,KAAA,GAEFU,QACAf,GAAGa,QAAQe,YAAY;MACrBC,iBAAiBC,SACf,UACAV,iBAAiBlB,MAAM;QACrB,GAAGC;QACH4B,SAAS;UACP,GAAG5B,QAAQ4B;UACXC,YAAY;UACZC,SAAS;QACX;MACF,CAAA,EAAG7B,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;MAE1BN,GAAGa,QAAQqB,0BACTlC,GAAGa,QAAQsB,uBACTnC,GAAGa,QAAQY,iBAAiB,OAAA,GAC5BzB,GAAGoC,WAAWC,aACdrC,GAAGa,QAAQyB,qBACTtC,GAAGa,QAAQY,iBAAiB,YAAA,GAC5BV,QACA;QAACf,GAAGa,QAAQY,iBAAiB,OAAA;OAAS,CAAA,CAAA;MAI5CzB,GAAGa,QAAQ0B,sBACTvC,GAAGa,QAAQ2B,mBACTxC,GAAGa,QAAQyB,qBACTtC,GAAGa,QAAQY,iBAAiB,QAAA,GAC5BV,QACA;QACEf,GAAGa,QAAQY,iBAAiB,OAAA;QAC5BL,iBAAiBC,SAASoB,WAAU;OACrC,GAEHzC,GAAGa,QAAQa,wBAAwB,KAAA,CAAA,CAAA;KAGxC,CAAA;EAEL;AACJ,GArEiBzB,8BAAAA,4BAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { JsonMetadataFactory } from \"../../factories/JsonMetadataFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\n\nexport namespace JsonAssertParseProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression): ts.ArrowFunction => {\n      JsonMetadataFactory.analyze(`typia.json.${modulo.getText()}`)(\n        project.checker,\n        project.context,\n      )(type);\n      return ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"string\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createImportTypeNode(\n          ts.factory.createLiteralTypeNode(\n            ts.factory.createStringLiteral(\"typia\"),\n          ),\n          undefined,\n          ts.factory.createIdentifier(\"Primitive\"),\n          [\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ],\n          false,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createBinaryExpression(\n              ts.factory.createIdentifier(\"input\"),\n              ts.SyntaxKind.EqualsToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"JSON.parse\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"assert\"),\n                undefined,\n                [\n                  ts.factory.createIdentifier(\"input\"),\n                  AssertProgrammer.Guardian.identifier(),\n                ],\n              ),\n              ts.factory.createTypeReferenceNode(\"any\"),\n            ),\n          ),\n        ]),\n      );\n    };\n}\n"]}