{"version":3,"sources":["../src/programmers/protobuf/ProtobufAssertDecodeProgrammer.ts"],"names":["ts","ProtobufAssertDecodeProgrammer","write","project","modulo","type","name","init","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","AssertProgrammer","Guardian","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","TypeFactory","getFullName","checker","createBlock","StatementFactory","constant","ProtobufDecodeProgrammer","options","functional","numeric","createCallExpression","createReturnStatement","createAsExpression","identifier","keyword"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,iCAAAA;kCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BP,GAAGQ,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAZ,GAAGQ,QAAQK,wBAAwB,YAAA,CAAA;IAErCC,iBAAiBC,SAASH,UAAUL,IAAAA;KAEtCP,GAAGQ,QAAQQ,qBACThB,GAAGQ,QAAQS,sBACTjB,GAAGQ,QAAQU,oBAAoB,OAAA,CAAA,GAEjCR,QACAV,GAAGQ,QAAQW,iBAAiB,UAAA,GAC5B;IACEnB,GAAGQ,QAAQK,wBACTP,QAAQc,YAAYC,YAAYlB,QAAQmB,OAAO,EAAEjB,IAAAA,CAAAA;KAGrD,KAAA,GAEFK,QACAV,GAAGQ,QAAQe,YAAY;IACrBC,iBAAiBC,SACf,UACAC,yBAAyBxB,MAAM;MAC7B,GAAGC;MACHwB,SAAS;QACP,GAAGxB,QAAQwB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGzB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBkB,iBAAiBC,SACf,UACAX,iBAAiBZ,MAAM;MACrB,GAAGC;MACHwB,SAAS;QACP,GAAGxB,QAAQwB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGzB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BkB,iBAAiBC,SACf,UACAzB,GAAGQ,QAAQsB,qBACT9B,GAAGQ,QAAQW,iBAAiB,QAAA,GAC5BT,QACA;MAACV,GAAGQ,QAAQW,iBAAiB,OAAA;KAAS,CAAA;IAG1CnB,GAAGQ,QAAQuB,sBACT/B,GAAGQ,QAAQwB,mBACThC,GAAGQ,QAAQsB,qBACT9B,GAAGQ,QAAQW,iBAAiB,QAAA,GAC5BT,QACA;MACEV,GAAGQ,QAAQW,iBAAiB,QAAA;MAC5BL,iBAAiBC,SAASkB,WAAU;KACrC,GAEHb,YAAYc,QAAQ,KAAA,CAAA,CAAA;GAGzB,CAAA;AAET,GA3EiBjC,mCAAAA,iCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { ProtobufDecodeProgrammer } from \"./ProtobufDecodeProgrammer\";\n\nexport namespace ProtobufAssertDecodeProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\"Uint8Array\"),\n          ),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createImportTypeNode(\n          ts.factory.createLiteralTypeNode(\n            ts.factory.createStringLiteral(\"typia\"),\n          ),\n          undefined,\n          ts.factory.createIdentifier(\"Resolved\"),\n          [\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ],\n          false,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"decode\",\n            ProtobufDecodeProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"assert\"),\n                undefined,\n                [\n                  ts.factory.createIdentifier(\"output\"),\n                  AssertProgrammer.Guardian.identifier(),\n                ],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n        ]),\n      );\n}\n"]}