{"version":3,"sources":["../src/programmers/misc/MiscValidateCloneProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ValidateProgrammer } from \"../ValidateProgrammer\";\nimport { MiscCloneProgrammer } from \"./MiscCloneProgrammer\";\n\nexport namespace MiscValidateCloneProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\"))],\n        ts.factory.createTypeReferenceNode(\n          `typia.IValidation<typia.Resolved<${\n            name ?? TypeFactory.getFullName(project.checker)(type)\n          }>>`,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"validate\",\n            ValidateProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"clone\",\n            MiscCloneProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"validate\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createIdentifier(\"output.success\"),\n            ts.factory.createExpressionStatement(\n              ts.factory.createBinaryExpression(\n                ts.factory.createIdentifier(\"output.data\"),\n                ts.SyntaxKind.EqualsToken,\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"clone\"),\n                  undefined,\n                  [ts.factory.createIdentifier(\"input\")],\n                ),\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,8BAAAA;+BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IAACC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;KAC1DP,GAAGC,QAAQO,wBACT,oCACET,QAAQO,YAAYG,YAAYb,QAAQc,OAAO,EAAEZ,IAAAA,CAAAA,IAC/C,GAENK,QACAH,GAAGC,QAAQU,YAAY;IACrBC,iBAAiBC,SACf,YACAC,mBAAmBnB,MAAM;MACvB,GAAGC;MACHmB,SAAS;QACP,GAAGnB,QAAQmB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGpB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1Ba,iBAAiBC,SACf,SACAK,oBAAoBvB,MAAM;MACxB,GAAGC;MACHmB,SAAS;QACP,GAAGnB,QAAQmB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGpB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBa,iBAAiBC,SACf,UACAb,GAAGC,QAAQkB,mBACTnB,GAAGC,QAAQmB,qBACTpB,GAAGC,QAAQoB,iBAAiB,UAAA,GAC5BlB,QACA;MAACH,GAAGC,QAAQoB,iBAAiB,OAAA;KAAS,GAExCf,YAAYC,QAAQ,KAAA,CAAA,CAAA;IAGxBP,GAAGC,QAAQqB,kBACTtB,GAAGC,QAAQoB,iBAAiB,gBAAA,GAC5BrB,GAAGC,QAAQsB,0BACTvB,GAAGC,QAAQuB,uBACTxB,GAAGC,QAAQoB,iBAAiB,aAAA,GAC5BrB,GAAGyB,WAAWC,aACd1B,GAAGC,QAAQmB,qBACTpB,GAAGC,QAAQoB,iBAAiB,OAAA,GAC5BlB,QACA;MAACH,GAAGC,QAAQoB,iBAAiB,OAAA;KAAS,CAAA,CAAA,CAAA;IAK9CrB,GAAGC,QAAQ0B,sBACT3B,GAAGC,QAAQoB,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GApEiB3B,gCAAAA,8BAAAA,CAAAA,EAAAA;","names":["ts","MiscValidateCloneProgrammer","write","project","modulo","type","name","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","createTypeReferenceNode","getFullName","checker","createBlock","StatementFactory","constant","ValidateProgrammer","options","functional","numeric","MiscCloneProgrammer","createAsExpression","createCallExpression","createIdentifier","createIfStatement","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createReturnStatement"]}