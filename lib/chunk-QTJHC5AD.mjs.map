{"version":3,"sources":["../src/programmers/misc/MiscCloneProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { MetadataCollection } from \"../../factories/MetadataCollection\";\nimport { MetadataFactory } from \"../../factories/MetadataFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { Metadata } from \"../../schemas/metadata/Metadata\";\nimport { MetadataArray } from \"../../schemas/metadata/MetadataArray\";\nimport { MetadataTuple } from \"../../schemas/metadata/MetadataTuple\";\nimport { MetadataTupleType } from \"../../schemas/metadata/MetadataTupleType\";\n\nimport { IProject } from \"../../transformers/IProject\";\nimport { TransformerError } from \"../../transformers/TransformerError\";\n\nimport { FeatureProgrammer } from \"../FeatureProgrammer\";\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { CloneJoiner } from \"../helpers/CloneJoiner\";\nimport { FunctionImporter } from \"../helpers/FunctionImporter\";\nimport { UnionExplorer } from \"../helpers/UnionExplorer\";\nimport { decode_union_object } from \"../internal/decode_union_object\";\nimport { wrap_metadata_rest_tuple } from \"../internal/wrap_metadata_rest_tuple\";\n\nexport namespace MiscCloneProgrammer {\n  export const write =\n    (project: IProject) => (modulo: ts.LeftHandSideExpression) => {\n      const importer: FunctionImporter = new FunctionImporter(modulo.getText());\n      return FeatureProgrammer.write(project)({\n        ...configure(project)(importer),\n        addition: (collection) => [\n          ...IsProgrammer.write_function_statements(project)(importer)(\n            collection,\n          ),\n          ...importer.declare(modulo),\n        ],\n      })(importer);\n    };\n\n  const write_array_functions =\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (collection: MetadataCollection): ts.VariableStatement[] =>\n      collection\n        .arrays()\n        .filter((a) => a.recursive)\n        .map((type, i) =>\n          StatementFactory.constant(\n            `${config.prefix}a${i}`,\n            ts.factory.createArrowFunction(\n              undefined,\n              undefined,\n              FeatureProgrammer.parameterDeclarations(config)(\n                TypeFactory.keyword(\"any\"),\n              )(ts.factory.createIdentifier(\"input\")),\n              TypeFactory.keyword(\"any\"),\n              undefined,\n              decode_array_inline(config)(importer)(\n                ts.factory.createIdentifier(\"input\"),\n                MetadataArray.create({\n                  type,\n                  tags: [],\n                }),\n                {\n                  tracable: config.trace,\n                  source: \"function\",\n                  from: \"array\",\n                  postfix: \"\",\n                },\n              ),\n            ),\n          ),\n        );\n\n  const write_tuple_functions =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (collection: MetadataCollection): ts.VariableStatement[] =>\n      collection\n        .tuples()\n        .filter((t) => t.recursive)\n        .map((tuple, i) =>\n          StatementFactory.constant(\n            `${config.prefix}t${i}`,\n            ts.factory.createArrowFunction(\n              undefined,\n              undefined,\n              FeatureProgrammer.parameterDeclarations(config)(\n                TypeFactory.keyword(\"any\"),\n              )(ts.factory.createIdentifier(\"input\")),\n              TypeFactory.keyword(\"any\"),\n              undefined,\n              decode_tuple_inline(project)(config)(importer)(\n                ts.factory.createIdentifier(\"input\"),\n                tuple,\n                {\n                  tracable: config.trace,\n                  source: \"function\",\n                  from: \"array\",\n                  postfix: \"\",\n                },\n              ),\n            ),\n          ),\n        );\n\n  /* -----------------------------------------------------------\n        DECODERS\n    ----------------------------------------------------------- */\n  const decode =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      meta: Metadata,\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression => {\n      // ANY TYPE\n      if (\n        meta.any ||\n        meta.arrays.some((a) => a.type.value.any) ||\n        meta.tuples.some(\n          (t) =>\n            !!t.type.elements.length && t.type.elements.every((e) => e.any),\n        )\n      )\n        return ts.factory.createCallExpression(importer.use(\"any\"), undefined, [\n          input,\n        ]);\n\n      interface IUnion {\n        type: string;\n        is: () => ts.Expression;\n        value: () => ts.Expression;\n      }\n      const unions: IUnion[] = [];\n\n      //----\n      // LIST UP UNION TYPES\n      //----\n      // FUNCTIONAL\n      if (meta.functional)\n        unions.push({\n          type: \"functional\",\n          is: () =>\n            ts.factory.createStrictEquality(\n              ts.factory.createStringLiteral(\"function\"),\n              ts.factory.createTypeOfExpression(input),\n            ),\n          value: () => ts.factory.createIdentifier(\"undefined\"),\n        });\n\n      // TUPLES\n      for (const tuple of meta.tuples)\n        unions.push({\n          type: \"tuple\",\n          is: () =>\n            IsProgrammer.decode(project)(importer)(\n              input,\n              (() => {\n                const partial = Metadata.initialize();\n                partial.tuples.push(tuple);\n                return partial;\n              })(),\n              explore,\n            ),\n          value: () =>\n            decode_tuple(project)(config)(importer)(input, tuple, explore),\n        });\n\n      // ARRAYS\n      if (meta.arrays.length)\n        unions.push({\n          type: \"array\",\n          is: () => ExpressionFactory.isArray(input),\n          value: () =>\n            explore_arrays(project)(config)(importer)(input, meta.arrays, {\n              ...explore,\n              from: \"array\",\n            }),\n        });\n\n      // NATIVE TYPES\n      if (meta.sets.length)\n        unions.push({\n          type: \"set\",\n          is: () => ExpressionFactory.isInstanceOf(\"Set\")(input),\n          value: () =>\n            explore_sets(project)(config)(importer)(input, meta.sets, {\n              ...explore,\n              from: \"array\",\n            }),\n        });\n      if (meta.maps.length)\n        unions.push({\n          type: \"map\",\n          is: () => ExpressionFactory.isInstanceOf(\"Map\")(input),\n          value: () =>\n            explore_maps(project)(config)(importer)(input, meta.maps, {\n              ...explore,\n              from: \"array\",\n            }),\n        });\n      for (const native of meta.natives)\n        unions.push({\n          type: \"native\",\n          is: () => ExpressionFactory.isInstanceOf(native)(input),\n          value: () =>\n            native === \"Boolean\" || native === \"Number\" || native === \"String\"\n              ? ts.factory.createCallExpression(\n                  IdentifierFactory.access(input)(\"valueOf\"),\n                  undefined,\n                  undefined,\n                )\n              : decode_native(native)(input),\n        });\n\n      // OBJECTS\n      if (meta.objects.length)\n        unions.push({\n          type: \"object\",\n          is: () =>\n            ExpressionFactory.isObject({\n              checkNull: true,\n              checkArray: false,\n            })(input),\n          value: () =>\n            explore_objects(config)(importer)(input, meta, {\n              ...explore,\n              from: \"object\",\n            }),\n        });\n\n      // COMPOSITION\n      let last: ts.Expression = input;\n      for (const u of unions.reverse())\n        last = ts.factory.createConditionalExpression(\n          u.is(),\n          undefined,\n          u.value(),\n          undefined,\n          last,\n        );\n      return ts.factory.createAsExpression(last, TypeFactory.keyword(\"any\"));\n    };\n\n  const decode_object = (importer: FunctionImporter) =>\n    FeatureProgrammer.decode_object({\n      trace: false,\n      path: false,\n      prefix: PREFIX,\n    })(importer);\n\n  const decode_array =\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      array: MetadataArray,\n      explore: FeatureProgrammer.IExplore,\n    ) =>\n      array.type.recursive\n        ? ts.factory.createCallExpression(\n            ts.factory.createIdentifier(\n              importer.useLocal(`${config.prefix}a${array.type.index}`),\n            ),\n            undefined,\n            FeatureProgrammer.argumentsArray(config)({\n              ...explore,\n              source: \"function\",\n              from: \"array\",\n            })(input),\n          )\n        : decode_array_inline(config)(importer)(input, array, explore);\n\n  const decode_array_inline =\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      array: MetadataArray,\n      explore: FeatureProgrammer.IExplore,\n    ) =>\n      FeatureProgrammer.decode_array(config)(importer)(CloneJoiner.array)(\n        input,\n        array,\n        explore,\n      );\n\n  const decode_tuple =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      tuple: MetadataTuple,\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression =>\n      tuple.type.recursive\n        ? ts.factory.createCallExpression(\n            ts.factory.createIdentifier(\n              importer.useLocal(`${config.prefix}t${tuple.type.index}`),\n            ),\n            undefined,\n            FeatureProgrammer.argumentsArray(config)({\n              ...explore,\n              source: \"function\",\n            })(input),\n          )\n        : decode_tuple_inline(project)(config)(importer)(\n            input,\n            tuple.type,\n            explore,\n          );\n\n  const decode_tuple_inline =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      tuple: MetadataTupleType,\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression => {\n      const children: ts.Expression[] = tuple.elements\n        .filter((m) => m.rest === null)\n        .map((elem, index) =>\n          decode(project)(config)(importer)(\n            ts.factory.createElementAccessExpression(input, index),\n            elem,\n            {\n              ...explore,\n              from: \"array\",\n              postfix: explore.postfix.length\n                ? `${explore.postfix.slice(0, -1)}[${index}]\"`\n                : `\"[${index}]\"`,\n            },\n          ),\n        );\n      const rest = (() => {\n        if (tuple.elements.length === 0) return null;\n\n        const last: Metadata = tuple.elements.at(-1)!;\n        const rest: Metadata | null = last.rest;\n        if (rest === null) return null;\n\n        return decode(project)(config)(importer)(\n          ts.factory.createCallExpression(\n            IdentifierFactory.access(input)(\"slice\"),\n            undefined,\n            [ExpressionFactory.number(tuple.elements.length - 1)],\n          ),\n          wrap_metadata_rest_tuple(tuple.elements.at(-1)!.rest!),\n          {\n            ...explore,\n            start: tuple.elements.length - 1,\n          },\n        );\n      })();\n      return CloneJoiner.tuple(children, rest);\n    };\n\n  /* -----------------------------------------------------------\n        NATIVE CLASSES\n    ----------------------------------------------------------- */\n  const decode_native = (type: string) => (input: ts.Expression) =>\n    type === \"Date\" ||\n    type === \"Uint8Array\" ||\n    type === \"Uint8ClampedArray\" ||\n    type === \"Uint16Array\" ||\n    type === \"Uint32Array\" ||\n    type === \"BigUint64Array\" ||\n    type === \"Int8Array\" ||\n    type === \"Int16Array\" ||\n    type === \"Int32Array\" ||\n    type === \"BigInt64Array\" ||\n    type === \"Float32Array\" ||\n    type === \"Float64Array\"\n      ? decode_native_copyable(type)(input)\n      : type === \"ArrayBuffer\" || type === \"SharedArrayBuffer\"\n        ? decode_native_buffer(type)(input)\n        : type === \"DataView\"\n          ? decode_native_data_view(input)\n          : ts.factory.createCallExpression(\n              ts.factory.createIdentifier(type),\n              undefined,\n              [],\n            );\n\n  const decode_native_copyable = (type: string) => (input: ts.Expression) =>\n    ts.factory.createNewExpression(\n      ts.factory.createIdentifier(type),\n      undefined,\n      [input],\n    );\n\n  const decode_native_buffer =\n    (type: \"ArrayBuffer\" | \"SharedArrayBuffer\") => (input: ts.Expression) =>\n      ExpressionFactory.selfCall(\n        ts.factory.createBlock(\n          [\n            StatementFactory.constant(\n              \"buffer\",\n              ts.factory.createNewExpression(\n                ts.factory.createIdentifier(type),\n                undefined,\n                [IdentifierFactory.access(input)(\"byteLength\")],\n              ),\n            ),\n            ts.factory.createExpressionStatement(\n              ts.factory.createCallExpression(\n                IdentifierFactory.access(\n                  ts.factory.createNewExpression(\n                    ts.factory.createIdentifier(\"Uint8Array\"),\n                    undefined,\n                    [ts.factory.createIdentifier(\"buffer\")],\n                  ),\n                )(\"set\"),\n                undefined,\n                [\n                  ts.factory.createNewExpression(\n                    ts.factory.createIdentifier(\"Uint8Array\"),\n                    undefined,\n                    [input],\n                  ),\n                ],\n              ),\n            ),\n            ts.factory.createReturnStatement(\n              ts.factory.createIdentifier(\"buffer\"),\n            ),\n          ],\n          true,\n        ),\n      );\n\n  const decode_native_data_view = (input: ts.Expression) =>\n    ts.factory.createNewExpression(\n      ts.factory.createIdentifier(\"DataView\"),\n      undefined,\n      [IdentifierFactory.access(input)(\"buffer\")],\n    );\n\n  /* -----------------------------------------------------------\n        EXPLORERS FOR UNION TYPES\n    ----------------------------------------------------------- */\n  const explore_sets =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      sets: Metadata[],\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression =>\n      ts.factory.createCallExpression(\n        UnionExplorer.set({\n          checker: IsProgrammer.decode(project)(importer),\n          decoder: (input, array, explore) =>\n            ts.factory.createNewExpression(\n              ts.factory.createIdentifier(\"Set\"),\n              [TypeFactory.keyword(\"any\")],\n              [decode_array(config)(importer)(input, array, explore)],\n            ),\n          empty: ts.factory.createNewExpression(\n            ts.factory.createIdentifier(\"Set\"),\n            [TypeFactory.keyword(\"any\")],\n            [],\n          ),\n          success: ts.factory.createTrue(),\n          failure: (input, expected) =>\n            create_throw_error(importer)(expected)(input),\n        })([])(input, sets, explore),\n        undefined,\n        undefined,\n      );\n\n  const explore_maps =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      maps: Metadata.Entry[],\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression =>\n      ts.factory.createCallExpression(\n        UnionExplorer.map({\n          checker: (top, entry, explore) => {\n            const func = IsProgrammer.decode(project)(importer);\n            return ts.factory.createLogicalAnd(\n              func(ts.factory.createElementAccessExpression(top, 0), entry[0], {\n                ...explore,\n                postfix: `${explore.postfix}[0]`,\n              }),\n              func(ts.factory.createElementAccessExpression(top, 1), entry[1], {\n                ...explore,\n                postfix: `${explore.postfix}[1]`,\n              }),\n            );\n          },\n          decoder: (input, array, explore) =>\n            ts.factory.createNewExpression(\n              ts.factory.createIdentifier(\"Map\"),\n              [TypeFactory.keyword(\"any\"), TypeFactory.keyword(\"any\")],\n              [decode_array(config)(importer)(input, array, explore)],\n            ),\n          empty: ts.factory.createNewExpression(\n            ts.factory.createIdentifier(\"Map\"),\n            [TypeFactory.keyword(\"any\"), TypeFactory.keyword(\"any\")],\n            [],\n          ),\n          success: ts.factory.createTrue(),\n          failure: (input, expected) =>\n            create_throw_error(importer)(expected)(input),\n        })([])(input, maps, explore),\n        undefined,\n        undefined,\n      );\n\n  const explore_objects =\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      meta: Metadata,\n      explore: FeatureProgrammer.IExplore,\n    ) => {\n      if (meta.objects.length === 1)\n        return decode_object(importer)(input, meta.objects[0]!, explore);\n\n      return ts.factory.createCallExpression(\n        ts.factory.createIdentifier(\n          importer.useLocal(`${PREFIX}u${meta.union_index!}`),\n        ),\n        undefined,\n        FeatureProgrammer.argumentsArray(config)(explore)(input),\n      );\n    };\n\n  const explore_arrays =\n    (project: IProject) =>\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    (\n      input: ts.Expression,\n      elements: MetadataArray[],\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression =>\n      explore_array_like_union_types(config)(importer)(\n        UnionExplorer.array({\n          checker: IsProgrammer.decode(project)(importer),\n          decoder: decode_array(config)(importer),\n          empty: ts.factory.createIdentifier(\"[]\"),\n          success: ts.factory.createTrue(),\n          failure: (input, expected) =>\n            create_throw_error(importer)(expected)(input),\n        }),\n      )(input, elements, explore);\n\n  const explore_array_like_union_types =\n    (config: FeatureProgrammer.IConfig) =>\n    (importer: FunctionImporter) =>\n    <T extends MetadataArray | MetadataTuple>(\n      factory: (\n        parameters: ts.ParameterDeclaration[],\n      ) => (\n        input: ts.Expression,\n        elements: T[],\n        explore: FeatureProgrammer.IExplore,\n      ) => ts.ArrowFunction,\n    ) =>\n    (\n      input: ts.Expression,\n      elements: T[],\n      explore: FeatureProgrammer.IExplore,\n    ): ts.Expression => {\n      const arrow =\n        (parameters: ts.ParameterDeclaration[]) =>\n        (explore: FeatureProgrammer.IExplore) =>\n        (input: ts.Expression): ts.ArrowFunction =>\n          factory(parameters)(input, elements, explore);\n      if (elements.every((e) => e.type.recursive === false))\n        ts.factory.createCallExpression(\n          arrow([])(explore)(input),\n          undefined,\n          [],\n        );\n\n      explore = {\n        ...explore,\n        source: \"function\",\n        from: \"array\",\n      };\n      return ts.factory.createCallExpression(\n        ts.factory.createIdentifier(\n          importer.emplaceUnion(\n            config.prefix,\n            elements.map((e) => e.type.name).join(\" | \"),\n            () =>\n              arrow(\n                FeatureProgrammer.parameterDeclarations(config)(\n                  TypeFactory.keyword(\"any\"),\n                )(ts.factory.createIdentifier(\"input\")),\n              )({\n                ...explore,\n                postfix: \"\",\n              })(ts.factory.createIdentifier(\"input\")),\n          ),\n        ),\n        undefined,\n        FeatureProgrammer.argumentsArray(config)(explore)(input),\n      );\n    };\n\n  /* -----------------------------------------------------------\n        CONFIGURATIONS\n    ----------------------------------------------------------- */\n  const PREFIX = \"$c\";\n\n  const configure =\n    (project: IProject) =>\n    (importer: FunctionImporter): FeatureProgrammer.IConfig => {\n      const config: FeatureProgrammer.IConfig = {\n        types: {\n          input: (type, name) =>\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          output: (type, name) =>\n            ts.factory.createImportTypeNode(\n              ts.factory.createLiteralTypeNode(\n                ts.factory.createStringLiteral(\"typia\"),\n              ),\n              undefined,\n              ts.factory.createIdentifier(\"Resolved\"),\n              [\n                ts.factory.createTypeReferenceNode(\n                  name ?? TypeFactory.getFullName(project.checker)(type),\n                ),\n              ],\n              false,\n            ),\n        },\n        prefix: PREFIX,\n        trace: false,\n        path: false,\n        initializer,\n        decoder: () => decode(project)(config)(importer),\n        objector: {\n          checker: () => IsProgrammer.decode(project)(importer),\n          decoder: () => decode_object(importer),\n          joiner: CloneJoiner.object,\n          unionizer: decode_union_object(\n            IsProgrammer.decode_object(project)(importer),\n          )(decode_object(importer))((exp) => exp)((input, expected) =>\n            create_throw_error(importer)(expected)(input),\n          ),\n          failure: (input, expected) =>\n            create_throw_error(importer)(expected)(input),\n        },\n        generator: {\n          arrays: () => write_array_functions(config)(importer),\n          tuples: () => write_tuple_functions(project)(config)(importer),\n        },\n      };\n      return config;\n    };\n\n  const initializer: FeatureProgrammer.IConfig[\"initializer\"] =\n    (project) => (importer) => (type) => {\n      const collection = new MetadataCollection();\n      const result = MetadataFactory.analyze(\n        project.checker,\n        project.context,\n      )({\n        escape: false,\n        constant: true,\n        absorb: true,\n        validate: (meta) => {\n          const output: string[] = [];\n          if (meta.natives.some((n) => n === \"WeakSet\"))\n            output.push(\"unable to clone WeakSet\");\n          else if (meta.natives.some((n) => n === \"WeakMap\"))\n            output.push(\"unable to clone WeakMap\");\n          return output;\n        },\n      })(collection)(type);\n      if (result.success === false)\n        throw TransformerError.from(`typia.misc.${importer.method}`)(\n          result.errors,\n        );\n      return [collection, result.data];\n    };\n\n  const create_throw_error =\n    (importer: FunctionImporter) =>\n    (expected: string) =>\n    (value: ts.Expression) =>\n      ts.factory.createExpressionStatement(\n        ts.factory.createCallExpression(\n          importer.use(\"throws\"),\n          [],\n          [\n            ts.factory.createObjectLiteralExpression(\n              [\n                ts.factory.createPropertyAssignment(\n                  \"expected\",\n                  ts.factory.createStringLiteral(expected),\n                ),\n                ts.factory.createPropertyAssignment(\"value\", value),\n              ],\n              true,\n            ),\n          ],\n        ),\n      );\n}\n"],"mappings":"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","names":["ts","MiscCloneProgrammer","write","project","modulo","importer","FunctionImporter","getText","FeatureProgrammer","configure","addition","collection","IsProgrammer","write_function_statements","declare","write_array_functions","config","arrays","filter","a","recursive","map","type","i","StatementFactory","constant","prefix","ts","factory","createArrowFunction","undefined","parameterDeclarations","TypeFactory","keyword","createIdentifier","decode_array_inline","MetadataArray","create","tags","tracable","trace","source","from","postfix","write_tuple_functions","tuples","t","tuple","decode_tuple_inline","decode","input","meta","explore","any","some","value","elements","length","every","e","createCallExpression","use","unions","functional","push","is","createStrictEquality","createStringLiteral","createTypeOfExpression","partial","Metadata","initialize","decode_tuple","ExpressionFactory","isArray","explore_arrays","sets","isInstanceOf","explore_sets","maps","explore_maps","native","natives","IdentifierFactory","access","decode_native","objects","isObject","checkNull","checkArray","explore_objects","last","u","reverse","createConditionalExpression","createAsExpression","decode_object","path","PREFIX","decode_array","array","useLocal","index","argumentsArray","CloneJoiner","children","m","rest","elem","createElementAccessExpression","slice","at","number","wrap_metadata_rest_tuple","start","decode_native_copyable","decode_native_buffer","decode_native_data_view","createNewExpression","selfCall","createBlock","createExpressionStatement","createReturnStatement","UnionExplorer","set","checker","decoder","empty","success","createTrue","failure","expected","create_throw_error","top","entry","func","createLogicalAnd","union_index","explore_array_like_union_types","arrow","parameters","emplaceUnion","name","join","types","createTypeReferenceNode","getFullName","output","createImportTypeNode","createLiteralTypeNode","initializer","objector","joiner","object","unionizer","decode_union_object","exp","generator","MetadataCollection","result","MetadataFactory","analyze","context","escape","absorb","validate","n","TransformerError","method","errors","data","createObjectLiteralExpression","createPropertyAssignment"]}