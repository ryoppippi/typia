{"version":3,"sources":["../src/factories/IdentifierFactory.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { Escaper } from \"../utils/Escaper\";\n\nimport { TypeFactory } from \"./TypeFactory\";\n\nexport namespace IdentifierFactory {\n  export const identifier = (name: string) =>\n    Escaper.variable(name)\n      ? ts.factory.createIdentifier(name)\n      : ts.factory.createStringLiteral(name);\n\n  export const access = (target: ts.Expression) => (property: string) => {\n    const postfix = identifier(property);\n    return ts.isStringLiteral(postfix)\n      ? ts.factory.createElementAccessExpression(target, postfix)\n      : ts.factory.createPropertyAccessExpression(target, postfix);\n  };\n\n  export const getName = (input: ts.Expression): string => {\n    const value: any = (input as any).escapedText?.toString();\n    if (typeof value === \"string\") return value;\n\n    if (ts.isPropertyAccessExpression(input))\n      return `${getName(\n        input.expression,\n      )}.${input.name.escapedText.toString()}`;\n    else if (ts.isElementAccessExpression(input))\n      return `${getName(input.expression)}[${getName(\n        input.argumentExpression,\n      )}]`;\n    return \"uknown\";\n  };\n\n  export const postfix = (str: string): string =>\n    Escaper.variable(str)\n      ? `\".${str}\"`\n      : `\"[${JSON.stringify(str).split('\"').join('\\\\\"')}]\"`;\n\n  export const parameter = (\n    name: string | ts.BindingName,\n    type?: ts.TypeNode,\n    init?: ts.Expression | ts.PunctuationToken<ts.SyntaxKind.QuestionToken>,\n  ): ts.ParameterDeclaration => {\n    // instead of ts.version >= \"4.8\"\n    if (ts.getDecorators !== undefined)\n      return ts.factory.createParameterDeclaration(\n        undefined,\n        undefined,\n        name,\n        init?.kind === ts.SyntaxKind.QuestionToken\n          ? ts.factory.createToken(ts.SyntaxKind.QuestionToken)\n          : undefined,\n        type ?? TypeFactory.keyword(\"any\"),\n        init && init.kind !== ts.SyntaxKind.QuestionToken ? init : undefined,\n      );\n    // eslint-disable-next-line\n    return (ts.factory.createParameterDeclaration as any)(\n      undefined,\n      undefined,\n      undefined,\n      name,\n      init?.kind === ts.SyntaxKind.QuestionToken\n        ? ts.factory.createToken(ts.SyntaxKind.QuestionToken)\n        : undefined,\n      type,\n      init && init.kind !== ts.SyntaxKind.QuestionToken ? init : undefined,\n    );\n  };\n}\n"],"mappings":";;;;;;;;AAAA,OAAOA,QAAQ;;UAMEC,oBAAAA;qBACFC,aAAa,CAACC,SACzBC,QAAQC,SAASF,IAAAA,IACbG,GAAGC,QAAQC,iBAAiBL,IAAAA,IAC5BG,GAAGC,QAAQE,oBAAoBN,IAAAA;qBAExBO,SAAS,CAACC,WAA0B,CAACC,aAAAA;AAChD,UAAMC,UAAUX,mBAAAA,WAAWU,QAAAA;AAC3B,WAAON,GAAGQ,gBAAgBD,OAAAA,IACtBP,GAAGC,QAAQQ,8BAA8BJ,QAAQE,OAAAA,IACjDP,GAAGC,QAAQS,+BAA+BL,QAAQE,OAAAA;EACxD;qBAEaI,UAAU,CAACC,UAAAA;AACtB,UAAMC,QAAcD,MAAcE,aAAaC,SAAAA;AAC/C,QAAI,OAAOF,UAAU,SAAU,QAAOA;AAEtC,QAAIb,GAAGgB,2BAA2BJ,KAAAA,EAChC,QAAO,GAAGD,mBAAAA,QACRC,MAAMK,UAAU,CAAA,IACbL,MAAMf,KAAKiB,YAAYC,SAAQ,CAAA;aAC7Bf,GAAGkB,0BAA0BN,KAAAA,EACpC,QAAO,GAAGD,mBAAAA,QAAQC,MAAMK,UAAU,CAAA,IAAKN,mBAAAA,QACrCC,MAAMO,kBAAkB,CAAA;AAE5B,WAAO;EACT;qBAEaZ,UAAU,CAACa,QACtBtB,QAAQC,SAASqB,GAAAA,IACb,KAAKA,GAAAA,MACL,KAAKC,KAAKC,UAAUF,GAAAA,EAAKG,MAAM,GAAA,EAAKC,KAAK,KAAA,CAAA;qBAElCC,YAAY,CACvB5B,MACA6B,MACAC,SAAAA;AAGA,QAAI3B,GAAG4B,kBAAkBC,OACvB,QAAO7B,GAAGC,QAAQ6B,2BAChBD,QACAA,QACAhC,MACA8B,MAAMI,SAAS/B,GAAGgC,WAAWC,gBACzBjC,GAAGC,QAAQiC,YAAYlC,GAAGgC,WAAWC,aAAa,IAClDJ,QACJH,QAAQS,YAAYC,QAAQ,KAAA,GAC5BT,QAAQA,KAAKI,SAAS/B,GAAGgC,WAAWC,gBAAgBN,OAAOE,MAAAA;AAG/D,WAAQ7B,GAAGC,QAAQ6B,2BACjBD,QACAA,QACAA,QACAhC,MACA8B,MAAMI,SAAS/B,GAAGgC,WAAWC,gBACzBjC,GAAGC,QAAQiC,YAAYlC,GAAGgC,WAAWC,aAAa,IAClDJ,QACJH,MACAC,QAAQA,KAAKI,SAAS/B,GAAGgC,WAAWC,gBAAgBN,OAAOE,MAAAA;EAE/D;AACF,GA/DiBlC,sBAAAA,oBAAAA,CAAAA,EAAAA;","names":["ts","IdentifierFactory","identifier","name","Escaper","variable","ts","factory","createIdentifier","createStringLiteral","access","target","property","postfix","isStringLiteral","createElementAccessExpression","createPropertyAccessExpression","getName","input","value","escapedText","toString","isPropertyAccessExpression","expression","isElementAccessExpression","argumentExpression","str","JSON","stringify","split","join","parameter","type","init","getDecorators","undefined","createParameterDeclaration","kind","SyntaxKind","QuestionToken","createToken","TypeFactory","keyword"]}