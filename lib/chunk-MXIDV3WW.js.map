{"version":3,"sources":["../src/programmers/notations/NotationIsGeneralProgrammer.ts"],"names":["ts","NotationIsGeneralProgrammer","write","rename","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","createUnionTypeNode","createTypeReferenceNode","NotationGeneralProgrammer","returnType","getFullName","checker","createLiteralTypeNode","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","createIfStatement","createPrefixUnaryExpression","SyntaxKind","ExclamationToken","createCallExpression","createIdentifier","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,8BAAAA;+BACFC,QACX,CAACC,WACD,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdP,GAAGQ,QAAQC,oBACTC,QACAA,QACA;IAACC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;KAC1Dd,GAAGQ,QAAQO,oBAAoB;IAC7Bf,GAAGQ,QAAQQ,wBACTC,0BAA0BC,WAAWf,MAAAA,EACnCI,QAAQM,YAAYM,YAAYf,QAAQgB,OAAO,EAAEd,IAAAA,CAAAA,CAAAA;IAGrDN,GAAGQ,QAAQa,sBAAsBrB,GAAGQ,QAAQc,WAAU,CAAA;GACvD,GACDZ,QACAV,GAAGQ,QAAQe,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAaxB,MAAME,OAAAA,EAASC,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAEnDiB,iBAAiBC,SACf,WACAR,0BAA0Bf,MAAMC,MAAAA,EAAQ;MACtC,GAAGC;MACHuB,SAAS;QACP,GAAGvB,QAAQuB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGxB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBP,GAAGQ,QAAQsB,kBACT9B,GAAGQ,QAAQuB,4BACT/B,GAAGgC,WAAWC,kBACdjC,GAAGQ,QAAQ0B,qBACTlC,GAAGQ,QAAQ2B,iBAAiB,IAAA,GAC5BzB,QACA;MAACV,GAAGQ,QAAQ2B,iBAAiB,OAAA;KAAS,CAAA,GAG1CnC,GAAGQ,QAAQ4B,sBAAsBpC,GAAGQ,QAAQc,WAAU,CAAA,CAAA;IAExDE,iBAAiBC,SACf,UACAzB,GAAGQ,QAAQ0B,qBACTlC,GAAGQ,QAAQ2B,iBAAiB,SAAA,GAC5BzB,QACA;MAACV,GAAGQ,QAAQ2B,iBAAiB,OAAA;KAAS,CAAA;IAG1CnC,GAAGQ,QAAQ4B,sBACTpC,GAAGQ,QAAQ2B,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GA3DiBlC,gCAAAA,8BAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { NotationGeneralProgrammer } from \"./NotationGeneralProgrammer\";\n\nexport namespace NotationIsGeneralProgrammer {\n  export const write =\n    (rename: (str: string) => string) =>\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\"))],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createTypeReferenceNode(\n            NotationGeneralProgrammer.returnType(rename)(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write(project)(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"general\",\n            NotationGeneralProgrammer.write(rename)({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createPrefixUnaryExpression(\n              ts.SyntaxKind.ExclamationToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n            ),\n            ts.factory.createReturnStatement(ts.factory.createNull()),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"general\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}