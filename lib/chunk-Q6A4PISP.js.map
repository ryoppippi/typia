{"version":3,"sources":["../src/programmers/helpers/HttpMetadataUtil.ts"],"names":["HttpMetadataUtil","atomics","meta","Set","map","a","type","constants","c","templates","length","isUnion","size","arrays","tuples","natives","maps","objects"],"mappings":";;UAEiBA,mBAAAA;oBACFC,UAAU,CACrBC,SAEA,oBAAIC,IAAI;OACHD,KAAKD,QAAQG,IAAI,CAACC,MAAMA,EAAEC,IAAI;OAC9BJ,KAAKK,UAAUH,IAAI,CAACI,MAAMA,EAAEF,IAAI;OAC/BJ,KAAKO,UAAUC,SAAU;MAAC;QAAsB,CAAA;GACrD;oBAEUC,UAAU,CAACT,SACtBD,kBAAAA,QAAQC,IAAAA,EAAMU,OACZV,KAAKW,OAAOH,SACZR,KAAKY,OAAOJ,SACZR,KAAKa,QAAQL,SACbR,KAAKc,KAAKN,SACVR,KAAKe,QAAQP,SACf;AACJ,GAlBiBV,qBAAAA,mBAAAA,CAAAA,EAAAA","sourcesContent":["import { Metadata } from \"../../schemas/metadata/Metadata\";\n\nexport namespace HttpMetadataUtil {\n  export const atomics = (\n    meta: Metadata,\n  ): Set<\"boolean\" | \"bigint\" | \"number\" | \"string\"> =>\n    new Set([\n      ...meta.atomics.map((a) => a.type),\n      ...meta.constants.map((c) => c.type),\n      ...(meta.templates.length ? ([\"string\"] as const) : []),\n    ]);\n\n  export const isUnion = (meta: Metadata): boolean =>\n    atomics(meta).size +\n      meta.arrays.length +\n      meta.tuples.length +\n      meta.natives.length +\n      meta.maps.length +\n      meta.objects.length >\n    1;\n}\n"]}