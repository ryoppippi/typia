{"version":3,"sources":["../src/programmers/protobuf/ProtobufIsDecodeProgrammer.ts"],"names":["ts","ProtobufIsDecodeProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","createUnionTypeNode","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","TypeFactory","getFullName","checker","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","ProtobufDecodeProgrammer","createCallExpression","createIfStatement","createPrefixUnaryExpression","SyntaxKind","ExclamationToken","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,6BAAAA;8BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAX,GAAGO,QAAQK,wBAAwB,YAAA,CAAA;KAGvCZ,GAAGO,QAAQM,oBAAoB;IAC7Bb,GAAGO,QAAQO,qBACTd,GAAGO,QAAQQ,sBACTf,GAAGO,QAAQS,oBAAoB,OAAA,CAAA,GAEjCP,QACAT,GAAGO,QAAQU,iBAAiB,UAAA,GAC5B;MACEjB,GAAGO,QAAQK,wBACTN,QAAQY,YAAYC,YAAYhB,QAAQiB,OAAO,EAAEf,IAAAA,CAAAA;OAGrD,KAAA;IAEFL,GAAGO,QAAQQ,sBAAsBf,GAAGO,QAAQc,WAAU,CAAA;GACvD,GACDZ,QACAT,GAAGO,QAAQe,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAavB,MAAM;MACjB,GAAGC;MACHuB,SAAS;QACP,GAAGvB,QAAQuB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGxB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BiB,iBAAiBC,SACf,UACAK,yBAAyB3B,MAAM;MAC7B,GAAGC;MACHuB,SAAS;QACP,GAAGvB,QAAQuB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGxB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBiB,iBAAiBC,SACf,UACAxB,GAAGO,QAAQuB,qBACT9B,GAAGO,QAAQU,iBAAiB,QAAA,GAC5BR,QACA;MAACT,GAAGO,QAAQU,iBAAiB,OAAA;KAAS,CAAA;IAG1CjB,GAAGO,QAAQwB,kBACT/B,GAAGO,QAAQyB,4BACThC,GAAGiC,WAAWC,kBACdlC,GAAGO,QAAQuB,qBACT9B,GAAGO,QAAQU,iBAAiB,IAAA,GAC5BR,QACA;MAACT,GAAGO,QAAQU,iBAAiB,QAAA;KAAU,CAAA,GAG3CjB,GAAGO,QAAQ4B,sBAAsBnC,GAAGO,QAAQc,WAAU,CAAA,CAAA;IAExDrB,GAAGO,QAAQ4B,sBACTnC,GAAGO,QAAQU,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GA9EiBhB,+BAAAA,6BAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { ProtobufDecodeProgrammer } from \"./ProtobufDecodeProgrammer\";\n\nexport namespace ProtobufIsDecodeProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\"Uint8Array\"),\n          ),\n        ],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createImportTypeNode(\n            ts.factory.createLiteralTypeNode(\n              ts.factory.createStringLiteral(\"typia\"),\n            ),\n            undefined,\n            ts.factory.createIdentifier(\"Resolved\"),\n            [\n              ts.factory.createTypeReferenceNode(\n                name ?? TypeFactory.getFullName(project.checker)(type),\n              ),\n            ],\n            false,\n          ),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"decode\",\n            ProtobufDecodeProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createPrefixUnaryExpression(\n              ts.SyntaxKind.ExclamationToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"output\")],\n              ),\n            ),\n            ts.factory.createReturnStatement(ts.factory.createNull()),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}