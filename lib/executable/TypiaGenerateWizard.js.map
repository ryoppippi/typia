{"version":3,"sources":["../../src/executable/TypiaGenerateWizard.ts"],"names":["fs","TypiaGenerateWizard","generate","console","log","pack","PackageManager","mount","options","ArgumentParser","parse","inquiry","TypiaProgrammer","build","_pack","command","prompt","action","option","questioned","value","input","name","message","result","type","default","select","choices","configure","files","promises","readdir","process","cwd","filter","str","substring","length","URIError","output","project"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAOEC,sBAAAA;AACR,iBAAeC,WAAAA;AACpBC,YAAQC,IAAI,0CAAA;AACZD,YAAQC,IAAI,wBAAA;AACZD,YAAQC,IAAI,0CAAA;AAGZ,UAAMC,OAAuB,MAAMC,eAAeC,MAAK;AACvD,UAAMC,UAAsB,MAAMC,eAAeC,MAAML,IAAAA,EAAMM,OAAAA;AAC7D,UAAMC,gBAAgBC,MAAML,OAAAA;EAC9B;AATsBN;uBAAAA,WAAAA;AAWtB,QAAMS,UAA8C,8BAClDG,OACAC,SACAC,QACAC,WAAAA;AAGAF,YAAQG,OAAO,kBAAkB,iBAAA;AACjCH,YAAQG,OAAO,wBAAwB,kBAAA;AACvCH,YAAQG,OAAO,uBAAuB,6BAAA;AAEtC,UAAMC,aAAa;MAAEC,OAAO;IAAM;AAElC,UAAMC,QAAQ,wBAACC,SAAiB,OAAOC,YAAAA;AACrC,YAAMC,SAAS,MAAMR,OAAAA,EAAS;QAC5BS,MAAM;QACNH;QACAC;QACAG,SAAS;MACX,CAAA;AACA,aAAOF,OAAOF,IAAAA;IAChB,GARc;AASd,UAAMK,SACJ,wBAACL,SACD,CAACC,YACD,OAA8BK,YAAAA;AAC5BT,iBAAWC,QAAQ;AACnB,cACE,MAAMJ,OAAAA,EAAS;QACbS,MAAM;QACNH;QACAC;QACAK;MACF,CAAA,GACAN,IAAAA;IACJ,GAZA;AAaF,UAAMO,YAAY,mCAAA;AAChB,YAAMC,QAAkB,OACtB,MAAM9B,GAAG+B,SAASC,QAAQC,QAAQC,IAAG,CAAA,GACrCC,OACA,CAACC,QACCA,IAAIC,UAAU,GAAG,CAAA,MAAO,cACxBD,IAAIC,UAAUD,IAAIE,SAAS,CAAA,MAAO,OAAA;AAEtC,UAAIR,MAAMQ,WAAW,EACnB,OAAM,IAAIC,SAAS,sCAAsC;eAClDT,MAAMQ,WAAW,EAAG,QAAOR,MAAM,CAAA;AAC1C,aAAOH,OAAO,UAAA,EAAY,gBAAA,EAAkBG,KAAAA;IAC9C,GAZkB;AAclB,WAAOb,OAAO,OAAOT,YAAAA;AACnBA,cAAQa,UAAU,MAAMA,MAAM,OAAA,EAAS,iBAAA;AACvCb,cAAQgC,WAAW,MAAMnB,MAAM,QAAA,EAAU,kBAAA;AACzCb,cAAQiC,YAAY,MAAMZ,UAAAA;AAC1B,aAAOrB;IACT,CAAA;EACF,GAxDoD;AA+DtD,GA3EiBP,wBAAAA,sBAAAA,CAAAA,EAAAA","sourcesContent":["import fs from \"fs\";\n\nimport { TypiaProgrammer } from \"../programmers/TypiaProgrammer\";\n\nimport { ArgumentParser } from \"./setup/ArgumentParser\";\nimport { PackageManager } from \"./setup/PackageManager\";\n\nexport namespace TypiaGenerateWizard {\n  export async function generate(): Promise<void> {\n    console.log(\"----------------------------------------\");\n    console.log(\" Typia Generate Wizard\");\n    console.log(\"----------------------------------------\");\n\n    // LOAD PACKAGE.JSON INFO\n    const pack: PackageManager = await PackageManager.mount();\n    const options: IArguments = await ArgumentParser.parse(pack)(inquiry);\n    await TypiaProgrammer.build(options);\n  }\n\n  const inquiry: ArgumentParser.Inquiry<IArguments> = async (\n    _pack,\n    command,\n    prompt,\n    action,\n  ) => {\n    // PREPARE ASSETS\n    command.option(\"--input [path]\", \"input directory\");\n    command.option(\"--output [directory]\", \"output directory\");\n    command.option(\"--project [project]\", \"tsconfig.json file location\");\n\n    const questioned = { value: false };\n\n    const input = (name: string) => async (message: string) => {\n      const result = await prompt()({\n        type: \"input\",\n        name,\n        message,\n        default: \"\",\n      });\n      return result[name] as string;\n    };\n    const select =\n      (name: string) =>\n      (message: string) =>\n      async <Choice extends string>(choices: Choice[]): Promise<Choice> => {\n        questioned.value = true;\n        return (\n          await prompt()({\n            type: \"list\",\n            name: name,\n            message: message,\n            choices: choices,\n          })\n        )[name];\n      };\n    const configure = async (): Promise<string> => {\n      const files: string[] = await (\n        await fs.promises.readdir(process.cwd())\n      ).filter(\n        (str) =>\n          str.substring(0, 8) === \"tsconfig\" &&\n          str.substring(str.length - 5) === \".json\",\n      );\n      if (files.length === 0)\n        throw new URIError(`Unable to find \"tsconfig.json\" file.`);\n      else if (files.length === 1) return files[0]!;\n      return select(\"tsconfig\")(\"TS Config File\")(files);\n    };\n\n    return action(async (options) => {\n      options.input ??= await input(\"input\")(\"input directory\");\n      options.output ??= await input(\"output\")(\"output directory\");\n      options.project ??= await configure();\n      return options as IArguments;\n    });\n  };\n\n  export interface IArguments {\n    input: string;\n    output: string;\n    project: string;\n  }\n}\n"]}