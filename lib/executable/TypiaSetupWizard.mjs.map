{"version":3,"sources":["../../src/executable/TypiaSetupWizard.ts"],"sourcesContent":["import fs from \"fs\";\n\nimport { ArgumentParser } from \"./setup/ArgumentParser\";\nimport { CommandExecutor } from \"./setup/CommandExecutor\";\nimport { PackageManager } from \"./setup/PackageManager\";\nimport { PluginConfigurator } from \"./setup/PluginConfigurator\";\n\nexport namespace TypiaSetupWizard {\n  export interface IArguments {\n    manager: \"npm\" | \"pnpm\" | \"yarn\";\n    project: string | null;\n  }\n\n  export async function setup(): Promise<void> {\n    console.log(\"----------------------------------------\");\n    console.log(\" Typia Setup Wizard\");\n    console.log(\"----------------------------------------\");\n\n    // PREPARE ASSETS\n    const pack: PackageManager = await PackageManager.mount();\n    const args: IArguments = await ArgumentParser.parse(pack)(inquiry);\n\n    // INSTALL TYPESCRIPT COMPILERS\n    pack.install({ dev: true, modulo: \"ts-patch\", version: \"latest\" });\n    pack.install({ dev: true, modulo: \"ts-node\", version: \"latest\" });\n    pack.install({ dev: true, modulo: \"typescript\", version: \"5.4.2\" });\n    args.project ??= (() => {\n      const runner: string = pack.manager === \"npm\" ? \"npx\" : pack.manager;\n      CommandExecutor.run(`${runner} tsc --init`);\n      return (args.project = \"tsconfig.json\");\n    })();\n\n    // SETUP TRANSFORMER\n    await pack.save((data) => {\n      // COMPOSE PREPARE COMMAND\n      data.scripts ??= {};\n      if (\n        typeof data.scripts.prepare === \"string\" &&\n        data.scripts.prepare.trim().length\n      ) {\n        if (\n          data.scripts.prepare.indexOf(\"ts-patch install\") === -1 &&\n          data.scripts.prepare.indexOf(\"typia patch\") === -1\n        )\n          data.scripts.prepare =\n            \"ts-patch install && typia patch && \" + data.scripts.prepare;\n        else if (data.scripts.prepare.indexOf(\"ts-patch install\") === -1)\n          data.scripts.prepare = \"ts-patch install && \" + data.scripts.prepare;\n        else if (data.scripts.prepare.indexOf(\"typia patch\") === -1)\n          data.scripts.prepare = data.scripts.prepare.replace(\n            \"ts-patch install\",\n            \"ts-patch install && typia patch\",\n          );\n      } else data.scripts.prepare = \"ts-patch install && typia patch\";\n\n      // FOR OLDER VERSIONS\n      if (typeof data.scripts.postinstall === \"string\") {\n        data.scripts.postinstall = data.scripts.postinstall\n          .split(\"&&\")\n          .map((str) => str.trim())\n          .filter((str) => str.indexOf(\"ts-patch install\") === -1)\n          .join(\" && \");\n        if (data.scripts.postinstall.length === 0)\n          delete data.scripts.postinstall;\n      }\n    });\n\n    // CONFIGURE TYPIA\n    await PluginConfigurator.configure(args);\n    CommandExecutor.run(`${pack.manager} run prepare`);\n  }\n\n  const inquiry: ArgumentParser.Inquiry<IArguments> = async (\n    pack,\n    command,\n    prompt,\n    action,\n  ) => {\n    // PREPARE ASSETS\n    command.option(\"--manager [manager\", \"package manager\");\n    command.option(\"--project [project]\", \"tsconfig.json file location\");\n\n    // INTERNAL PROCEDURES\n    const questioned = { value: false };\n    const select =\n      (name: string) =>\n      (message: string) =>\n      async <Choice extends string>(\n        choices: Choice[],\n        filter?: (choice: string) => Choice,\n      ): Promise<Choice> => {\n        questioned.value = true;\n        return (\n          await prompt()({\n            type: \"list\",\n            name: name,\n            message: message,\n            choices: choices,\n            ...(filter\n              ? {\n                  filter,\n                }\n              : {}),\n          })\n        )[name];\n      };\n    const configure = async (): Promise<string | null> => {\n      const fileList: string[] = await (\n        await fs.promises.readdir(process.cwd())\n      )\n        .filter(\n          (str) =>\n            str.substring(0, 8) === \"tsconfig\" &&\n            str.substring(str.length - 5) === \".json\",\n        )\n        .sort((x, y) =>\n          x === \"tsconfig.json\"\n            ? -1\n            : y === \"tsconfig.json\"\n              ? 1\n              : x < y\n                ? -1\n                : 1,\n        );\n      if (fileList.length === 0) {\n        if (process.cwd() !== pack.directory)\n          throw new URIError(`Unable to find \"tsconfig.json\" file.`);\n        return null;\n      } else if (fileList.length === 1) return fileList[0]!;\n      return select(\"tsconfig\")(\"TS Config File\")(fileList);\n    };\n\n    // DO CONSTRUCT\n    return action(async (options) => {\n      pack.manager = options.manager ??= await select(\"manager\")(\n        \"Package Manager\",\n      )(\n        [\n          \"npm\" as const,\n          \"pnpm\" as const,\n          \"yarn (berry is not supported)\" as \"yarn\",\n        ],\n        (value) => value.split(\" \")[0] as \"yarn\",\n      );\n      options.project ??= await configure();\n\n      if (questioned.value) console.log(\"\");\n      return options as IArguments;\n    });\n  };\n}\n"],"mappings":"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","names":["fs","TypiaSetupWizard","setup","console","log","pack","PackageManager","mount","args","ArgumentParser","parse","inquiry","install","dev","modulo","version","project","runner","manager","CommandExecutor","run","save","data","scripts","prepare","trim","length","indexOf","replace","postinstall","split","map","str","filter","join","PluginConfigurator","configure","command","prompt","action","option","questioned","value","select","name","message","choices","type","fileList","fs","promises","readdir","process","cwd","substring","sort","x","y","directory","URIError","options"]}