{"version":3,"sources":["../src/executable/setup/PackageManager.ts"],"names":["fs","path","PackageManager","manager","file","join","directory","mount","location","FileRetriever","process","cwd","URIError","load","save","modifier","content","promises","readFile","data","JSON","parse","writeFile","stringify","install","props","middle","dev","CommandExecutor","run","modulo","version"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAQ;AACf,OAAOC,UAAU;AAKV,IAAMC,iBAAN,MAAMA,gBAAAA;EANb,OAMaA;;;;;EACJC;EACP,IAAWC,OAAe;AACxB,WAAOH,KAAKI,KAAK,KAAKC,WAAW,cAAA;EACnC;EAEA,aAAoBC,QAAiC;AACnD,UAAMC,WAA0B,MAAMC,cAAcH,UAClD,cAAA,EACAI,QAAQC,IAAG,CAAA;AACb,QAAIH,aAAa,KACf,OAAM,IAAII,SAAS,oCAAoC;AAEzD,WAAO,IAAIV,gBACTM,UACA,MAAM,KAAKK,KAAKZ,KAAKI,KAAKG,UAAU,cAAA,CAAA,CAAA;EAExC;EAEA,MAAaM,KAAKC,UAAuD;AACvE,UAAMC,UAAkB,MAAMhB,GAAGiB,SAASC,SAAS,KAAKd,MAAM,MAAA;AAC9D,SAAKe,OAAOC,KAAKC,MAAML,OAAAA;AACvBD,aAAS,KAAKI,IAAI;AAElB,WAAOnB,GAAGiB,SAASK,UACjB,KAAKlB,MACLgB,KAAKG,UAAU,KAAKJ,MAAM,MAAM,CAAA,GAChC,MAAA;EAEJ;EAEOK,QAAQC,OAIH;AACV,UAAMC,SACJ,KAAKvB,YAAY,SACb,MAAMsB,MAAME,MAAM,QAAQ,EAAA,KAC1B,WAAWF,MAAME,MAAM,eAAe,QAAA;AAC5CC,oBAAgBC,IACd,GAAG,KAAK1B,OAAO,IAAIuB,MAAAA,IAAUD,MAAMK,MAAM,GACvCL,MAAMM,UAAU,IAAIN,MAAMM,OAAO,KAAK,EAAA,EACtC;AAEJ,WAAO;EACT;EAEA,YACkBzB,WACTa,MACP;SAFgBb,YAAAA;SACTa,OAAAA;SAjDFhB,UAAkB;EAkDtB;EAEH,aAAqBU,KAAKT,MAAqC;AAC7D,UAAMY,UAAkB,MAAMhB,GAAGiB,SAASC,SAASd,MAAM,MAAA;AACzD,WAAOgB,KAAKC,MAAML,OAAAA;EACpB;AACF","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport { CommandExecutor } from \"./CommandExecutor\";\nimport { FileRetriever } from \"./FileRetriever\";\n\nexport class PackageManager {\n  public manager: string = \"npm\";\n  public get file(): string {\n    return path.join(this.directory, \"package.json\");\n  }\n\n  public static async mount(): Promise<PackageManager> {\n    const location: string | null = await FileRetriever.directory(\n      \"package.json\",\n    )(process.cwd());\n    if (location === null)\n      throw new URIError(`Unable to find \"package.json\" file`);\n\n    return new PackageManager(\n      location,\n      await this.load(path.join(location, \"package.json\")),\n    );\n  }\n\n  public async save(modifier: (data: Package.Data) => void): Promise<void> {\n    const content: string = await fs.promises.readFile(this.file, \"utf8\");\n    this.data = JSON.parse(content);\n    modifier(this.data);\n\n    return fs.promises.writeFile(\n      this.file,\n      JSON.stringify(this.data, null, 2),\n      \"utf8\",\n    );\n  }\n\n  public install(props: {\n    dev: boolean;\n    modulo: string;\n    version: string;\n  }): boolean {\n    const middle: string =\n      this.manager === \"yarn\"\n        ? `add${props.dev ? \" -D\" : \"\"}`\n        : `install ${props.dev ? \"--save-dev\" : \"--save\"}`;\n    CommandExecutor.run(\n      `${this.manager} ${middle} ${props.modulo}${\n        props.version ? `@${props.version}` : \"\"\n      }`,\n    );\n    return true;\n  }\n\n  private constructor(\n    public readonly directory: string,\n    public data: Package.Data,\n  ) {}\n\n  private static async load(file: string): Promise<Package.Data> {\n    const content: string = await fs.promises.readFile(file, \"utf8\");\n    return JSON.parse(content);\n  }\n}\nexport namespace Package {\n  export interface Data {\n    scripts?: Record<string, string>;\n    dependencies?: Record<string, string>;\n    devDependencies?: Record<string, string>;\n  }\n}\n"]}