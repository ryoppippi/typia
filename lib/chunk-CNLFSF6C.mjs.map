{"version":3,"sources":["../src/factories/internal/metadata/emend_metadata_atomics.ts"],"sourcesContent":["import { Metadata } from \"../../../schemas/metadata/Metadata\";\nimport { MetadataAtomic } from \"../../../schemas/metadata/MetadataAtomic\";\n\nimport { ArrayUtil } from \"../../../utils/ArrayUtil\";\n\nexport const emend_metadata_atomics = (meta: Metadata) => {\n  // ATOMICS\n  for (const a of meta.atomics) {\n    if (is_not_pure(a)) continue;\n    const index: number = meta.constants.findIndex((c) => c.type === a.type);\n    if (index !== -1) meta.constants.splice(index, 1);\n  }\n\n  // BOOLEAN\n  {\n    const index: number = meta.constants.findIndex((c) => c.type === \"boolean\");\n    if (index !== -1 && meta.constants[index]!.values.length === 2) {\n      const temp = meta.constants.splice(index, 1)[0]!;\n      ArrayUtil.take(\n        meta.atomics,\n        (a) => a.type === \"boolean\",\n        () =>\n          MetadataAtomic.create({\n            type: \"boolean\" as const,\n            tags: temp.values[0]!.tags ?? [],\n          }),\n      );\n    }\n  }\n\n  // TEMPLATE\n  if (meta.templates.length) {\n    const atomic: MetadataAtomic | undefined = meta.atomics.find(\n      (a) => a.type === \"string\",\n    );\n    if (atomic !== undefined && false === is_not_pure(atomic))\n      meta.templates.splice(0, meta.templates.length);\n  }\n};\n\nconst is_not_pure = (atomic: MetadataAtomic): boolean =>\n  atomic.tags.length !== 0 &&\n  atomic.tags.every(\n    (row) => row.length !== 0 && row.every((c) => !!c.validate?.length),\n  );\n"],"mappings":";;;;;;;;;;;AAKO,IAAMA,yBAAyB,wBAACC,SAAAA;AAErC,aAAWC,KAAKD,KAAKE,SAAS;AAC5B,QAAIC,YAAYF,CAAAA,EAAI;AACpB,UAAMG,QAAgBJ,KAAKK,UAAUC,UAAU,CAACC,MAAMA,EAAEC,SAASP,EAAEO,IAAI;AACvE,QAAIJ,UAAU,GAAIJ,MAAKK,UAAUI,OAAOL,OAAO,CAAA;EACjD;AAGA;AACE,UAAMA,QAAgBJ,KAAKK,UAAUC,UAAU,CAACC,MAAMA,EAAEC,SAAS,SAAA;AACjE,QAAIJ,UAAU,MAAMJ,KAAKK,UAAUD,KAAAA,EAAQM,OAAOC,WAAW,GAAG;AAC9D,YAAMC,OAAOZ,KAAKK,UAAUI,OAAOL,OAAO,CAAA,EAAG,CAAA;AAC7CS,gBAAUC,KACRd,KAAKE,SACL,CAACD,MAAMA,EAAEO,SAAS,WAClB,MACEO,eAAeC,OAAO;QACpBR,MAAM;QACNS,MAAML,KAAKF,OAAO,CAAA,EAAIO,QAAQ,CAAA;MAChC,CAAA,CAAA;IAEN;EACF;AAGA,MAAIjB,KAAKkB,UAAUP,QAAQ;AACzB,UAAMQ,SAAqCnB,KAAKE,QAAQkB,KACtD,CAACnB,MAAMA,EAAEO,SAAS,QAAA;AAEpB,QAAIW,WAAWE,UAAa,UAAUlB,YAAYgB,MAAAA,EAChDnB,MAAKkB,UAAUT,OAAO,GAAGT,KAAKkB,UAAUP,MAAM;EAClD;AACF,GAjCsC;AAmCtC,IAAMR,cAAc,wBAACgB,WACnBA,OAAOF,KAAKN,WAAW,KACvBQ,OAAOF,KAAKK,MACV,CAACC,QAAQA,IAAIZ,WAAW,KAAKY,IAAID,MAAM,CAACf,MAAM,CAAC,CAACA,EAAEiB,UAAUb,MAAAA,CAAAA,GAH5C;","names":["emend_metadata_atomics","meta","a","atomics","is_not_pure","index","constants","findIndex","c","type","splice","values","length","temp","ArrayUtil","take","MetadataAtomic","create","tags","templates","atomic","find","undefined","every","row","validate"]}