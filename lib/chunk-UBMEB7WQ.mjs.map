{"version":3,"sources":["../src/programmers/internal/check_array_length.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\n\nimport { IMetadataTypeTag } from \"../../schemas/metadata/IMetadataTypeTag\";\nimport { MetadataArray } from \"../../schemas/metadata/MetadataArray\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ICheckEntry } from \"../helpers/ICheckEntry\";\n\n/**\n * @internal\n */\nexport const check_array_length =\n  (project: IProject) =>\n  (array: MetadataArray) =>\n  (input: ts.Expression): ICheckEntry => {\n    const conditions: ICheckEntry.ICondition[][] = check_string_type_tags(\n      project,\n    )(array.tags)(input);\n\n    return {\n      expected: array.getName(),\n      expression: null,\n      conditions,\n    };\n  };\n\nconst check_string_type_tags =\n  (project: IProject) =>\n  (matrix: IMetadataTypeTag[][]) =>\n  (input: ts.Expression): ICheckEntry.ICondition[][] =>\n    matrix\n      .map((row) => row.filter((tag) => !!tag.validate))\n      .filter((row) => !!row.length)\n      .map((row) =>\n        row.map((tag) => ({\n          expected: `Array<> & ${tag.name}`,\n          expression: (\n            tag.predicate ??\n            ExpressionFactory.transpile(project.context)(tag.validate!)\n          )(input),\n        })),\n      );\n"],"mappings":";;;;;;;;AAcO,IAAMA,qBACX,wBAACC,YACD,CAACC,UACD,CAACC,UAAAA;AACC,QAAMC,aAAyCC,uBAC7CJ,OAAAA,EACAC,MAAMI,IAAI,EAAEH,KAAAA;AAEd,SAAO;IACLI,UAAUL,MAAMM,QAAO;IACvBC,YAAY;IACZL;EACF;AACF,GAZA;AAcF,IAAMC,yBACJ,wBAACJ,YACD,CAACS,WACD,CAACP,UACCO,OACGC,IAAI,CAACC,QAAQA,IAAIC,OAAO,CAACC,QAAQ,CAAC,CAACA,IAAIC,QAAQ,CAAA,EAC/CF,OAAO,CAACD,QAAQ,CAAC,CAACA,IAAII,MAAM,EAC5BL,IAAI,CAACC,QACJA,IAAID,IAAI,CAACG,SAAS;EAChBP,UAAU,aAAaO,IAAIG,IAAI;EAC/BR,aACEK,IAAII,aACJC,kBAAkBC,UAAUnB,QAAQoB,OAAO,EAAEP,IAAIC,QAAQ,GACzDZ,KAAAA;AACJ,EAAA,CAAA,GAbN;","names":["check_array_length","project","array","input","conditions","check_string_type_tags","tags","expected","getName","expression","matrix","map","row","filter","tag","validate","length","name","predicate","ExpressionFactory","transpile","context"]}