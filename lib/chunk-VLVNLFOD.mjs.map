{"version":3,"sources":["../src/programmers/functional/internal/FunctionalGeneralProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { TypeFactory } from \"../../../factories/TypeFactory\";\n\nexport namespace FunctionalGeneralProgrammer {\n  export interface IOutput {\n    type: ts.Type;\n    async: boolean;\n  }\n  export const getReturnType =\n    (checker: ts.TypeChecker) =>\n    (declaration: ts.FunctionDeclaration): IOutput => {\n      const signature: ts.Signature | undefined =\n        checker.getSignatureFromDeclaration(declaration);\n      const type: ts.Type =\n        signature?.getReturnType() ??\n        checker.getTypeFromTypeNode(TypeFactory.keyword(\"any\"));\n\n      if (type.symbol?.name === \"Promise\") {\n        const generic: readonly ts.Type[] = checker.getTypeArguments(\n          type as ts.TypeReference,\n        );\n        return generic.length === 1\n          ? { type: generic[0]!, async: true }\n          : {\n              type: checker.getTypeFromTypeNode(TypeFactory.keyword(\"any\")),\n              async: false,\n            };\n      }\n      return { type, async: false };\n    };\n}\n"],"mappings":";;;;;;UAIiBA,8BAAAA;+BAKFC,gBACX,CAACC,YACD,CAACC,gBAAAA;AACC,UAAMC,YACJF,QAAQG,4BAA4BF,WAAAA;AACtC,UAAMG,OACJF,WAAWH,cAAAA,KACXC,QAAQK,oBAAoBC,YAAYC,QAAQ,KAAA,CAAA;AAElD,QAAIH,KAAKI,QAAQC,SAAS,WAAW;AACnC,YAAMC,UAA8BV,QAAQW,iBAC1CP,IAAAA;AAEF,aAAOM,QAAQE,WAAW,IACtB;QAAER,MAAMM,QAAQ,CAAA;QAAKG,OAAO;MAAK,IACjC;QACET,MAAMJ,QAAQK,oBAAoBC,YAAYC,QAAQ,KAAA,CAAA;QACtDM,OAAO;MACT;IACN;AACA,WAAO;MAAET;MAAMS,OAAO;IAAM;EAC9B;AACJ,GA3BiBf,gCAAAA,8BAAAA,CAAAA,EAAAA;","names":["FunctionalGeneralProgrammer","getReturnType","checker","declaration","signature","getSignatureFromDeclaration","type","getTypeFromTypeNode","TypeFactory","keyword","symbol","name","generic","getTypeArguments","length","async"]}