{"version":3,"sources":["../src/factories/NumericRangeFactory.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { ProtobufAtomic } from \"../typings/ProtobufAtomic\";\n\nimport { ExpressionFactory } from \"./ExpressionFactory\";\n\nexport namespace NumericRangeFactory {\n  export const number =\n    (type: ProtobufAtomic.Numeric) =>\n    (input: ts.Expression): ts.Expression =>\n      NumberPredicator[type](input);\n\n  export const bigint =\n    (type: ProtobufAtomic.BigNumeric) =>\n    (input: ts.Expression): ts.Expression =>\n      BigIntPredicator[type](input);\n}\n\nnamespace NumberPredicator {\n  export const int32 = (input: ts.Expression) =>\n    ts.factory.createLogicalAnd(\n      integer(input),\n      between(\"-2147483648\", \"2147483647\")(input),\n    );\n  export const uint32 = (input: ts.Expression) =>\n    ts.factory.createLogicalAnd(\n      integer(input),\n      between(\"0\", \"4294967295\")(input),\n    );\n  export const int64 = (input: ts.Expression) =>\n    ts.factory.createLogicalAnd(\n      integer(input),\n      between(\"-9223372036854775808\", \"9223372036854775807\")(input),\n    );\n  export const uint64 = (input: ts.Expression) =>\n    ts.factory.createLogicalAnd(\n      integer(input),\n      between(\"0\", \"18446744073709551615\")(input),\n    );\n  export const float = (input: ts.Expression) =>\n    between(\"-1.175494351e38\", \"3.4028235e38\")(input);\n  export const double = () => ts.factory.createTrue();\n}\n\nnamespace BigIntPredicator {\n  export const int64 = () => ts.factory.createTrue();\n  export const uint64 = (input: ts.Expression) =>\n    ts.factory.createLessThanEquals(\n      ts.factory.createCallExpression(\n        ts.factory.createIdentifier(\"BigInt\"),\n        undefined,\n        [ExpressionFactory.number(0)],\n      ),\n      input,\n    );\n}\n\nconst integer = (input: ts.Expression) =>\n  ts.factory.createStrictEquality(\n    ts.factory.createCallExpression(\n      ts.factory.createIdentifier(\"Math.floor\"),\n      undefined,\n      [input],\n    ),\n    input,\n  );\n\nconst between = (x: string, y: string) => (input: ts.Expression) =>\n  ts.factory.createLogicalAnd(\n    ts.factory.createLessThanEquals(ts.factory.createIdentifier(x), input),\n    ts.factory.createLessThanEquals(input, ts.factory.createIdentifier(y)),\n  );\n"],"mappings":";;;;;;;;AAAA,OAAOA,QAAQ;;UAMEC,sBAAAA;uBACFC,SACX,CAACC,SACD,CAACC,UACCC,iBAAiBF,IAAAA,EAAMC,KAAAA;uBAEdE,SACX,CAACH,SACD,CAACC,UACCG,iBAAiBJ,IAAAA,EAAMC,KAAAA;AAC7B,GAViBH,wBAAAA,sBAAAA,CAAAA,EAAAA;;UAYPI,mBAAAA;oBACKG,QAAQ,CAACJ,UACpBK,GAAGC,QAAQC,iBACTC,QAAQR,KAAAA,GACRS,QAAQ,eAAe,YAAA,EAAcT,KAAAA,CAAAA;oBAE5BU,SAAS,CAACV,UACrBK,GAAGC,QAAQC,iBACTC,QAAQR,KAAAA,GACRS,QAAQ,KAAK,YAAA,EAAcT,KAAAA,CAAAA;oBAElBW,QAAQ,CAACX,UACpBK,GAAGC,QAAQC,iBACTC,QAAQR,KAAAA,GACRS,QAAQ,wBAAwB,qBAAA,EAAuBT,KAAAA,CAAAA;oBAE9CY,SAAS,CAACZ,UACrBK,GAAGC,QAAQC,iBACTC,QAAQR,KAAAA,GACRS,QAAQ,KAAK,sBAAA,EAAwBT,KAAAA,CAAAA;oBAE5Ba,QAAQ,CAACb,UACpBS,QAAQ,mBAAmB,cAAA,EAAgBT,KAAAA;oBAChCc,SAAS,MAAMT,GAAGC,QAAQS,WAAU;AACnD,GAxBUd,qBAAAA,mBAAAA,CAAAA,EAAAA;;UA0BAE,mBAAAA;oBACKQ,QAAQ,MAAMN,GAAGC,QAAQS,WAAU;oBACnCH,SAAS,CAACZ,UACrBK,GAAGC,QAAQU,qBACTX,GAAGC,QAAQW,qBACTZ,GAAGC,QAAQY,iBAAiB,QAAA,GAC5BC,QACA;IAACC,kBAAkBtB,OAAO,CAAA;GAAG,GAE/BE,KAAAA;AAEN,GAXUG,qBAAAA,mBAAAA,CAAAA,EAAAA;AAaV,IAAMK,UAAU,wBAACR,UACfK,GAAGC,QAAQe,qBACThB,GAAGC,QAAQW,qBACTZ,GAAGC,QAAQY,iBAAiB,YAAA,GAC5BC,QACA;EAACnB;CAAM,GAETA,KAAAA,GAPY;AAUhB,IAAMS,UAAU,wBAACa,GAAWC,MAAc,CAACvB,UACzCK,GAAGC,QAAQC,iBACTF,GAAGC,QAAQU,qBAAqBX,GAAGC,QAAQY,iBAAiBI,CAAAA,GAAItB,KAAAA,GAChEK,GAAGC,QAAQU,qBAAqBhB,OAAOK,GAAGC,QAAQY,iBAAiBK,CAAAA,CAAAA,CAAAA,GAHvD;","names":["ts","NumericRangeFactory","number","type","input","NumberPredicator","bigint","BigIntPredicator","int32","ts","factory","createLogicalAnd","integer","between","uint32","int64","uint64","float","double","createTrue","createLessThanEquals","createCallExpression","createIdentifier","undefined","ExpressionFactory","createStrictEquality","x","y"]}