{"version":3,"sources":["../src/executable/setup/ArgumentParser.ts"],"names":["commander","inquirer","ArgumentParser","parse","pack","inquiry","action","closure","Promise","resolve","reject","program","options","exp","parseAsync","catch","createPromptModule"],"mappings":";;;;;AAAA,OAAOA,eAAe;AACtB,OAAOC,cAAc;;UAIJC,iBAAAA;kBAQFC,QACX,CAACC,SACD,OACEC,YAAAA;AAQA,UAAMC,SAAS,wBAACC,YACd,IAAIC,QAAW,CAACC,SAASC,WAAAA;AACvBV,gBAAUW,QAAQL,OAAO,OAAOM,YAAAA;AAC9B,YAAI;AACFH,kBAAQ,MAAMF,QAAQK,OAAAA,CAAAA;QACxB,SAASC,KAAK;AACZH,iBAAOG,GAAAA;QACT;MACF,CAAA;AACAb,gBAAUW,QAAQG,WAAU,EAAGC,MAAML,MAAAA;IACvC,CAAA,GAVa;AAWf,WAAOL,QACLD,MACAJ,UAAUW,SACVV,SAASe,oBACTV,MAAAA;EAEJ;AACJ,GArCiBJ,mBAAAA,iBAAAA,CAAAA,EAAAA","sourcesContent":["import commander from \"commander\";\nimport inquirer from \"inquirer\";\n\nimport { PackageManager } from \"./PackageManager\";\n\nexport namespace ArgumentParser {\n  export type Inquiry<T> = (\n    pack: PackageManager,\n    command: commander.Command,\n    prompt: (opt?: inquirer.StreamOptions) => inquirer.PromptModule,\n    action: (closure: (options: Partial<T>) => Promise<T>) => Promise<T>,\n  ) => Promise<T>;\n\n  export const parse =\n    (pack: PackageManager) =>\n    async <T>(\n      inquiry: (\n        pack: PackageManager,\n        command: commander.Command,\n        prompt: (opt?: inquirer.StreamOptions) => inquirer.PromptModule,\n        action: (closure: (options: Partial<T>) => Promise<T>) => Promise<T>,\n      ) => Promise<T>,\n    ): Promise<T> => {\n      // TAKE OPTIONS\n      const action = (closure: (options: Partial<T>) => Promise<T>) =>\n        new Promise<T>((resolve, reject) => {\n          commander.program.action(async (options) => {\n            try {\n              resolve(await closure(options));\n            } catch (exp) {\n              reject(exp);\n            }\n          });\n          commander.program.parseAsync().catch(reject);\n        });\n      return inquiry(\n        pack,\n        commander.program,\n        inquirer.createPromptModule,\n        action,\n      );\n    };\n}\n"]}