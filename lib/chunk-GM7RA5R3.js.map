{"version":3,"sources":["../src/functional/$join.ts"],"names":["$join","str","variable","JSON","stringify","reserved","test","RESERVED","has","Set"],"mappings":";;;;;AAAO,IAAMA,QAAQ,wBAACC,QACpBC,SAASD,GAAAA,IAAO,IAAIA,GAAAA,KAAQ,IAAIE,KAAKC,UAAUH,GAAAA,CAAAA,KAD5B;AAGrB,IAAMC,WAAW,wBAACD,QAChBI,SAASJ,GAAAA,MAAS,SAAS,8BAA8BK,KAAKL,GAAAA,GAD/C;AAGjB,IAAMI,WAAW,wBAACJ,QAAyBM,SAASC,IAAIP,GAAAA,GAAvC;AAEjB,IAAMM,WAAwB,oBAAIE,IAAI;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;CACD","sourcesContent":["export const $join = (str: string): string =>\n  variable(str) ? `.${str}` : `[${JSON.stringify(str)}]`;\n\nconst variable = (str: string): boolean =>\n  reserved(str) === false && /^[a-zA-Z_$][a-zA-Z_$0-9]*$/g.test(str);\n\nconst reserved = (str: string): boolean => RESERVED.has(str);\n\nconst RESERVED: Set<string> = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"enum\",\n  \"export\",\n  \"extends\",\n  \"false\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"null\",\n  \"return\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"true\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n]);\n"]}