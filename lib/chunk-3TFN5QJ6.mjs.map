{"version":3,"sources":["../src/utils/RandomGenerator/RandomGenerator.ts"],"sourcesContent":["import RandExp from \"randexp\";\n\nconst ALPHABETS = \"abcdefghijklmnopqrstuvwxyz\";\n\n/* -----------------------------------------------------------\n  REGULAR\n----------------------------------------------------------- */\nexport const boolean = () => Math.random() < 0.5;\nexport const integer = (min?: number, max?: number) => {\n  min ??= 0;\n  max ??= 100;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nexport const bigint = (min?: bigint, max?: bigint) =>\n  BigInt(integer(Number(min ?? BigInt(0)), Number(max ?? BigInt(100))));\nexport const number = (min?: number, max?: number) => {\n  min ??= 0;\n  max ??= 100;\n  return Math.random() * (max - min) + min;\n};\nexport const string = (length?: number): string =>\n  new Array(length ?? integer(5, 10))\n    .fill(0)\n    .map(() => ALPHABETS[integer(0, ALPHABETS.length - 1)])\n    .join(\"\");\n\nexport const array = <T>(closure: (index: number) => T, count?: number): T[] =>\n  new Array(count ?? length()).fill(0).map((_e, index) => closure(index));\nexport const pick = <T>(array: T[]): T => array[integer(0, array.length - 1)]!;\nexport const length = () => integer(0, 3);\nexport const pattern = (regex: RegExp): string => {\n  const r: RandExp = new RandExp(regex);\n  for (let i: number = 0; i < 10; ++i) {\n    const str: string = r.gen();\n    if (regex.test(str)) return str;\n  }\n  return r.gen();\n};\n\n/* -----------------------------------------------------------\n  SECIAL FORMATS\n----------------------------------------------------------- */\n// SPECIAL CHARACTERS\nexport const byte = () => \"vt7ekz4lIoNTTS9sDQYdWKharxIFAR54+z/umIxSgUM=\";\nexport const password = () => string(integer(4, 16));\nexport const regex = () =>\n  \"/^(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)$/\";\nexport const uuid = () =>\n  \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n\n// ADDRESSES\nexport const email = () => `${string(10)}@${string(10)}.${string(3)}`;\nexport const hostname = () => `${string(10)}.${string(3)}`;\nexport const idnEmail = () => email();\nexport const idnHostname = () => hostname();\nexport const iri = () => url();\nexport const iriReference = () => url();\nexport const ipv4 = () => array(() => integer(0, 255), 4).join(\".\");\nexport const ipv6 = (): string =>\n  array(() => integer(0, 65535).toString(16), 8).join(\":\");\nexport const uri = () => url();\nexport const uriReference = () => url();\nexport const uriTemplate = () => url();\nexport const url = () => `https://${string(10)}.${string(3)}`;\n\n// TIMESTAMPS\nexport const datetime = (min?: number, max?: number) =>\n  new Date(\n    number(min ?? Date.now() - 30 * DAY, max ?? Date.now() + 7 * DAY),\n  ).toISOString();\nexport const date = (min?: number, max?: number) =>\n  new Date(number(min ?? 0, max ?? Date.now() * 2))\n    .toISOString()\n    .substring(0, 10);\nexport const time = () => new Date(number(0, DAY)).toISOString().substring(11);\nexport const duration = () => {\n  const period: string = durate([\n    [\"Y\", integer(0, 100)],\n    [\"M\", integer(0, 12)],\n    [\"D\", integer(0, 31)],\n  ]);\n  const time: string = durate([\n    [\"H\", integer(0, 24)],\n    [\"M\", integer(0, 60)],\n    [\"S\", integer(0, 60)],\n  ]);\n  if (period.length + time.length === 0) return \"PT0S\";\n  return `P${period}${time.length ? \"T\" : \"\"}${time}`;\n};\n\n// POINTERS\nexport const jsonPointer = () => `/components/schemas/${string(10)}`;\nexport const relativeJsonPointer = () => `${integer(0, 10)}#`;\n\nconst DAY = 86400000;\nconst durate = (elements: [string, number][]) =>\n  elements\n    .filter(([_unit, value]) => value !== 0)\n    .map(([unit, value]) => `${value}${unit}`)\n    .join(\"\");\n"],"mappings":"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","names":["RandExp","ALPHABETS","boolean","Math","random","integer","min","max","floor","bigint","BigInt","Number","number","string","length","Array","fill","map","join","array","closure","count","_e","index","pick","pattern","regex","r","RandExp","i","str","gen","test","byte","password","uuid","replace","c","v","toString","email","hostname","idnEmail","idnHostname","iri","url","iriReference","ipv4","ipv6","uri","uriReference","uriTemplate","datetime","Date","now","DAY","toISOString","date","substring","time","duration","period","durate","jsonPointer","relativeJsonPointer","elements","filter","_unit","value","unit"]}