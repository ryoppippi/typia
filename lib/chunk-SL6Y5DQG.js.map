{"version":3,"sources":["../src/programmers/internal/random_custom.ts"],"names":["ts","random_custom","accessor","type","tags","expression","ExpressionFactory","coalesce","factory","createCallChain","createPropertyAccessChain","createToken","SyntaxKind","QuestionDotToken","createIdentifier","undefined","LiteralFactory","generate","map","t","name","kind","value"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAQ;AAYR,IAAMC,gBACX,wBAACC,aACD,CAACC,SACD,CAACC,SACD,CAACC,eACCC,kBAAkBC,SAChBP,GAAGQ,QAAQC,gBACTT,GAAGQ,QAAQE,0BACTR,SAAS,SAAA,GACTF,GAAGQ,QAAQG,YAAYX,GAAGY,WAAWC,gBAAgB,GACrDb,GAAGQ,QAAQM,iBAAiBX,IAAAA,CAAAA,GAE9BH,GAAGQ,QAAQG,YAAYX,GAAGY,WAAWC,gBAAgB,GACrDE,QACA;EACEC,eAAeC,SACbb,KAAKc,IAAI,CAACC,OAAO;IACfC,MAAMD,EAAEC;IACRC,MAAMF,EAAEE;IACRC,OAAOH,EAAEG;EACX,EAAA,CAAA;CAEH,CAAA,EAEHjB,UAAAA,GAvBJ","sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\nimport { LiteralFactory } from \"../../factories/LiteralFactory\";\n\nimport { IMetadataTypeTag } from \"../../schemas/metadata/IMetadataTypeTag\";\n\nimport { Customizable } from \"../../typings/Customizable\";\n\n/**\n * @internal\n */\nexport const random_custom =\n  (accessor: (name: string) => ts.Expression) =>\n  (type: keyof Customizable) =>\n  (tags: IMetadataTypeTag[]) =>\n  (expression: ts.Expression) =>\n    ExpressionFactory.coalesce(\n      ts.factory.createCallChain(\n        ts.factory.createPropertyAccessChain(\n          accessor(\"customs\"),\n          ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n          ts.factory.createIdentifier(type),\n        ),\n        ts.factory.createToken(ts.SyntaxKind.QuestionDotToken),\n        undefined,\n        [\n          LiteralFactory.generate(\n            tags.map((t) => ({\n              name: t.name,\n              kind: t.kind,\n              value: t.value,\n            })),\n          ),\n        ],\n      ),\n    )(expression);\n"]}