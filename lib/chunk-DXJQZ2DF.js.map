{"version":3,"sources":["../src/programmers/helpers/UnionPredicator.ts"],"names":["UnionPredicator","object","targets","matrix","Map","obj","prop","properties","key","getSoleLiteral","MapUtil","take","ArrayUtil","repeat","length","forEach","i","get","output","children","value","isRequired","neighbors","filter","oppo","k","unique","every","n","Metadata","intersects","push","property","neighbour","top","find","child","isConstant","index"],"mappings":";;;;;;;;;;;;UAOiBA,kBAAAA;mBAQFC,SAAS,CAACC,YAAAA;AAErB,UAAMC,SAAsD,oBAAIC,IAAAA;AAChE,eAAWC,OAAOH,QAChB,YAAWI,QAAQD,IAAIE,YAAY;AACjC,YAAMC,MAAqBF,KAAKE,IAAIC,eAAc;AAClD,UAAID,QAAQ,KACVE,SAAQC,KAAKR,MAAAA,EAAQK,KAAK,MACxBI,UAAUC,OAAOX,QAAQY,QAAQ,MAAM,IAAA,CAAA;IAE7C;AACFZ,YAAQa,QAAQ,CAACV,KAAKW,MAAAA;AACpB,iBAAWV,QAAQD,IAAIE,YAAY;AACjC,cAAMC,MAAqBF,KAAKE,IAAIC,eAAc;AAClD,YAAID,QAAQ,KAAML,QAAOc,IAAIT,GAAAA,EAAMQ,CAAAA,IAAKV;MAC1C;IACF,CAAA;AAGA,UAAMY,SAAyB,CAAA;AAC/BhB,YAAQa,QAAQ,CAACV,KAAKW,MAAAA;AACpB,YAAMG,WAAmC,CAAA;AACzCd,UAAIE,WAAWQ,QAAQ,CAACT,SAAAA;AAEtB,YAAIA,KAAKc,MAAMC,WAAU,MAAO,MAAO;AACvC,cAAMb,MAAqBF,KAAKE,IAAIC,eAAc;AAClD,YAAID,QAAQ,KAAM;AAGlB,cAAMc,YAAgCnB,OACnCc,IAAIT,GAAAA,EACJe,OAAO,CAACC,MAAMC,MAAMT,MAAMS,KAAKD,SAAS,IAAA;AAG3C,cAAME,SACJJ,UAAUR,WAAW,KACrBQ,UAAUK,MAAM,CAACC,MAAM,CAACC,SAASC,WAAWxB,KAAKc,OAAOQ,EAAER,KAAK,CAAA;AACjE,YAAIM,WAAW,KACbP,UAASY,KAAK;UACZC,UAAU1B;UACV2B,WAAWX,UAAUR,WAAW;QAClC,CAAA;MACJ,CAAA;AACA,UAAIK,SAASL,WAAW,EAAG;AAE3B,YAAMoB,MACJf,SAASgB,KAAK,CAACC,UAAUA,MAAMJ,SAASZ,MAAMiB,WAAU,CAAA,KACxDlB,SAAS,CAAA;AACXD,aAAOa,KAAK;QACVO,OAAOtB;QACPf,QAAQI;QACR,GAAG6B;MACL,CAAA;IACF,CAAA;AACA,WAAOhB;EACT;AACF,GAhEiBlB,oBAAAA,kBAAAA,CAAAA,EAAAA","sourcesContent":["import { Metadata } from \"../../schemas/metadata/Metadata\";\nimport { MetadataObject } from \"../../schemas/metadata/MetadataObject\";\nimport { MetadataProperty } from \"../../schemas/metadata/MetadataProperty\";\n\nimport { ArrayUtil } from \"../../utils/ArrayUtil\";\nimport { MapUtil } from \"../../utils/MapUtil\";\n\nexport namespace UnionPredicator {\n  export interface ISpecialized {\n    index: number;\n    object: MetadataObject;\n    property: MetadataProperty;\n    neighbour: boolean;\n  }\n\n  export const object = (targets: MetadataObject[]): Array<ISpecialized> => {\n    // PROPERTY MATRIX\n    const matrix: Map<string, Array<MetadataProperty | null>> = new Map();\n    for (const obj of targets)\n      for (const prop of obj.properties) {\n        const key: string | null = prop.key.getSoleLiteral();\n        if (key !== null)\n          MapUtil.take(matrix)(key, () =>\n            ArrayUtil.repeat(targets.length, () => null),\n          );\n      }\n    targets.forEach((obj, i) => {\n      for (const prop of obj.properties) {\n        const key: string | null = prop.key.getSoleLiteral();\n        if (key !== null) matrix.get(key)![i] = prop;\n      }\n    });\n\n    // EXPLORE SPECIALIZERS\n    const output: ISpecialized[] = [];\n    targets.forEach((obj, i) => {\n      const children: ISpecializedProperty[] = [];\n      obj.properties.forEach((prop) => {\n        // MUST BE REQUIRED\n        if (prop.value.isRequired() === false) return;\n        const key: string | null = prop.key.getSoleLiteral();\n        if (key === null) return;\n\n        // FIND NEIGHBORHOOD PROPERTIES\n        const neighbors: MetadataProperty[] = matrix\n          .get(key)!\n          .filter((oppo, k) => i !== k && oppo !== null) as MetadataProperty[];\n\n        // NO NEIGHBORHOOD\n        const unique: boolean =\n          neighbors.length === 0 ||\n          neighbors.every((n) => !Metadata.intersects(prop.value, n.value));\n        if (unique === true)\n          children.push({\n            property: prop,\n            neighbour: neighbors.length !== 0,\n          });\n      });\n      if (children.length === 0) return;\n\n      const top: ISpecializedProperty =\n        children.find((child) => child.property.value.isConstant()) ||\n        children[0]!;\n      output.push({\n        index: i,\n        object: obj,\n        ...top,\n      });\n    });\n    return output;\n  };\n}\n\ninterface ISpecializedProperty {\n  property: MetadataProperty;\n  neighbour: boolean;\n}\n"]}