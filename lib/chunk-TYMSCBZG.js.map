{"version":3,"sources":["../src/factories/StatementFactory.ts"],"names":["ts","StatementFactory","mut","name","initializer","factory","createVariableStatement","undefined","createVariableDeclarationList","createVariableDeclaration","NodeFlags","Let","constant","Const","entry","key","value","createArrayBindingPattern","createBindingElement","createIdentifier","transpile","script","createExpressionStatement","block","expression","createBlock"],"mappings":";AAAA,OAAOA,QAAQ;;UAEEC,mBAAAA;oBACFC,MAAM,CAACC,MAAcC,gBAChCJ,GAAGK,QAAQC,wBACTC,QACAP,GAAGK,QAAQG,8BACT;IACER,GAAGK,QAAQI,0BACTN,MACAI,QACAA,QACAH,WAAAA;KAGJJ,GAAGU,UAAUC,GAAG,CAAA;oBAITC,WAAW,CAACT,MAAcC,gBACrCJ,GAAGK,QAAQC,wBACTC,QACAP,GAAGK,QAAQG,8BACT;IACER,GAAGK,QAAQI,0BACTN,MACAI,QACAA,QACAH,WAAAA;KAGJJ,GAAGU,UAAUG,KAAK,CAAA;oBAIXC,QAAQ,CAACC,QAAgB,CAACC,UACrChB,GAAGK,QAAQG,8BACT;IACER,GAAGK,QAAQI,0BACTT,GAAGK,QAAQY,0BAA0B;MACnCjB,GAAGK,QAAQa,qBACTX,QACAA,QACAP,GAAGK,QAAQc,iBAAiBJ,GAAAA,GAC5BR,MAAAA;MAEFP,GAAGK,QAAQa,qBACTX,QACAA,QACAP,GAAGK,QAAQc,iBAAiBH,KAAAA,GAC5BT,MAAAA;KAEH,GACDA,QACAA,QACAA,MAAAA;KAGJP,GAAGU,UAAUG,KAAK;oBAGTO,YAAY,CAACC,WACxBrB,GAAGK,QAAQiB,0BACTtB,GAAGK,QAAQc,iBAAiBnB,GAAGoB,UAAUC,MAAAA,CAAAA,CAAAA;oBAGhCE,QAAQ,CAACC,eACpBxB,GAAGK,QAAQoB,YACT;IAACzB,GAAGK,QAAQiB,0BAA0BE,UAAAA;KACtC,IAAA;AAEN,GArEiBvB,qBAAAA,mBAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nexport namespace StatementFactory {\n  export const mut = (name: string, initializer?: ts.Expression) =>\n    ts.factory.createVariableStatement(\n      undefined,\n      ts.factory.createVariableDeclarationList(\n        [\n          ts.factory.createVariableDeclaration(\n            name,\n            undefined,\n            undefined,\n            initializer,\n          ),\n        ],\n        ts.NodeFlags.Let,\n      ),\n    );\n\n  export const constant = (name: string, initializer?: ts.Expression) =>\n    ts.factory.createVariableStatement(\n      undefined,\n      ts.factory.createVariableDeclarationList(\n        [\n          ts.factory.createVariableDeclaration(\n            name,\n            undefined,\n            undefined,\n            initializer,\n          ),\n        ],\n        ts.NodeFlags.Const,\n      ),\n    );\n\n  export const entry = (key: string) => (value: string) =>\n    ts.factory.createVariableDeclarationList(\n      [\n        ts.factory.createVariableDeclaration(\n          ts.factory.createArrayBindingPattern([\n            ts.factory.createBindingElement(\n              undefined,\n              undefined,\n              ts.factory.createIdentifier(key),\n              undefined,\n            ),\n            ts.factory.createBindingElement(\n              undefined,\n              undefined,\n              ts.factory.createIdentifier(value),\n              undefined,\n            ),\n          ]),\n          undefined,\n          undefined,\n          undefined,\n        ),\n      ],\n      ts.NodeFlags.Const,\n    );\n\n  export const transpile = (script: string) =>\n    ts.factory.createExpressionStatement(\n      ts.factory.createIdentifier(ts.transpile(script)),\n    );\n\n  export const block = (expression: ts.Expression) =>\n    ts.factory.createBlock(\n      [ts.factory.createExpressionStatement(expression)],\n      true,\n    );\n}\n"]}