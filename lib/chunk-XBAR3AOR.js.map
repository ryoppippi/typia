{"version":3,"sources":["../src/programmers/notations/NotationAssertGeneralProgrammer.ts"],"names":["ts","NotationAssertGeneralProgrammer","write","rename","project","modulo","type","name","init","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","AssertProgrammer","Guardian","createTypeReferenceNode","NotationGeneralProgrammer","returnType","getFullName","checker","createBlock","StatementFactory","constant","options","functional","numeric","createExpressionStatement","createCallExpression","createIdentifier","identifier","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,kCAAAA;mCACFC,QACX,CAACC,WACD,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,MAAeC,SAC7BR,GAAGS,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;IACzDC,iBAAiBC,SAASJ,UAAUL,IAAAA;KAEtCR,GAAGS,QAAQS,wBACTC,0BAA0BC,WAAWjB,MAAAA,EACnCI,QAAQO,YAAYO,YAAYjB,QAAQkB,OAAO,EAAEhB,IAAAA,CAAAA,CAAAA,GAGrDK,QACAX,GAAGS,QAAQc,YAAY;IACrBC,iBAAiBC,SACf,UACAT,iBAAiBd,MAAME,OAAAA,EAASC,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAEvDiB,iBAAiBC,SACf,WACAN,0BAA0BjB,MAAMC,MAAAA,EAAQ;MACtC,GAAGC;MACHsB,SAAS;QACP,GAAGtB,QAAQsB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGvB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBP,GAAGS,QAAQoB,0BACT7B,GAAGS,QAAQqB,qBACT9B,GAAGS,QAAQsB,iBAAiB,QAAA,GAC5BpB,QACA;MACEX,GAAGS,QAAQsB,iBAAiB,OAAA;MAC5Bf,iBAAiBC,SAASe,WAAU;KACrC,CAAA;IAGLR,iBAAiBC,SACf,UACAzB,GAAGS,QAAQqB,qBACT9B,GAAGS,QAAQsB,iBAAiB,SAAA,GAC5BpB,QACA;MAACX,GAAGS,QAAQsB,iBAAiB,OAAA;KAAS,CAAA;IAG1C/B,GAAGS,QAAQwB,sBACTjC,GAAGS,QAAQsB,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GA1DiB9B,oCAAAA,kCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { AssertProgrammer } from \"../AssertProgrammer\";\nimport { NotationGeneralProgrammer } from \"./NotationGeneralProgrammer\";\n\nexport namespace NotationAssertGeneralProgrammer {\n  export const write =\n    (rename: (str: string) => string) =>\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string, init?: ts.Expression) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\")),\n          AssertProgrammer.Guardian.parameter(init),\n        ],\n        ts.factory.createTypeReferenceNode(\n          NotationGeneralProgrammer.returnType(rename)(\n            name ?? TypeFactory.getFullName(project.checker)(type),\n          ),\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"assert\",\n            AssertProgrammer.write(project)(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"general\",\n            NotationGeneralProgrammer.write(rename)({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"assert\"),\n              undefined,\n              [\n                ts.factory.createIdentifier(\"input\"),\n                AssertProgrammer.Guardian.identifier(),\n              ],\n            ),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"general\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}