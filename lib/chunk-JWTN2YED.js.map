{"version":3,"sources":["../src/programmers/http/HttpIsQueryProgrammer.ts"],"names":["ts","HttpIsQueryProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","HttpQueryProgrammer","INPUT_TYPE","createUnionTypeNode","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","TypeFactory","getFullName","checker","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","createCallExpression","createIfStatement","createPrefixUnaryExpression","SyntaxKind","ExclamationToken","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,wBAAAA;yBACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAX,GAAGO,QAAQK,wBAAwBC,oBAAoBC,UAAU,CAAA;KAGrEd,GAAGO,QAAQQ,oBAAoB;IAC7Bf,GAAGO,QAAQS,qBACThB,GAAGO,QAAQU,sBACTjB,GAAGO,QAAQW,oBAAoB,OAAA,CAAA,GAEjCT,QACAT,GAAGO,QAAQY,iBAAiB,UAAA,GAC5B;MACEnB,GAAGO,QAAQK,wBACTN,QAAQc,YAAYC,YAAYlB,QAAQmB,OAAO,EAAEjB,IAAAA,CAAAA;OAGrD,KAAA;IAEFL,GAAGO,QAAQU,sBAAsBjB,GAAGO,QAAQgB,WAAU,CAAA;GACvD,GACDd,QACAT,GAAGO,QAAQiB,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAazB,MAAM;MACjB,GAAGC;MACHyB,SAAS;QACP,GAAGzB,QAAQyB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG1B,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BmB,iBAAiBC,SACf,UACAb,oBAAoBX,MAAM;MACxB,GAAGC;MACHyB,SAAS;QACP,GAAGzB,QAAQyB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAG1B,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBmB,iBAAiBC,SACf,UACA1B,GAAGO,QAAQwB,qBACT/B,GAAGO,QAAQY,iBAAiB,QAAA,GAC5BV,QACA;MAACT,GAAGO,QAAQY,iBAAiB,OAAA;KAAS,CAAA;IAG1CnB,GAAGO,QAAQyB,kBACThC,GAAGO,QAAQ0B,4BACTjC,GAAGkC,WAAWC,kBACdnC,GAAGO,QAAQwB,qBACT/B,GAAGO,QAAQY,iBAAiB,IAAA,GAC5BV,QACA;MAACT,GAAGO,QAAQY,iBAAiB,QAAA;KAAU,CAAA,GAG3CnB,GAAGO,QAAQ6B,sBAAsBpC,GAAGO,QAAQgB,WAAU,CAAA,CAAA;IAExDvB,GAAGO,QAAQ6B,sBACTpC,GAAGO,QAAQY,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GA9EiBlB,0BAAAA,wBAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { HttpQueryProgrammer } from \"./HttpQueryProgrammer\";\n\nexport namespace HttpIsQueryProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(HttpQueryProgrammer.INPUT_TYPE),\n          ),\n        ],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createImportTypeNode(\n            ts.factory.createLiteralTypeNode(\n              ts.factory.createStringLiteral(\"typia\"),\n            ),\n            undefined,\n            ts.factory.createIdentifier(\"Resolved\"),\n            [\n              ts.factory.createTypeReferenceNode(\n                name ?? TypeFactory.getFullName(project.checker)(type),\n              ),\n            ],\n            false,\n          ),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"decode\",\n            HttpQueryProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createPrefixUnaryExpression(\n              ts.SyntaxKind.ExclamationToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"output\")],\n              ),\n            ),\n            ts.factory.createReturnStatement(ts.factory.createNull()),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}