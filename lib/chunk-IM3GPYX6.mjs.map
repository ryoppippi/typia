{"version":3,"sources":["../src/programmers/json/JsonApplicationProgrammer.ts"],"sourcesContent":["import { OpenApi, OpenApiV3 } from \"@samchon/openapi\";\n\nimport { IJsonApplication } from \"../../schemas/json/IJsonApplication\";\nimport { Metadata } from \"../../schemas/metadata/Metadata\";\n\nimport { TransformerError } from \"../../transformers/TransformerError\";\n\nimport { AtomicPredicator } from \"../helpers/AtomicPredicator\";\nimport { application_v30_schema } from \"../internal/application_v30_schema\";\nimport { application_v31_schema } from \"../internal/application_v31_schema\";\n\nexport namespace JsonApplicationProgrammer {\n  export const validate = (meta: Metadata) => {\n    const output: string[] = [];\n    if (\n      meta.atomics.some((a) => a.type === \"bigint\") ||\n      meta.constants.some((c) => c.type === \"bigint\")\n    )\n      output.push(\"JSON schema does not support bigint type.\");\n    if (\n      meta.tuples.some((t) =>\n        t.type.elements.some((e) => e.isRequired() === false),\n      ) ||\n      meta.arrays.some((a) => a.type.value.isRequired() === false)\n    )\n      output.push(\"JSON schema does not support undefined type in array.\");\n    if (meta.maps.length) output.push(\"JSON schema does not support Map type.\");\n    if (meta.sets.length) output.push(\"JSON schema does not support Set type.\");\n    for (const native of meta.natives)\n      if (\n        AtomicPredicator.native(native) === false &&\n        native !== \"Date\" &&\n        native !== \"Blob\" &&\n        native !== \"File\"\n      )\n        output.push(`JSON schema does not support ${native} type.`);\n    return output;\n  };\n\n  export const write = <Version extends \"3.0\" | \"3.1\">(version: Version) =>\n    version === \"3.0\" ? v30 : v31;\n\n  const v30 = (metadatas: Array<Metadata>): IJsonApplication<\"3.0\"> => {\n    const components: OpenApiV3.IComponents = {};\n    const generator = (meta: Metadata): OpenApiV3.IJsonSchema | null =>\n      application_v30_schema(true)(components)({})(meta);\n    return {\n      version: \"3.0\",\n      components,\n      schemas: metadatas.map((meta, i) => {\n        const schema: OpenApiV3.IJsonSchema | null = generator(meta);\n        if (schema === null)\n          throw new TransformerError({\n            code: \"typia.json.application\",\n            message: `invalid type on argument - (${meta.getName()}, ${i})`,\n          });\n        return schema;\n      }),\n    };\n  };\n\n  const v31 = (metadatas: Array<Metadata>): IJsonApplication<\"3.1\"> => {\n    const components: OpenApi.IComponents = {\n      schemas: {},\n    };\n    const generator = (meta: Metadata): OpenApi.IJsonSchema | null =>\n      application_v31_schema(true)(components)({})(meta);\n    return {\n      version: \"3.1\",\n      components,\n      schemas: metadatas.map((meta, i) => {\n        const schema: OpenApi.IJsonSchema | null = generator(meta);\n        if (schema === null)\n          throw new TransformerError({\n            code: \"typia.json.application\",\n            message: `invalid type on argument - (${meta.getName()}, ${i})`,\n          });\n        return schema;\n      }),\n    };\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;UAWiBA,4BAAAA;6BACFC,WAAW,CAACC,SAAAA;AACvB,UAAMC,SAAmB,CAAA;AACzB,QACED,KAAKE,QAAQC,KAAK,CAACC,MAAMA,EAAEC,SAAS,QAAA,KACpCL,KAAKM,UAAUH,KAAK,CAACI,MAAMA,EAAEF,SAAS,QAAA,EAEtCJ,QAAOO,KAAK,2CAAA;AACd,QACER,KAAKS,OAAON,KAAK,CAACO,MAChBA,EAAEL,KAAKM,SAASR,KAAK,CAACS,MAAMA,EAAEC,WAAU,MAAO,KAAA,CAAA,KAEjDb,KAAKc,OAAOX,KAAK,CAACC,MAAMA,EAAEC,KAAKU,MAAMF,WAAU,MAAO,KAAA,EAEtDZ,QAAOO,KAAK,uDAAA;AACd,QAAIR,KAAKgB,KAAKC,OAAQhB,QAAOO,KAAK,wCAAA;AAClC,QAAIR,KAAKkB,KAAKD,OAAQhB,QAAOO,KAAK,wCAAA;AAClC,eAAWW,UAAUnB,KAAKoB,QACxB,KACEC,iBAAiBF,OAAOA,MAAAA,MAAY,SACpCA,WAAW,UACXA,WAAW,UACXA,WAAW,OAEXlB,QAAOO,KAAK,gCAAgCW,MAAAA,QAAc;AAC9D,WAAOlB;EACT;6BAEaqB,QAAQ,CAAgCC,YACnDA,YAAY,QAAQC,MAAMC;AAE5B,QAAMD,MAAM,wBAACE,cAAAA;AACX,UAAMC,aAAoC,CAAC;AAC3C,UAAMC,YAAY,wBAAC5B,SACjB6B,uBAAuB,IAAA,EAAMF,UAAAA,EAAY,CAAC,CAAA,EAAG3B,IAAAA,GAD7B;AAElB,WAAO;MACLuB,SAAS;MACTI;MACAG,SAASJ,UAAUK,IAAI,CAAC/B,MAAMgC,MAAAA;AAC5B,cAAMC,SAAuCL,UAAU5B,IAAAA;AACvD,YAAIiC,WAAW,KACb,OAAM,IAAIC,iBAAiB;UACzBC,MAAM;UACNC,SAAS,+BAA+BpC,KAAKqC,QAAO,CAAA,KAAOL,CAAAA;QAC7D,CAAA;AACF,eAAOC;MACT,CAAA;IACF;EACF,GAjBY;AAmBZ,QAAMR,MAAM,wBAACC,cAAAA;AACX,UAAMC,aAAkC;MACtCG,SAAS,CAAC;IACZ;AACA,UAAMF,YAAY,wBAAC5B,SACjBsC,uBAAuB,IAAA,EAAMX,UAAAA,EAAY,CAAC,CAAA,EAAG3B,IAAAA,GAD7B;AAElB,WAAO;MACLuB,SAAS;MACTI;MACAG,SAASJ,UAAUK,IAAI,CAAC/B,MAAMgC,MAAAA;AAC5B,cAAMC,SAAqCL,UAAU5B,IAAAA;AACrD,YAAIiC,WAAW,KACb,OAAM,IAAIC,iBAAiB;UACzBC,MAAM;UACNC,SAAS,+BAA+BpC,KAAKqC,QAAO,CAAA,KAAOL,CAAAA;QAC7D,CAAA;AACF,eAAOC;MACT,CAAA;IACF;EACF,GAnBY;AAoBd,GAtEiBnC,8BAAAA,4BAAAA,CAAAA,EAAAA;","names":["JsonApplicationProgrammer","validate","meta","output","atomics","some","a","type","constants","c","push","tuples","t","elements","e","isRequired","arrays","value","maps","length","sets","native","natives","AtomicPredicator","write","version","v30","v31","metadatas","components","generator","application_v30_schema","schemas","map","i","schema","TransformerError","code","message","getName","application_v31_schema"]}