{"version":3,"sources":["../src/programmers/json/JsonValidateStringifyProgrammer.ts"],"names":["ts","JsonValidateStringifyProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","TypeFactory","getFullName","checker","createBlock","StatementFactory","constant","ValidateProgrammer","options","functional","numeric","JsonStringifyProgrammer","createAsExpression","createCallExpression","createIdentifier","keyword","createIfStatement","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createReturnStatement"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,kCAAAA;mCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAX,GAAGO,QAAQK,wBACTN,QAAQO,YAAYC,YAAYX,QAAQY,OAAO,EAAEV,IAAAA,CAAAA,CAAAA;KAIvDL,GAAGO,QAAQK,wBAAwB,2BAAA,GACnCH,QACAT,GAAGO,QAAQS,YAAY;IACrBC,iBAAiBC,SACf,YACAC,mBAAmBjB,MAAM;MACvB,GAAGC;MACHiB,SAAS;QACP,GAAGjB,QAAQiB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGlB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BW,iBAAiBC,SACf,aACAK,wBAAwBrB,MAAM;MAC5B,GAAGC;MACHiB,SAAS;QACP,GAAGjB,QAAQiB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGlB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBW,iBAAiBC,SACf,UACAlB,GAAGO,QAAQiB,mBACTxB,GAAGO,QAAQkB,qBACTzB,GAAGO,QAAQmB,iBAAiB,UAAA,GAC5BjB,QACA;MAACT,GAAGO,QAAQmB,iBAAiB,OAAA;KAAS,GAExCb,YAAYc,QAAQ,KAAA,CAAA,CAAA;IAGxB3B,GAAGO,QAAQqB,kBACT5B,GAAGO,QAAQmB,iBAAiB,gBAAA,GAC5B1B,GAAGO,QAAQsB,0BACT7B,GAAGO,QAAQuB,uBACT9B,GAAGO,QAAQmB,iBAAiB,aAAA,GAC5B1B,GAAG+B,WAAWC,aACdhC,GAAGO,QAAQkB,qBACTzB,GAAGO,QAAQmB,iBAAiB,WAAA,GAC5BjB,QACA;MAACT,GAAGO,QAAQmB,iBAAiB,OAAA;KAAS,CAAA,CAAA,CAAA;IAK9C1B,GAAGO,QAAQ0B,sBACTjC,GAAGO,QAAQmB,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GAvEiBzB,oCAAAA,kCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ValidateProgrammer } from \"../ValidateProgrammer\";\nimport { JsonStringifyProgrammer } from \"./JsonStringifyProgrammer\";\n\nexport namespace JsonValidateStringifyProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ),\n        ],\n        ts.factory.createTypeReferenceNode(\"typia.IValidation<string>\"),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"validate\",\n            ValidateProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"stringify\",\n            JsonStringifyProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"validate\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createIdentifier(\"output.success\"),\n            ts.factory.createExpressionStatement(\n              ts.factory.createBinaryExpression(\n                ts.factory.createIdentifier(\"output.data\"),\n                ts.SyntaxKind.EqualsToken,\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"stringify\"),\n                  undefined,\n                  [ts.factory.createIdentifier(\"input\")],\n                ),\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"]}