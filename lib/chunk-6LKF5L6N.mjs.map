{"version":3,"sources":["../src/programmers/helpers/RandomRanger.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\n\nimport { IMetadataTypeTag } from \"../../schemas/metadata/IMetadataTypeTag\";\n\nexport namespace RandomRanger {\n  export interface IDefaults {\n    minimum: number;\n    maximum: number;\n    gap: number;\n  }\n\n  export const length =\n    (coalesce: (method: string) => ts.Expression) =>\n    (defs: IDefaults) =>\n    (acc: length.IAccessors) =>\n    (tags: IMetadataTypeTag[]): ts.Expression | undefined => {\n      const props = {\n        minimum: getter(tags)(acc.minimum),\n        maximum: getter(tags)(acc.maximum),\n      };\n      if (props.minimum === undefined && props.maximum === undefined)\n        return undefined;\n\n      if (props.maximum !== undefined && props.minimum === undefined) {\n        if (props.maximum <= 0) {\n          props.maximum = 0;\n          props.minimum = 0;\n        } else if (props.maximum < defs.gap)\n          props.minimum = defs.minimum === 0 ? 0 : 1;\n      }\n      props.minimum ??= defs.minimum;\n      props.maximum ??= defs.maximum;\n      if (props.maximum < props.minimum) (props.maximum as number) += defs.gap;\n\n      return ts.factory.createCallExpression(coalesce(\"integer\"), undefined, [\n        ExpressionFactory.number(props.minimum),\n        ExpressionFactory.number(props.maximum),\n      ]);\n    };\n  export namespace length {\n    export interface IAccessors {\n      minimum: string;\n      maximum: string;\n    }\n  }\n\n  export const number =\n    (config: number.IConfig) =>\n    (defs: IDefaults) =>\n    (tags: IMetadataTypeTag[]): ts.Expression => {\n      const range = {\n        minimum: {\n          value: getter(tags)(\"minimum\") ?? getter(tags)(\"exclusiveMinimum\"),\n          exclusive: getter(tags)(\"exclusiveMinimum\") !== undefined,\n        },\n        maximum: {\n          value: getter(tags)(\"maximum\") ?? getter(tags)(\"exclusiveMaximum\"),\n          exclusive: getter(tags)(\"exclusiveMaximum\") !== undefined,\n        },\n        stepper: undefined,\n        multiply: getter(tags)(\"multipleOf\"),\n      };\n\n      //----\n      // MULTIPLIERS\n      //----\n      if (range.multiply !== undefined) {\n        const { minimum, maximum } = multiplier(defs.gap)(range)(\n          range.multiply,\n        );\n        return ts.factory.createMultiply(\n          config.transform(range.multiply),\n          config.setter([minimum, maximum]),\n        );\n      }\n\n      //----\n      // RANGE\n      //----\n      // INT\n      const integer = (value: number) => value === Math.floor(value);\n      if (config.type === \"int\") {\n        if (range.minimum.value !== undefined) {\n          if (range.minimum.exclusive) {\n            range.minimum.exclusive = false;\n            if (integer(range.minimum.value)) range.minimum.value += 1;\n          }\n          range.minimum.value = Math.ceil(range.minimum.value);\n        }\n        if (range.maximum.value !== undefined) {\n          if (range.maximum.exclusive) {\n            range.maximum.exclusive = false;\n            if (integer(range.maximum.value)) range.maximum.value -= 1;\n          }\n          range.maximum.value = Math.floor(range.maximum.value);\n        }\n      }\n\n      // UNSIGNED INT\n      if (config.type === \"uint\") {\n        if (range.minimum.value === undefined) range.minimum.value = 0;\n        else if (range.minimum.value <= 0) {\n          range.minimum.value = 0;\n          range.minimum.exclusive = false;\n        }\n      }\n\n      const minimum =\n        range.minimum.value ??\n        (range.maximum.value !== undefined\n          ? range.maximum.value - defs.gap\n          : defs.minimum);\n      const maximum =\n        range.maximum.value ??\n        (range.minimum.value !== undefined\n          ? range.minimum.value + defs.gap\n          : defs.maximum);\n      return config.setter([minimum, maximum]);\n    };\n  export namespace number {\n    export interface IConfig {\n      setter: (args: number[]) => ts.Expression;\n      transform: (value: number) => ts.Expression;\n      type: \"int\" | \"uint\" | \"double\";\n    }\n  }\n}\n\nconst getter =\n  (tags: IMetadataTypeTag[]) =>\n  (kind: string): number | undefined => {\n    const value: bigint | number | undefined = tags.find(\n      (t) =>\n        t.kind === kind &&\n        (typeof t.value === \"number\" || typeof t.value === \"bigint\"),\n    )?.value;\n    return value !== undefined ? Number(value) : undefined;\n  };\n\nconst multiplier = (gap: number) => (range: IRange) => (m: number) => {\n  const minimum: number =\n    range.minimum.value === undefined\n      ? 0\n      : (() => {\n          const x: number = m * Math.ceil(range.minimum.value / m);\n          return range.minimum.exclusive && x === range.minimum.value\n            ? x + m\n            : x;\n        })() / m;\n  const maximum: number =\n    range.maximum.value === undefined\n      ? gap\n      : (() => {\n          const y: number = m * Math.floor(range.maximum.value / m);\n          return range.maximum.exclusive && y === range.maximum.value\n            ? y - m\n            : y;\n        })() / m;\n  return { minimum, maximum };\n};\n\ninterface IRange {\n  minimum: IScalar;\n  maximum: IScalar;\n}\ninterface IScalar {\n  value?: undefined | number;\n  exclusive: boolean;\n}\n"],"mappings":"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","names":["ts","RandomRanger","length","coalesce","defs","acc","tags","props","minimum","getter","maximum","undefined","gap","ts","factory","createCallExpression","ExpressionFactory","number","config","range","value","exclusive","stepper","multiply","multiplier","createMultiply","transform","setter","integer","Math","floor","type","ceil","kind","find","t","Number","m","x","y"]}