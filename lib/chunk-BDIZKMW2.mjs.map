{"version":3,"sources":["../src/utils/ArrayUtil.ts"],"sourcesContent":["export namespace ArrayUtil {\n  export const has = <T>(array: T[], pred: (elem: T) => boolean): boolean =>\n    array.some(pred);\n\n  export const add = <T>(\n    array: T[],\n    value: T,\n    pred: (x: T, y: T) => boolean = (x, y) => x === y,\n  ): boolean => {\n    if (array.some((elem) => pred(elem, value))) return false;\n    array.push(value);\n    return true;\n  };\n\n  export const set = <Key, T>(\n    array: T[],\n    value: T,\n    key: (elem: T) => Key,\n  ): void => {\n    if (array.some((elem) => key(elem) === key(value))) return;\n    array.push(value);\n  };\n\n  export const take = <T>(\n    array: T[],\n    pred: (elem: T) => boolean,\n    init: () => T,\n  ): T => {\n    const index: number = array.findIndex(pred);\n    if (index !== -1) return array[index]!;\n\n    const elem: T = init();\n    array.push(elem);\n    return elem;\n  };\n\n  export const repeat = <T>(\n    count: number,\n    closure: (index: number, count: number) => T,\n  ): T[] => new Array(count).fill(\"\").map((_, index) => closure(index, count));\n}\n"],"mappings":";;UAAiBA,YAAAA;aACFC,MAAM,CAAIC,OAAYC,SACjCD,MAAME,KAAKD,IAAAA;aAEAE,MAAM,CACjBH,OACAI,OACAH,OAAgC,CAACI,GAAGC,MAAMD,MAAMC,MAAC;AAEjD,QAAIN,MAAME,KAAK,CAACK,SAASN,KAAKM,MAAMH,KAAAA,CAAAA,EAAS,QAAO;AACpDJ,UAAMQ,KAAKJ,KAAAA;AACX,WAAO;EACT;aAEaK,MAAM,CACjBT,OACAI,OACAM,QAAAA;AAEA,QAAIV,MAAME,KAAK,CAACK,SAASG,IAAIH,IAAAA,MAAUG,IAAIN,KAAAA,CAAAA,EAAS;AACpDJ,UAAMQ,KAAKJ,KAAAA;EACb;aAEaO,OAAO,CAClBX,OACAC,MACAW,SAAAA;AAEA,UAAMC,QAAgBb,MAAMc,UAAUb,IAAAA;AACtC,QAAIY,UAAU,GAAI,QAAOb,MAAMa,KAAAA;AAE/B,UAAMN,OAAUK,KAAAA;AAChBZ,UAAMQ,KAAKD,IAAAA;AACX,WAAOA;EACT;aAEaQ,SAAS,CACpBC,OACAC,YACQ,IAAIC,MAAMF,KAAAA,EAAOG,KAAK,EAAA,EAAIC,IAAI,CAACC,GAAGR,UAAUI,QAAQJ,OAAOG,KAAAA,CAAAA;AACvE,GAxCiBlB,cAAAA,YAAAA,CAAAA,EAAAA;","names":["ArrayUtil","has","array","pred","some","add","value","x","y","elem","push","set","key","take","init","index","findIndex","repeat","count","closure","Array","fill","map","_"]}