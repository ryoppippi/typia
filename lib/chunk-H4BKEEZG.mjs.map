{"version":3,"sources":["../src/programmers/http/HttpIsFormDataProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { HttpFormDataProgrammer } from \"./HttpFormDataProgrammer\";\n\nexport namespace HttpIsFormDataProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\"FormData\"),\n          ),\n        ],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createImportTypeNode(\n            ts.factory.createLiteralTypeNode(\n              ts.factory.createStringLiteral(\"typia\"),\n            ),\n            undefined,\n            ts.factory.createIdentifier(\"Resolved\"),\n            [\n              ts.factory.createTypeReferenceNode(\n                name ?? TypeFactory.getFullName(project.checker)(type),\n              ),\n            ],\n            false,\n          ),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"decode\",\n            HttpFormDataProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createPrefixUnaryExpression(\n              ts.SyntaxKind.ExclamationToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"output\")],\n              ),\n            ),\n            ts.factory.createReturnStatement(ts.factory.createNull()),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,2BAAAA;4BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAL,GAAGC,QAAQK,wBAAwB,UAAA,CAAA;KAGvCN,GAAGC,QAAQM,oBAAoB;IAC7BP,GAAGC,QAAQO,qBACTR,GAAGC,QAAQQ,sBACTT,GAAGC,QAAQS,oBAAoB,OAAA,CAAA,GAEjCP,QACAH,GAAGC,QAAQU,iBAAiB,UAAA,GAC5B;MACEX,GAAGC,QAAQK,wBACTP,QAAQa,YAAYC,YAAYjB,QAAQkB,OAAO,EAAEhB,IAAAA,CAAAA;OAGrD,KAAA;IAEFE,GAAGC,QAAQQ,sBAAsBT,GAAGC,QAAQc,WAAU,CAAA;GACvD,GACDZ,QACAH,GAAGC,QAAQe,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAaxB,MAAM;MACjB,GAAGC;MACHwB,SAAS;QACP,GAAGxB,QAAQwB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGzB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BkB,iBAAiBC,SACf,UACAK,uBAAuB5B,MAAM;MAC3B,GAAGC;MACHwB,SAAS;QACP,GAAGxB,QAAQwB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGzB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBkB,iBAAiBC,SACf,UACAlB,GAAGC,QAAQuB,qBACTxB,GAAGC,QAAQU,iBAAiB,QAAA,GAC5BR,QACA;MAACH,GAAGC,QAAQU,iBAAiB,OAAA;KAAS,CAAA;IAG1CX,GAAGC,QAAQwB,kBACTzB,GAAGC,QAAQyB,4BACT1B,GAAG2B,WAAWC,kBACd5B,GAAGC,QAAQuB,qBACTxB,GAAGC,QAAQU,iBAAiB,IAAA,GAC5BR,QACA;MAACH,GAAGC,QAAQU,iBAAiB,QAAA;KAAU,CAAA,GAG3CX,GAAGC,QAAQ4B,sBAAsB7B,GAAGC,QAAQc,WAAU,CAAA,CAAA;IAExDf,GAAGC,QAAQ4B,sBACT7B,GAAGC,QAAQU,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GA9EiBjB,6BAAAA,2BAAAA,CAAAA,EAAAA;","names":["ts","HttpIsFormDataProgrammer","write","project","modulo","type","name","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","createUnionTypeNode","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","TypeFactory","getFullName","checker","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","HttpFormDataProgrammer","createCallExpression","createIfStatement","createPrefixUnaryExpression","SyntaxKind","ExclamationToken","createReturnStatement"]}