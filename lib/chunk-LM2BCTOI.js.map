{"version":3,"sources":["../src/executable/setup/PluginConfigurator.ts"],"names":["comments","fs","PluginConfigurator","configure","args","config","parse","promises","readFile","project","compilerOptions","undefined","ReferenceError","plugins","Array","isArray","TypeError","strict","strictNullChecks","oldbie","find","p","transform","push","writeFile","stringify"],"mappings":";;;;;AAAA,OAAOA,cAAc;AACrB,OAAOC,QAAQ;;UAIEC,qBAAAA;AACR,iBAAeC,UACpBC,MAAiC;AAGjC,UAAMC,SAAiCL,SAASM,MAC9C,MAAML,GAAGM,SAASC,SAASJ,KAAKK,SAAU,MAAA,CAAA;AAE5C,UAAMC,kBAAkBL,OAAOK;AAG/B,QAAIA,oBAAoBC,OACtB,OAAM,IAAIC,eACR,GAAGR,KAAKK,OAAO,iDAAiD;AAIpE,UAAMI,WAA0D,MAAA;AAC9D,YAAMA,WAAUH,gBAAgBG;AAGhC,UAAIA,aAAYF,OAAW,QAAQD,gBAAgBG,UAAU,CAAA;eACpD,CAACC,MAAMC,QAAQF,QAAAA,EACtB,OAAM,IAAIG,UACR,yBAAyBZ,KAAKK,OAAO,sBAAsB;AAE/D,aAAOI;IACT,GAAA;AAEA,UAAMI,SAA8BP,gBAAgBO;AAGpD,UAAMC,mBACJR,gBAAgBQ;AAClB,UAAMC,SAA6CN,QAAQO,KACzD,CAACC,MACC,OAAOA,MAAM,YACbA,MAAM,QACNA,EAAEC,cAAc,qBAAA;AAEpB,QACEJ,qBAAqB,UACpBD,WAAW,QAAQC,qBAAqB,SACzCC,WAAWR,OAEX;AAGFD,oBAAgBQ,mBAAmB;AACnC,QAAID,WAAWN,UAAaO,qBAAqBP,OAC/CD,iBAAgBO,SAAS;AAC3B,QAAIE,WAAWR,OACbE,SAAQU,KACNvB,SAASM,MAAM;;;0BAGG,CAAA;AAEtB,UAAML,GAAGM,SAASiB,UAChBpB,KAAKK,SACLT,SAASyB,UAAUpB,QAAQ,MAAM,CAAA,CAAA;EAErC;AA7DsBF;sBAAAA,YAAAA;AA8DxB,GA/DiBD,uBAAAA,qBAAAA,CAAAA,EAAAA","sourcesContent":["import comments from \"comment-json\";\nimport fs from \"fs\";\n\nimport { TypiaSetupWizard } from \"../TypiaSetupWizard\";\n\nexport namespace PluginConfigurator {\n  export async function configure(\n    args: TypiaSetupWizard.IArguments,\n  ): Promise<void> {\n    // GET COMPILER-OPTIONS\n    const config: comments.CommentObject = comments.parse(\n      await fs.promises.readFile(args.project!, \"utf8\"),\n    ) as comments.CommentObject;\n    const compilerOptions = config.compilerOptions as\n      | comments.CommentObject\n      | undefined;\n    if (compilerOptions === undefined)\n      throw new ReferenceError(\n        `${args.project} file does not have \"compilerOptions\" property.`,\n      );\n\n    // PREPARE PLUGINS\n    const plugins: comments.CommentArray<comments.CommentObject> = (() => {\n      const plugins = compilerOptions.plugins as\n        | comments.CommentArray<comments.CommentObject>\n        | undefined;\n      if (plugins === undefined) return (compilerOptions.plugins = [] as any);\n      else if (!Array.isArray(plugins))\n        throw new TypeError(\n          `\"plugins\" property of ${args.project} must be array type.`,\n        );\n      return plugins;\n    })();\n\n    const strict: boolean | undefined = compilerOptions.strict as\n      | boolean\n      | undefined;\n    const strictNullChecks: boolean | undefined =\n      compilerOptions.strictNullChecks as boolean | undefined;\n    const oldbie: comments.CommentObject | undefined = plugins.find(\n      (p) =>\n        typeof p === \"object\" &&\n        p !== null &&\n        p.transform === \"typia/lib/transform\",\n    );\n    if (\n      strictNullChecks !== false &&\n      (strict === true || strictNullChecks === true) &&\n      oldbie !== undefined\n    )\n      return;\n\n    // DO CONFIGURE\n    compilerOptions.strictNullChecks = true;\n    if (strict === undefined && strictNullChecks === undefined)\n      compilerOptions.strict = true;\n    if (oldbie === undefined)\n      plugins.push(\n        comments.parse(`\n                        {\n                            \"transform\": \"typia/lib/transform\"\n                        }`) as comments.CommentObject,\n      );\n    await fs.promises.writeFile(\n      args.project!,\n      comments.stringify(config, null, 2),\n    );\n  }\n}\n"]}