{"version":3,"sources":["../src/functional/$ProtobufSizer.ts"],"sourcesContent":["import { $strlen } from \"./$strlen\";\nimport { IProtobufWriter } from \"./IProtobufWriter\";\n\n/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedSizer.ts\nexport class $ProtobufSizer implements IProtobufWriter {\n  /**\n   * Total length.\n   */\n  public len: number;\n\n  /**\n   * Position stack.\n   */\n  public readonly pos: Array<number>;\n\n  /**\n   * Variable length list.\n   */\n  public readonly varlen: Array<number>;\n\n  /**\n   * Variable length index stack.\n   */\n  public readonly varlenidx: Array<number>;\n\n  public constructor(length: number = 0) {\n    this.len = length;\n    this.pos = [];\n    this.varlen = [];\n    this.varlenidx = [];\n  }\n\n  public bool(): void {\n    this.len += 1;\n  }\n  public int32(value: number): void {\n    if (value < 0) {\n      // 10 bytes to encode negative number\n      this.len += 10;\n    } else {\n      this.varint32(value);\n    }\n  }\n  public sint32(value: number): void {\n    this.varint32((value << 1) ^ (value >> 31));\n  }\n  public uint32(value: number): void {\n    this.varint32(value);\n  }\n\n  public int64(value: bigint | number): void {\n    this.varint64(typeof value === \"number\" ? BigInt(value) : value);\n  }\n  public sint64(value: bigint | number): void {\n    if (typeof value === \"number\") value = BigInt(value);\n    this.varint64((value << BigInt(1)) ^ (value >> BigInt(63)));\n  }\n  public uint64(value: bigint | number): void {\n    this.varint64(typeof value === \"number\" ? BigInt(value) : value);\n  }\n\n  // public fixed32(_value: number): void {\n  //     this.len += 4;\n  // }\n  // public sfixed32(_value: number): void {\n  //     this.len += 4;\n  // }\n  // public fixed64(_value: number | bigint): void {\n  //     this.len += 8;\n  // }\n  // public sfixed64(_value: number | bigint): void {\n  //     this.len += 8;\n  // }\n  public float(_value: number): void {\n    this.len += 4;\n  }\n  public double(_value: number): void {\n    this.len += 8;\n  }\n\n  public bytes(value: Uint8Array): void {\n    this.uint32(value.byteLength);\n    this.len += value.byteLength;\n  }\n  public string(value: string): void {\n    const len: number = $strlen(value);\n    this.varlen.push(len);\n    this.uint32(len);\n    this.len += len;\n  }\n\n  public fork(): void {\n    this.pos.push(this.len); // save current position\n    this.varlenidx.push(this.varlen.length); // save current index in varlen array\n    this.varlen.push(0); // add 0 length to varlen array (to be updated in ldelim())\n  }\n\n  public ldelim(): void {\n    if (!(this.pos.length && this.varlenidx.length))\n      throw new Error(\n        \"Error on typia.protobuf.encode(): missing fork() before ldelim() call.\",\n      );\n\n    const endPos = this.len; // current position is end position\n    const startPos = this.pos.pop()!; // get start position from stack\n    const idx = this.varlenidx.pop()!; // get varlen index from stack\n    const len = endPos - startPos; // calculate length\n\n    this.varlen[idx] = len; // update variable length\n    this.uint32(len); // add uint32 that should be called in fork()\n  }\n\n  public reset(): void {\n    this.len = 0;\n    // re-use arrays\n    this.pos.length = 0;\n    this.varlen.length = 0;\n    this.varlenidx.length = 0;\n  }\n\n  private varint32(value: number): void {\n    this.len +=\n      value < 0\n        ? 10 // 10 bits with leading 1's\n        : value < 0x80\n          ? 1\n          : value < 0x4000\n            ? 2\n            : value < 0x200000\n              ? 3\n              : value < 0x10000000\n                ? 4\n                : 5;\n  }\n\n  private varint64(val: bigint): void {\n    val = BigInt.asUintN(64, val);\n    while (val > NX7F) {\n      ++this.len;\n      val = val >> ND07;\n    }\n    ++this.len;\n  }\n}\n\nconst ND07 = /** @__PURE__ */ BigInt(7);\nconst NX7F = /** @__PURE__ */ BigInt(0x7f);\n"],"mappings":";;;;;;;;AAIO,IAAMA,iBAAN,MAAMA;EAJb,OAIaA;;;;;;EAIJC;;;;EAKSC;;;;EAKAC;;;;EAKAC;EAEhB,YAAmBC,SAAiB,GAAG;AACrC,SAAKJ,MAAMI;AACX,SAAKH,MAAM,CAAA;AACX,SAAKC,SAAS,CAAA;AACd,SAAKC,YAAY,CAAA;EACnB;EAEOE,OAAa;AAClB,SAAKL,OAAO;EACd;EACOM,MAAMC,OAAqB;AAChC,QAAIA,QAAQ,GAAG;AAEb,WAAKP,OAAO;IACd,OAAO;AACL,WAAKQ,SAASD,KAAAA;IAChB;EACF;EACOE,OAAOF,OAAqB;AACjC,SAAKC,SAAUD,SAAS,IAAMA,SAAS,EAAA;EACzC;EACOG,OAAOH,OAAqB;AACjC,SAAKC,SAASD,KAAAA;EAChB;EAEOI,MAAMJ,OAA8B;AACzC,SAAKK,SAAS,OAAOL,UAAU,WAAWM,OAAON,KAAAA,IAASA,KAAAA;EAC5D;EACOO,OAAOP,OAA8B;AAC1C,QAAI,OAAOA,UAAU,SAAUA,SAAQM,OAAON,KAAAA;AAC9C,SAAKK,SAAUL,SAASM,OAAO,CAAA,IAAON,SAASM,OAAO,EAAA,CAAA;EACxD;EACOE,OAAOR,OAA8B;AAC1C,SAAKK,SAAS,OAAOL,UAAU,WAAWM,OAAON,KAAAA,IAASA,KAAAA;EAC5D;;;;;;;;;;;;;EAcOS,MAAMC,QAAsB;AACjC,SAAKjB,OAAO;EACd;EACOkB,OAAOD,QAAsB;AAClC,SAAKjB,OAAO;EACd;EAEOmB,MAAMZ,OAAyB;AACpC,SAAKG,OAAOH,MAAMa,UAAU;AAC5B,SAAKpB,OAAOO,MAAMa;EACpB;EACOC,OAAOd,OAAqB;AACjC,UAAMP,MAAcsB,QAAQf,KAAAA;AAC5B,SAAKL,OAAOqB,KAAKvB,GAAAA;AACjB,SAAKU,OAAOV,GAAAA;AACZ,SAAKA,OAAOA;EACd;EAEOwB,OAAa;AAClB,SAAKvB,IAAIsB,KAAK,KAAKvB,GAAG;AACtB,SAAKG,UAAUoB,KAAK,KAAKrB,OAAOE,MAAM;AACtC,SAAKF,OAAOqB,KAAK,CAAA;EACnB;EAEOE,SAAe;AACpB,QAAI,EAAE,KAAKxB,IAAIG,UAAU,KAAKD,UAAUC,QACtC,OAAM,IAAIsB,MACR,wEAAA;AAGJ,UAAMC,SAAS,KAAK3B;AACpB,UAAM4B,WAAW,KAAK3B,IAAI4B,IAAG;AAC7B,UAAMC,MAAM,KAAK3B,UAAU0B,IAAG;AAC9B,UAAM7B,MAAM2B,SAASC;AAErB,SAAK1B,OAAO4B,GAAAA,IAAO9B;AACnB,SAAKU,OAAOV,GAAAA;EACd;EAEO+B,QAAc;AACnB,SAAK/B,MAAM;AAEX,SAAKC,IAAIG,SAAS;AAClB,SAAKF,OAAOE,SAAS;AACrB,SAAKD,UAAUC,SAAS;EAC1B;EAEQI,SAASD,OAAqB;AACpC,SAAKP,OACHO,QAAQ,IACJ,KACAA,QAAQ,MACN,IACAA,QAAQ,QACN,IACAA,QAAQ,UACN,IACAA,QAAQ,YACN,IACA;EAChB;EAEQK,SAASoB,KAAmB;AAClCA,UAAMnB,OAAOoB,QAAQ,IAAID,GAAAA;AACzB,WAAOA,MAAME,MAAM;AACjB,QAAE,KAAKlC;AACPgC,YAAMA,OAAOG;IACf;AACA,MAAE,KAAKnC;EACT;AACF;AAEA,IAAMmC,OAAwBtB,uBAAO,CAAA;AACrC,IAAMqB,OAAwBrB,uBAAO,GAAA;","names":["$ProtobufSizer","len","pos","varlen","varlenidx","length","bool","int32","value","varint32","sint32","uint32","int64","varint64","BigInt","sint64","uint64","float","_value","double","bytes","byteLength","string","$strlen","push","fork","ldelim","Error","endPos","startPos","pop","idx","reset","val","asUintN","NX7F","ND07"]}