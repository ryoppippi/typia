{"version":3,"sources":["../src/programmers/internal/check_template.ts"],"names":["ts","check_template","templates","input","conditions","factory","createStrictEquality","createStringLiteral","createTypeOfExpression","internal","map","tpl","createCallExpression","createIdentifier","template_to_pattern","undefined","push","length","reduce","x","y","createLogicalOr","expression","createLogicalAnd","expected","child","isConstant","size","constants","values","value","getName","join","split"],"mappings":";;;;;;;;AAAA,OAAOA,QAAQ;AAUR,IAAMC,iBACX,wBAACC,cACD,CAACC,UAAAA;AAEC,QAAMC,aAA8B;IAClCJ,GAAGK,QAAQC,qBACTN,GAAGK,QAAQE,oBAAoB,QAAA,GAC/BP,GAAGK,QAAQG,uBAAuBL,KAAAA,CAAAA;;AAKtC,QAAMM,WAA4BP,UAAUQ,IAAI,CAACC,QAC/CX,GAAGK,QAAQO,qBACTZ,GAAGK,QAAQQ,iBACT,WAAWC,oBAAoB,IAAA,EAAMH,GAAAA,CAAAA,SAAa,GAEpDI,QACA;IAACZ;GAAM,CAAA;AAGXC,aAAWY,KACTP,SAASQ,WAAW,IAChBR,SAAS,CAAA,IACTA,SAASS,OAAO,CAACC,GAAGC,MAAMpB,GAAGK,QAAQgB,gBAAgBF,GAAGC,CAAAA,CAAAA,CAAAA;AAI9D,SAAO;IACLE,YAAYlB,WAAWc,OAAO,CAACC,GAAGC,MAChCpB,GAAGK,QAAQkB,iBAAiBJ,GAAGC,CAAAA,CAAAA;IAEjChB,YAAY,CAAA;IACZoB,UAAUtB,UACPQ,IACC,CAACC,QACC,MACAA,IACGD,IAAI,CAACe,UACJA,MAAMC,WAAU,KAAMD,MAAME,KAAI,MAAO,IACnCF,MAAMG,UAAU,CAAA,EAAIC,OAAO,CAAA,EAAIC,QAC/B,MAAML,MAAMM,QAAO,CAAA,GAAM,EAE9BC,KAAK,EAAA,EACLC,MAAM,GAAA,EACND,KAAK,KAAA,IACR,GAAA,EAEHA,KAAK,KAAA;EACV;AACF,GAjDA","sourcesContent":["import ts from \"typescript\";\n\nimport { Metadata } from \"../../schemas/metadata/Metadata\";\n\nimport { ICheckEntry } from \"../helpers/ICheckEntry\";\nimport { template_to_pattern } from \"./template_to_pattern\";\n\n/**\n * @internal\n */\nexport const check_template =\n  (templates: Metadata[][]) =>\n  (input: ts.Expression): ICheckEntry => {\n    // TYPEOF STRING & TAGS\n    const conditions: ts.Expression[] = [\n      ts.factory.createStrictEquality(\n        ts.factory.createStringLiteral(\"string\"),\n        ts.factory.createTypeOfExpression(input),\n      ),\n    ];\n\n    // TEMPLATES\n    const internal: ts.Expression[] = templates.map((tpl) =>\n      ts.factory.createCallExpression(\n        ts.factory.createIdentifier(\n          `RegExp(/${template_to_pattern(true)(tpl)}/).test`,\n        ),\n        undefined,\n        [input],\n      ),\n    );\n    conditions.push(\n      internal.length === 1\n        ? internal[0]!\n        : internal.reduce((x, y) => ts.factory.createLogicalOr(x, y)),\n    );\n\n    // COMBINATION\n    return {\n      expression: conditions.reduce((x, y) =>\n        ts.factory.createLogicalAnd(x, y),\n      ),\n      conditions: [],\n      expected: templates\n        .map(\n          (tpl) =>\n            \"`\" +\n            tpl\n              .map((child) =>\n                child.isConstant() && child.size() === 1\n                  ? child.constants[0]!.values[0]!.value\n                  : `$\\{${child.getName()}\\}`,\n              )\n              .join(\"\")\n              .split(\"`\")\n              .join(\"\\\\`\") +\n            \"`\",\n        )\n        .join(\" | \"),\n    };\n  };\n"]}