{"version":3,"sources":["../src/programmers/json/JsonValidateStringifyProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ValidateProgrammer } from \"../ValidateProgrammer\";\nimport { JsonStringifyProgrammer } from \"./JsonStringifyProgrammer\";\n\nexport namespace JsonValidateStringifyProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ),\n        ],\n        ts.factory.createTypeReferenceNode(\"typia.IValidation<string>\"),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"validate\",\n            ValidateProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"stringify\",\n            JsonStringifyProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"validate\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              TypeFactory.keyword(\"any\"),\n            ),\n          ),\n          ts.factory.createIfStatement(\n            ts.factory.createIdentifier(\"output.success\"),\n            ts.factory.createExpressionStatement(\n              ts.factory.createBinaryExpression(\n                ts.factory.createIdentifier(\"output.data\"),\n                ts.SyntaxKind.EqualsToken,\n                ts.factory.createCallExpression(\n                  ts.factory.createIdentifier(\"stringify\"),\n                  undefined,\n                  [ts.factory.createIdentifier(\"input\")],\n                ),\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createIdentifier(\"output\"),\n          ),\n        ]),\n      );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,kCAAAA;mCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdC,GAAGC,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAL,GAAGC,QAAQK,wBACTP,QAAQQ,YAAYC,YAAYZ,QAAQa,OAAO,EAAEX,IAAAA,CAAAA,CAAAA;KAIvDE,GAAGC,QAAQK,wBAAwB,2BAAA,GACnCH,QACAH,GAAGC,QAAQS,YAAY;IACrBC,iBAAiBC,SACf,YACAC,mBAAmBlB,MAAM;MACvB,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1BY,iBAAiBC,SACf,aACAK,wBAAwBtB,MAAM;MAC5B,GAAGC;MACHkB,SAAS;QACP,GAAGlB,QAAQkB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGnB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBY,iBAAiBC,SACf,UACAZ,GAAGC,QAAQiB,mBACTlB,GAAGC,QAAQkB,qBACTnB,GAAGC,QAAQmB,iBAAiB,UAAA,GAC5BjB,QACA;MAACH,GAAGC,QAAQmB,iBAAiB,OAAA;KAAS,GAExCb,YAAYc,QAAQ,KAAA,CAAA,CAAA;IAGxBrB,GAAGC,QAAQqB,kBACTtB,GAAGC,QAAQmB,iBAAiB,gBAAA,GAC5BpB,GAAGC,QAAQsB,0BACTvB,GAAGC,QAAQuB,uBACTxB,GAAGC,QAAQmB,iBAAiB,aAAA,GAC5BpB,GAAGyB,WAAWC,aACd1B,GAAGC,QAAQkB,qBACTnB,GAAGC,QAAQmB,iBAAiB,WAAA,GAC5BjB,QACA;MAACH,GAAGC,QAAQmB,iBAAiB,OAAA;KAAS,CAAA,CAAA,CAAA;IAK9CpB,GAAGC,QAAQ0B,sBACT3B,GAAGC,QAAQmB,iBAAiB,QAAA,CAAA;GAE/B,CAAA;AAET,GAvEiB1B,oCAAAA,kCAAAA,CAAAA,EAAAA;","names":["ts","JsonValidateStringifyProgrammer","write","project","modulo","type","name","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","TypeFactory","getFullName","checker","createBlock","StatementFactory","constant","ValidateProgrammer","options","functional","numeric","JsonStringifyProgrammer","createAsExpression","createCallExpression","createIdentifier","keyword","createIfStatement","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createReturnStatement"]}