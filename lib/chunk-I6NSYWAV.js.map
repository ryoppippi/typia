{"version":3,"sources":["../src/programmers/internal/check_object.ts"],"names":["ts","check_object","props","project","importer","input","entries","regular","filter","entry","key","isSoleLiteral","dynamic","flags","map","expression","equals","length","positive","reduce","push","check_dynamic_properties","expressions","assert","check_everything","factory","createArrayLiteralExpression"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAQ;AAYR,IAAMC,eACX,wBAACC,UACD,CAACC,YACD,CAACC,aACD,CAACC,OAAsBC,YAAAA;AAErB,QAAMC,UAAUD,QAAQE,OAAO,CAACC,UAAUA,MAAMC,IAAIC,cAAa,CAAA;AACjE,QAAMC,UAAUN,QAAQE,OAAO,CAACC,UAAU,CAACA,MAAMC,IAAIC,cAAa,CAAA;AAClE,QAAME,QAAyBN,QAAQO,IAAI,CAACL,UAAUA,MAAMM,UAAU;AAGtE,MAAIb,MAAMc,WAAW,SAASJ,QAAQK,WAAW,EAC/C,QAAOV,QAAQU,WAAW,IAAIf,MAAMgB,WAAWC,OAAOjB,KAAAA,EAAOW,KAAAA;AAG/DA,QAAMO,KACJC,yBAAyBnB,KAAAA,EAAOC,OAAAA,EAASC,QAAAA,EACvCC,OACAE,SACAK,OAAAA,CAAAA;AAGJ,SAAOO,OAAOjB,KAAAA,EAAOW,KAAAA;AACvB,GAtBA;AA2CF,IAAMM,SACJ,wBAACjB,UAA+B,CAACoB,gBAC/BpB,MAAMqB,SACFD,YAAYH,OAAOjB,MAAMiB,MAAM,IAC/BK,iBAAiBxB,GAAGyB,QAAQC,6BAA6BJ,WAAAA,CAAAA,GAH/D","sourcesContent":["import ts from \"typescript\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { FunctionImporter } from \"../helpers/FunctionImporter\";\nimport { IExpressionEntry } from \"../helpers/IExpressionEntry\";\nimport { check_dynamic_properties } from \"./check_dynamic_properties\";\nimport { check_everything } from \"./check_everything\";\n\n/**\n * @internal\n */\nexport const check_object =\n  (props: check_object.IProps) =>\n  (project: IProject) =>\n  (importer: FunctionImporter) =>\n  (input: ts.Expression, entries: IExpressionEntry<ts.Expression>[]) => {\n    // PREPARE ASSETS\n    const regular = entries.filter((entry) => entry.key.isSoleLiteral());\n    const dynamic = entries.filter((entry) => !entry.key.isSoleLiteral());\n    const flags: ts.Expression[] = regular.map((entry) => entry.expression);\n\n    // REGULAR WITHOUT DYNAMIC PROPERTIES\n    if (props.equals === false && dynamic.length === 0)\n      return regular.length === 0 ? props.positive : reduce(props)(flags);\n\n    // CHECK DYNAMIC PROPERTIES\n    flags.push(\n      check_dynamic_properties(props)(project)(importer)(\n        input,\n        regular,\n        dynamic,\n      ),\n    );\n    return reduce(props)(flags);\n  };\n\n/**\n * @internal\n */\nexport namespace check_object {\n  export interface IProps {\n    equals: boolean;\n    assert: boolean;\n    undefined: boolean;\n    halt?: undefined | ((exp: ts.Expression) => ts.Expression);\n    reduce: (a: ts.Expression, b: ts.Expression) => ts.Expression;\n    positive: ts.Expression;\n    superfluous: (value: ts.Expression) => ts.Expression;\n    entries?: undefined | ts.Identifier;\n  }\n}\n\n/**\n * @internal\n */\nconst reduce =\n  (props: check_object.IProps) => (expressions: ts.Expression[]) =>\n    props.assert\n      ? expressions.reduce(props.reduce)\n      : check_everything(ts.factory.createArrayLiteralExpression(expressions));\n"]}