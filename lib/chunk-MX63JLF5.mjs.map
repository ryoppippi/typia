{"version":3,"sources":["../src/factories/MetadataCollection.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IMetadataComponents } from \"../schemas/metadata/IMetadataComponents\";\nimport { Metadata } from \"../schemas/metadata/Metadata\";\nimport { MetadataAlias } from \"../schemas/metadata/MetadataAlias\";\nimport { MetadataArrayType } from \"../schemas/metadata/MetadataArrayType\";\nimport { MetadataObject } from \"../schemas/metadata/MetadataObject\";\nimport { MetadataTupleType } from \"../schemas/metadata/MetadataTupleType\";\n\nimport { Writable } from \"../typings/Writable\";\n\nimport { MapUtil } from \"../utils/MapUtil\";\n\nimport { CommentFactory } from \"./CommentFactory\";\nimport { TypeFactory } from \"./TypeFactory\";\n\nexport class MetadataCollection {\n  private readonly objects_: Map<ts.Type, MetadataObject>;\n  private readonly object_unions_: Map<string, MetadataObject[]>;\n  private readonly aliases_: Map<ts.Type, MetadataAlias>;\n  private readonly arrays_: Map<ts.Type, MetadataArrayType>;\n  private readonly tuples_: Map<ts.Type, MetadataTupleType>;\n\n  private readonly names_: Map<string, Map<ts.Type, string>>;\n  private object_index_: number;\n  private recursive_array_index_: number;\n  private recursive_tuple_index_: number;\n\n  public constructor(\n    private readonly options?: Partial<MetadataCollection.IOptions>,\n  ) {\n    this.objects_ = new Map();\n    this.object_unions_ = new Map();\n    this.aliases_ = new Map();\n    this.arrays_ = new Map();\n    this.tuples_ = new Map();\n\n    this.names_ = new Map();\n    this.object_index_ = 0;\n    this.recursive_array_index_ = 0;\n    this.recursive_tuple_index_ = 0;\n  }\n\n  /* -----------------------------------------------------------\n        ACCESSORS\n    ----------------------------------------------------------- */\n  public aliases(): MetadataAlias[] {\n    return [...this.aliases_.values()];\n  }\n\n  public objects(): MetadataObject[] {\n    return [...this.objects_.values()];\n  }\n\n  public unions(): MetadataObject[][] {\n    return [...this.object_unions_.values()];\n  }\n\n  public arrays(): MetadataArrayType[] {\n    return [...this.arrays_.values()];\n  }\n\n  public tuples(): MetadataTupleType[] {\n    return [...this.tuples_.values()];\n  }\n\n  private getName(checker: ts.TypeChecker, type: ts.Type): string {\n    const name: string = (() => {\n      const str: string = TypeFactory.getFullName(checker)(type);\n      return this.options?.replace ? this.options.replace(str) : str;\n    })();\n\n    const duplicates: Map<ts.Type, string> = MapUtil.take(this.names_)(\n      name,\n      () => new Map(),\n    );\n    const oldbie: string | undefined = duplicates.get(type);\n    if (oldbie !== undefined) return oldbie;\n\n    const addicted: string = duplicates.size\n      ? `${name}.o${duplicates.size}`\n      : name;\n    duplicates.set(type, addicted);\n    return addicted;\n  }\n\n  /**\n   * @internal\n   */\n  public getUnionIndex(meta: Metadata): number {\n    const key: string = meta.objects.map((obj) => obj.name).join(\" | \");\n    MapUtil.take(this.object_unions_)(key, () => meta.objects);\n    return [...this.object_unions_.keys()].indexOf(key);\n  }\n\n  /* -----------------------------------------------------------\n        INSTANCES\n    ----------------------------------------------------------- */\n  public emplace(\n    checker: ts.TypeChecker,\n    type: ts.Type,\n  ): [MetadataObject, boolean] {\n    const oldbie = this.objects_.get(type);\n    if (oldbie !== undefined) return [oldbie, false];\n\n    const $id: string = this.getName(checker, type);\n    const obj: MetadataObject = MetadataObject.create({\n      name: $id,\n      properties: [],\n      description:\n        (type.aliasSymbol && CommentFactory.description(type.aliasSymbol)) ??\n        (type.symbol && CommentFactory.description(type.symbol)) ??\n        undefined,\n      jsDocTags:\n        type.aliasSymbol?.getJsDocTags() ?? type.symbol?.getJsDocTags() ?? [],\n      validated: false,\n      index: this.object_index_++,\n      recursive: null!,\n      nullables: [],\n    });\n    this.objects_.set(type, obj);\n    return [obj, true];\n  }\n\n  public emplaceAlias(\n    checker: ts.TypeChecker,\n    type: ts.Type,\n    symbol: ts.Symbol,\n  ): [MetadataAlias, boolean, (meta: Metadata) => void] {\n    const oldbie = this.aliases_.get(type);\n    if (oldbie !== undefined) return [oldbie, false, () => {}];\n\n    const $id: string = this.getName(checker, type);\n    const alias: MetadataAlias = MetadataAlias.create({\n      name: $id,\n      value: null!,\n      description: CommentFactory.description(symbol) ?? null,\n      recursive: null!,\n      nullables: [],\n      jsDocTags: symbol.getJsDocTags() ?? [],\n    });\n    this.aliases_.set(type, alias);\n    return [alias, true, (meta) => (Writable(alias).value = meta)];\n  }\n\n  public emplaceArray(\n    checker: ts.TypeChecker,\n    type: ts.Type,\n  ): [MetadataArrayType, boolean, (meta: Metadata) => void] {\n    const oldbie = this.arrays_.get(type);\n    if (oldbie !== undefined) return [oldbie, false, () => {}];\n\n    const $id = this.getName(checker, type);\n    const array: MetadataArrayType = MetadataArrayType.create({\n      name: $id,\n      value: null!,\n      index: null,\n      recursive: null!,\n      nullables: [],\n    });\n    this.arrays_.set(type, array);\n    return [array, true, (meta) => (Writable(array).value = meta)];\n  }\n\n  public emplaceTuple(\n    checker: ts.TypeChecker,\n    type: ts.TupleType,\n  ): [MetadataTupleType, boolean, (elements: Metadata[]) => void] {\n    const oldbie = this.tuples_.get(type);\n    if (oldbie !== undefined) return [oldbie, false, () => {}];\n\n    const $id = this.getName(checker, type);\n    const tuple: MetadataTupleType = MetadataTupleType.create({\n      name: $id,\n      elements: null!,\n      index: null,\n      recursive: null!,\n      nullables: [],\n    });\n    this.tuples_.set(type, tuple);\n    return [tuple, true, (elements) => (Writable(tuple).elements = elements)];\n  }\n\n  /**\n   * @internal\n   */\n  public setObjectRecursive(obj: MetadataObject, recursive: boolean): void {\n    Writable(obj).recursive = recursive;\n  }\n\n  /**\n   * @internal\n   */\n  public setAliasRecursive(alias: MetadataAlias, recursive: boolean): void {\n    Writable(alias).recursive = recursive;\n  }\n\n  /**\n   * @internal\n   */\n  public setArrayRecursive(array: MetadataArrayType, recursive: boolean): void {\n    Writable(array).recursive = recursive;\n    if (recursive) Writable(array).index = this.recursive_array_index_++;\n  }\n\n  public setTupleRecursive(tuple: MetadataTupleType, recursive: boolean): void {\n    Writable(tuple).recursive = recursive;\n    if (recursive) Writable(tuple).index = this.recursive_tuple_index_++;\n  }\n\n  public toJSON(): IMetadataComponents {\n    return {\n      objects: this.objects().map((o) => o.toJSON()),\n      aliases: this.aliases().map((d) => d.toJSON()),\n      arrays: [...this.arrays_.values()].map((a) => a.toJSON()),\n      tuples: [...this.tuples_.values()].map((t) => t.toJSON()),\n    };\n  }\n}\nexport namespace MetadataCollection {\n  export interface IOptions {\n    replace?(str: string): string;\n  }\n\n  export const replace = (str: string): string => {\n    let replaced: string = str;\n    for (const [before] of REPLACERS)\n      replaced = replaced.split(before).join(\"\");\n    if (replaced.length !== 0) return replaced;\n\n    for (const [before, after] of REPLACERS)\n      str = str.split(before).join(after);\n    return str;\n  };\n\n  export const escape = (str: string): string => {\n    for (const [before, after] of REPLACERS)\n      if (after !== \"\") str = str.split(after).join(before);\n    return str;\n  };\n}\nconst REPLACERS: [string, string][] = [\n  [\"$\", \"_dollar_\"],\n  [\"&\", \"_and_\"],\n  [\"|\", \"_or_\"],\n  [\"{\", \"_blt_\"],\n  [\"}\", \"_bgt_\"],\n  [\"<\", \"_lt_\"],\n  [\">\", \"_gt_\"],\n  [\"[\", \"_alt_\"],\n  [\"]\", \"_agt_\"],\n  [\",\", \"_comma_\"],\n  [\"`\", \"_backquote_\"],\n  [\"'\", \"_singlequote_\"],\n  ['\"', \"_doublequote_\"],\n  [\" \", \"_space_\"],\n  [\"?\", \"_question_\"],\n  [\":\", \"_colon_\"],\n  [\";\", \"_semicolon_\"],\n];\n"],"mappings":"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","names":["MetadataCollection","objects_","object_unions_","aliases_","arrays_","tuples_","names_","object_index_","recursive_array_index_","recursive_tuple_index_","options","Map","aliases","values","objects","unions","arrays","tuples","getName","checker","type","name","str","TypeFactory","getFullName","replace","duplicates","MapUtil","take","oldbie","get","undefined","addicted","size","set","getUnionIndex","meta","key","map","obj","join","keys","indexOf","emplace","$id","MetadataObject","create","properties","description","aliasSymbol","CommentFactory","symbol","jsDocTags","getJsDocTags","validated","index","recursive","nullables","emplaceAlias","alias","MetadataAlias","value","Writable","emplaceArray","array","MetadataArrayType","emplaceTuple","tuple","MetadataTupleType","elements","setObjectRecursive","setAliasRecursive","setArrayRecursive","setTupleRecursive","toJSON","o","d","a","t","replaced","before","REPLACERS","split","length","after","escape"]}