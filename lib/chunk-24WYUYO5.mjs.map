{"version":3,"sources":["../src/functional/$FormDataReader/$FormDataReader.ts"],"sourcesContent":["export const boolean = (\n  input: string | File | null,\n): boolean | null | undefined =>\n  input instanceof File\n    ? (input as any)\n    : input === null\n      ? undefined\n      : input === \"null\"\n        ? null\n        : input.length === 0\n          ? true\n          : input === \"true\" || input === \"1\"\n            ? true\n            : input === \"false\" || input === \"0\"\n              ? false\n              : (input as any); // wrong type\n\nexport const number = (\n  input: string | File | null,\n): number | null | undefined =>\n  input instanceof File\n    ? (input as any)\n    : !!input?.length\n      ? input === \"null\"\n        ? null\n        : (toNumber(input) as any)\n      : undefined;\n\nexport const bigint = (\n  input: string | File | null,\n): bigint | null | undefined =>\n  input instanceof File\n    ? (input as any)\n    : !!input?.length\n      ? input === \"null\"\n        ? null\n        : (toBigint(input) as any)\n      : undefined;\n\nexport const string = (\n  input: string | File | null,\n): string | null | undefined =>\n  input instanceof File\n    ? (input as any)\n    : input === null\n      ? undefined\n      : input === \"null\"\n        ? null\n        : input;\n\nexport const array = (input: any[], alternative: null | undefined) =>\n  input.length ? input : alternative;\n\nexport const blob = (input: string | Blob | null): Blob | null | undefined =>\n  input instanceof Blob\n    ? input\n    : input === null\n      ? undefined\n      : input === \"null\"\n        ? null\n        : (input as any);\n\nexport const file = (input: string | File | null): File | null | undefined =>\n  input instanceof File\n    ? input\n    : input === null\n      ? undefined\n      : input === \"null\"\n        ? null\n        : (input as any);\n\nconst toNumber = (str: string): number | string => {\n  const value: number = Number(str);\n  return isNaN(value) ? str : value;\n};\n\nconst toBigint = (str: string): bigint | string => {\n  try {\n    return BigInt(str);\n  } catch {\n    return str;\n  }\n};\n"],"mappings":";;;;;;AAAA;;;;;;;;;;AAAO,IAAMA,UAAU,wBACrBC,UAEAA,iBAAiBC,OACZD,QACDA,UAAU,OACRE,SACAF,UAAU,SACR,OACAA,MAAMG,WAAW,IACf,OACAH,UAAU,UAAUA,UAAU,MAC5B,OACAA,UAAU,WAAWA,UAAU,MAC7B,QACCA,OAfM;AAiBhB,IAAMI,SAAS,wBACpBJ,UAEAA,iBAAiBC,OACZD,QACD,CAAC,CAACA,OAAOG,SACPH,UAAU,SACR,OACCK,SAASL,KAAAA,IACZE,QATc;AAWf,IAAMI,SAAS,wBACpBN,UAEAA,iBAAiBC,OACZD,QACD,CAAC,CAACA,OAAOG,SACPH,UAAU,SACR,OACCO,SAASP,KAAAA,IACZE,QATc;AAWf,IAAMM,SAAS,wBACpBR,UAEAA,iBAAiBC,OACZD,QACDA,UAAU,OACRE,SACAF,UAAU,SACR,OACAA,OATY;AAWf,IAAMS,QAAQ,wBAACT,OAAcU,gBAClCV,MAAMG,SAASH,QAAQU,aADJ;AAGd,IAAMC,OAAO,wBAACX,UACnBA,iBAAiBY,OACbZ,QACAA,UAAU,OACRE,SACAF,UAAU,SACR,OACCA,OAPS;AASb,IAAMa,OAAO,wBAACb,UACnBA,iBAAiBC,OACbD,QACAA,UAAU,OACRE,SACAF,UAAU,SACR,OACCA,OAPS;AASpB,IAAMK,WAAW,wBAACS,QAAAA;AAChB,QAAMC,QAAgBC,OAAOF,GAAAA;AAC7B,SAAOG,MAAMF,KAAAA,IAASD,MAAMC;AAC9B,GAHiB;AAKjB,IAAMR,WAAW,wBAACO,QAAAA;AAChB,MAAI;AACF,WAAOI,OAAOJ,GAAAA;EAChB,QAAQ;AACN,WAAOA;EACT;AACF,GANiB;","names":["boolean","input","File","undefined","length","number","toNumber","bigint","toBigint","string","array","alternative","blob","Blob","file","str","value","Number","isNaN","BigInt"]}