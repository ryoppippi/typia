{"version":3,"sources":["../src/factories/internal/metadata/iterate_metadata_collection.ts"],"sourcesContent":["import { Metadata } from \"../../../schemas/metadata/Metadata\";\nimport { MetadataArrayType } from \"../../../schemas/metadata/MetadataArrayType\";\nimport { MetadataObject } from \"../../../schemas/metadata/MetadataObject\";\nimport { MetadataTupleType } from \"../../../schemas/metadata/MetadataTupleType\";\n\nimport { MetadataCollection } from \"../../MetadataCollection\";\nimport { MetadataFactory } from \"../../MetadataFactory\";\nimport { iterate_metadata_comment_tags } from \"./iterate_metadata_comment_tags\";\n\nexport const iterate_metadata_collection =\n  (errors: MetadataFactory.IError[]) =>\n  (collection: MetadataCollection): void => {\n    for (const array of collection.arrays())\n      if (array.recursive === null)\n        collection.setArrayRecursive(\n          array,\n          isArrayRecursive(new Set())(array)(array.value),\n        );\n    for (const tuple of collection.tuples())\n      if (tuple.recursive === null) {\n        const visited: Set<Metadata> = new Set();\n        collection.setTupleRecursive(\n          tuple,\n          tuple.elements.some(isTupleRecursive(visited)(tuple)),\n        );\n      }\n    for (const obj of collection.objects()) {\n      iterate_metadata_comment_tags(errors)(obj);\n      if (obj.recursive === null) {\n        const visited: Set<Metadata> = new Set();\n        collection.setObjectRecursive(\n          obj,\n          obj.properties.some((p) => isObjectRecursive(visited)(obj)(p.value)),\n        );\n      }\n    }\n  };\n\nconst isArrayRecursive =\n  (visited: Set<Metadata>) =>\n  (array: MetadataArrayType) =>\n  (meta: Metadata): boolean => {\n    if (visited.has(meta)) return false;\n    visited.add(meta);\n\n    return (\n      meta.arrays.some(\n        (a) =>\n          a.type === array || isArrayRecursive(visited)(array)(a.type.value),\n      ) ||\n      meta.aliases.some((alias) =>\n        isArrayRecursive(visited)(array)(alias.value),\n      ) ||\n      meta.tuples.some(\n        (t) =>\n          !t.type.recursive &&\n          t.type.elements.some((e) => isArrayRecursive(visited)(array)(e)),\n      ) ||\n      meta.maps.some((m) => isArrayRecursive(visited)(array)(m.value)) ||\n      meta.sets.some((s) => isArrayRecursive(visited)(array)(s)) ||\n      (meta.escaped !== null &&\n        isArrayRecursive(visited)(array)(meta.escaped.returns)) ||\n      (meta.rest !== null && isArrayRecursive(visited)(array)(meta.rest))\n    );\n  };\n\nconst isTupleRecursive =\n  (visited: Set<Metadata>) =>\n  (tuple: MetadataTupleType) =>\n  (meta: Metadata): boolean => {\n    if (visited.has(meta)) return false;\n    visited.add(meta);\n\n    return (\n      meta.tuples.some(\n        (t) =>\n          t.type === tuple ||\n          t.type.elements.some((e) => isTupleRecursive(visited)(tuple)(e)),\n      ) ||\n      meta.arrays.some(\n        (a) =>\n          !a.type.recursive && isTupleRecursive(visited)(tuple)(a.type.value),\n      ) ||\n      meta.maps.some((m) => isTupleRecursive(visited)(tuple)(m.value)) ||\n      meta.sets.some((s) => isTupleRecursive(visited)(tuple)(s)) ||\n      meta.aliases.some((alias) =>\n        isTupleRecursive(visited)(tuple)(alias.value),\n      ) ||\n      (meta.escaped !== null &&\n        isTupleRecursive(visited)(tuple)(meta.escaped.returns)) ||\n      (meta.rest !== null && isTupleRecursive(visited)(tuple)(meta.rest))\n    );\n  };\n\nconst isObjectRecursive =\n  (visited: Set<Metadata>) =>\n  (obj: MetadataObject) =>\n  (meta: Metadata): boolean => {\n    if (visited.has(meta)) return false;\n\n    visited.add(meta);\n    return (\n      meta.objects.some(\n        (o) =>\n          obj === o ||\n          o.properties.some((prop) =>\n            isObjectRecursive(visited)(obj)(prop.value),\n          ),\n      ) ||\n      meta.aliases.some((alias) =>\n        isObjectRecursive(visited)(obj)(alias.value),\n      ) ||\n      meta.arrays.some(\n        (array) =>\n          !array.type.recursive &&\n          isObjectRecursive(visited)(obj)(array.type.value),\n      ) ||\n      meta.tuples.some(\n        (tuple) =>\n          !tuple.type.recursive &&\n          tuple.type.elements.some((elem) =>\n            isObjectRecursive(visited)(obj)(elem),\n          ),\n      ) ||\n      meta.maps.some((map) => isObjectRecursive(visited)(obj)(map.value)) ||\n      meta.sets.some((value) => isObjectRecursive(visited)(obj)(value)) ||\n      (meta.escaped !== null &&\n        isObjectRecursive(visited)(obj)(meta.escaped.returns)) ||\n      (meta.rest !== null && isObjectRecursive(visited)(obj)(meta.rest))\n    );\n  };\n"],"mappings":"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","names":["iterate_metadata_collection","errors","collection","array","arrays","recursive","setArrayRecursive","isArrayRecursive","Set","value","tuple","tuples","visited","setTupleRecursive","elements","some","isTupleRecursive","obj","objects","iterate_metadata_comment_tags","setObjectRecursive","properties","p","isObjectRecursive","meta","has","add","a","type","aliases","alias","t","e","maps","m","sets","s","escaped","returns","rest","o","prop","elem","map"]}