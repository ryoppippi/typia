{"version":3,"sources":["../src/schemas/metadata/MetadataArray.ts"],"names":["MetadataArray","type","tags","name_","props","create","getName","length","name","str","map","t","join","rows","row","toJSON","slice"],"mappings":";;;;;AAMO,IAAMA,gBAAN,MAAMA,eAAAA;EAAb,OAAaA;;;EACKC;EACAC;EAERC;;;;EAKR,YAAoBC,OAAuC;AACzD,SAAKH,OAAOG,MAAMH;AAClB,SAAKC,OAAOE,MAAMF;EACpB;EAEA,OAAcG,OAAOD,OAAsD;AACzE,WAAO,IAAIJ,eAAcI,KAAAA;EAC3B;EAEOE,UAAkB;AACvB,WAAQ,KAAKH,WAAW,MAAA;AACtB,UAAI,KAAKD,KAAKK,WAAW,EAAG,QAAO,KAAKN,KAAKO;eACpC,KAAKN,KAAKK,WAAW,GAAG;AAC/B,cAAME,MAAc;UAClB,KAAKR,KAAKO;aACP,KAAKN,KAAK,CAAA,EAAIQ,IAAI,CAACC,MAAMA,EAAEH,IAAI;UAClCI,KAAK,KAAA;AACP,eAAO,IAAIH,GAAAA;MACb;AACA,YAAMI,OAAiB,KAAKX,KAAKQ,IAAI,CAACI,QAAAA;AACpC,cAAML,MAAcK,IAAIJ,IAAI,CAACC,MAAMA,EAAEH,IAAI,EAAEI,KAAK,KAAA;AAChD,eAAOE,IAAIP,WAAW,IAAIE,MAAM,IAAIA,GAAAA;MACtC,CAAA;AACA,aAAO,IAAI,KAAKR,KAAKO,IAAI,OAAOK,KAAKD,KAAK,KAAA,CAAA;IAC5C,GAAA;EACF;EAEOG,SAAyB;AAC9B,WAAO;MACLd,MAAM,KAAKA,KAAKc,OAAM;MACtBb,MAAM,KAAKA,KAAKQ,IAAI,CAACI,QAAQA,IAAIE,MAAK,CAAA;IACxC;EACF;AACF","sourcesContent":["import { ClassProperties } from \"../../typings/ClassProperties\";\n\nimport { IMetadataArray } from \"./IMetadataArray\";\nimport { IMetadataTypeTag } from \"./IMetadataTypeTag\";\nimport { MetadataArrayType } from \"./MetadataArrayType\";\n\nexport class MetadataArray {\n  public readonly type: MetadataArrayType;\n  public readonly tags: IMetadataTypeTag[][];\n\n  private name_?: string;\n\n  /**\n   * @hidden\n   */\n  private constructor(props: ClassProperties<MetadataArray>) {\n    this.type = props.type;\n    this.tags = props.tags;\n  }\n\n  public static create(props: ClassProperties<MetadataArray>): MetadataArray {\n    return new MetadataArray(props);\n  }\n\n  public getName(): string {\n    return (this.name_ ??= (() => {\n      if (this.tags.length === 0) return this.type.name;\n      else if (this.tags.length === 1) {\n        const str: string = [\n          this.type.name,\n          ...this.tags[0]!.map((t) => t.name),\n        ].join(\" & \");\n        return `(${str})`;\n      }\n      const rows: string[] = this.tags.map((row) => {\n        const str: string = row.map((t) => t.name).join(\" & \");\n        return row.length === 1 ? str : `(${str})`;\n      });\n      return `(${this.type.name} & (${rows.join(\" | \")}))`;\n    })());\n  }\n\n  public toJSON(): IMetadataArray {\n    return {\n      type: this.type.toJSON(),\n      tags: this.tags.map((row) => row.slice()),\n    };\n  }\n}\n"]}