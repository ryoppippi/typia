{"version":3,"sources":["../src/utils/NamingConvention/NamingConvention.ts"],"sourcesContent":["import { StringUtil } from \"../StringUtil\";\n\nexport function snake(str: string): string {\n  const indexes: number[] = [];\n  for (let i: number = 0; i < str.length; i++) {\n    const code: number = str.charCodeAt(i);\n    if (65 <= code && code <= 90) indexes.push(i);\n  }\n  for (let i: number = indexes.length - 1; i > 0; --i) {\n    const now: number = indexes[i]!;\n    const prev: number = indexes[i - 1]!;\n    if (now - prev === 1) indexes.splice(i, 1);\n  }\n  if (indexes.length !== 0 && indexes[0] === 0) indexes.splice(0, 1);\n  if (indexes.length === 0) return str.toLowerCase();\n\n  let ret: string = \"\";\n  for (let i: number = 0; i < indexes.length; i++) {\n    const first: number = i === 0 ? 0 : indexes[i - 1]!;\n    const last: number = indexes[i]!;\n\n    ret += str.substring(first, last).toLowerCase();\n    ret += \"_\";\n  }\n  ret += str.substring(indexes[indexes.length - 1]!).toLowerCase();\n  return ret;\n}\n\nexport function camel(str: string): string {\n  return unsnake((str: string) => {\n    if (str.length === 0) return str;\n    else if (str[0] === str[0]!.toUpperCase())\n      return str[0]!.toLowerCase() + str.substring(1);\n    else return str;\n  })(str);\n}\n\nexport function pascal(str: string): string {\n  return unsnake((str: string) => {\n    if (str.length === 0) return str;\n    else if (str[0] === str[0]!.toLowerCase())\n      return str[0]!.toUpperCase() + str.substring(1);\n    else return str;\n  })(str);\n}\n\nconst unsnake =\n  (escaper: (str: string) => string) =>\n  (str: string): string => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let prefix: string = \"\";\n    for (let i: number = 0; i < str.length; i++) {\n      if (str[i] === \"_\") prefix += \"_\";\n      else break;\n    }\n    if (prefix.length !== 0) str = str.substring(prefix.length);\n\n    const indexes: [number, number][] = [];\n    for (let i: number = 0; i < str.length; i++) {\n      const ch: string = str[i]!;\n      if (ch !== \"_\") continue;\n\n      const last = indexes[indexes.length - 1];\n      if (last === undefined || last[0] + last[1] !== i) indexes.push([i, 1]);\n      else ++last[1];\n    }\n    if (indexes.length === 0) return prefix + escaper(str);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let ret: string = \"\";\n    for (let i: number = 0; i < indexes.length; i++) {\n      const [first] = indexes[i]!;\n      if (i === 0)\n        if (first === 0) ret += \"_\";\n        else ret += str.substring(0, first);\n      else {\n        const [prevFirst, prevLength] = indexes[i - 1]!;\n        const piece: string = str.substring(prevFirst + prevLength, first);\n        if (piece.length) ret += StringUtil.capitalize(piece);\n      }\n    }\n    const last = indexes[indexes.length - 1]!;\n    const piece: string = str.substring(last[0] + last[1]);\n    if (last.length) ret += StringUtil.capitalize(piece);\n    return prefix + escaper(ret);\n  };\n"],"mappings":"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","names":["snake","str","indexes","i","length","code","charCodeAt","push","now","prev","splice","toLowerCase","ret","first","last","substring","camel","unsnake","toUpperCase","pascal","escaper","prefix","ch","undefined","prevFirst","prevLength","piece","StringUtil","capitalize"]}