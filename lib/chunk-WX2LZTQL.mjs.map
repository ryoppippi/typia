{"version":3,"sources":["../src/transformers/features/CreateRandomTransformer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { RandomProgrammer } from \"../../programmers/RandomProgrammer\";\n\nimport { IProject } from \"../IProject\";\nimport { TransformerError } from \"../TransformerError\";\n\nexport namespace CreateRandomTransformer {\n  export const transform =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (expression: ts.CallExpression): ts.Expression => {\n      // CHECK GENERIC ARGUMENT EXISTENCE\n      if (!expression.typeArguments?.[0])\n        throw new TransformerError({\n          code: \"typia.createRandom\",\n          message: \"generic argument is not specified.\",\n        });\n\n      // GET TYPE INFO\n      const node: ts.TypeNode = expression.typeArguments[0];\n      const type: ts.Type = project.checker.getTypeFromTypeNode(node);\n\n      if (type.isTypeParameter())\n        throw new TransformerError({\n          code: \"typia.createRandom\",\n          message: \"non-specified generic argument.\",\n        });\n\n      // DO TRANSFORM\n      return RandomProgrammer.write({\n        ...project,\n        options: {\n          ...project.options,\n          functional: false,\n          numeric: false,\n        },\n      })(modulo)(expression.arguments?.[0])(type, node.getFullText().trim());\n    };\n}\n"],"mappings":";;;;;;;;;UAOiBA,0BAAAA;2BACFC,YACX,CAACC,YACD,CAACC,WACD,CAACC,eAAAA;AAEC,QAAI,CAACA,WAAWC,gBAAgB,CAAA,EAC9B,OAAM,IAAIC,iBAAiB;MACzBC,MAAM;MACNC,SAAS;IACX,CAAA;AAGF,UAAMC,OAAoBL,WAAWC,cAAc,CAAA;AACnD,UAAMK,OAAgBR,QAAQS,QAAQC,oBAAoBH,IAAAA;AAE1D,QAAIC,KAAKG,gBAAe,EACtB,OAAM,IAAIP,iBAAiB;MACzBC,MAAM;MACNC,SAAS;IACX,CAAA;AAGF,WAAOM,iBAAiBC,MAAM;MAC5B,GAAGb;MACHc,SAAS;QACP,GAAGd,QAAQc;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGf,MAAAA,EAAQC,WAAWe,YAAY,CAAA,CAAE,EAAET,MAAMD,KAAKW,YAAW,EAAGC,KAAI,CAAA;EACrE;AACJ,GAhCiBrB,4BAAAA,0BAAAA,CAAAA,EAAAA;","names":["CreateRandomTransformer","transform","project","modulo","expression","typeArguments","TransformerError","code","message","node","type","checker","getTypeFromTypeNode","isTypeParameter","RandomProgrammer","write","options","functional","numeric","arguments","getFullText","trim"]}