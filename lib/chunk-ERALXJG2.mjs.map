{"version":3,"sources":["../src/TypeGuardError.ts"],"sourcesContent":["export class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n\n  public constructor(props: TypeGuardError.IProps) {\n    // MESSAGE CONSTRUCTION\n    super(\n      props.message ||\n        `Error on ${props.method}(): invalid type${\n          props.path ? ` on ${props.path}` : \"\"\n        }, expect to be ${props.expected}`,\n    );\n\n    // INHERITANCE POLYFILL\n    const proto = new.target.prototype;\n    if (Object.setPrototypeOf) Object.setPrototypeOf(this, proto);\n    else (this as any).__proto__ = proto;\n\n    // ASSIGN MEMBERS\n    this.method = props.method;\n    this.path = props.path;\n    this.expected = props.expected;\n    this.value = props.value;\n  }\n}\nexport namespace TypeGuardError {\n  export interface IProps {\n    method: string;\n    path?: undefined | string;\n    expected: string;\n    value: any;\n    message?: undefined | string;\n  }\n}\n"],"mappings":";;;;;AAAO,IAAMA,iBAAN,cAA6BC,MAAAA;EAApC,OAAoCA;;;EAClBC;EACAC;EACAC;EACAC;EAEhB,YAAmBC,OAA8B;AAE/C,UACEA,MAAMC,WACJ,YAAYD,MAAMJ,MAAM,mBACtBI,MAAMH,OAAO,OAAOG,MAAMH,IAAI,KAAK,EAAA,kBACnBG,MAAMF,QAAQ,EAAE;AAItC,UAAMI,QAAQ,WAAWC;AACzB,QAAIC,OAAOC,eAAgBD,QAAOC,eAAe,MAAMH,KAAAA;QACjD,MAAaI,YAAYJ;AAG/B,SAAKN,SAASI,MAAMJ;AACpB,SAAKC,OAAOG,MAAMH;AAClB,SAAKC,WAAWE,MAAMF;AACtB,SAAKC,QAAQC,MAAMD;EACrB;AACF;","names":["TypeGuardError","Error","method","path","expected","value","props","message","proto","prototype","Object","setPrototypeOf","__proto__"]}