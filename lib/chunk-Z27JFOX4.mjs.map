{"version":3,"sources":["../src/programmers/internal/check_string.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { ExpressionFactory } from \"../../factories/ExpressionFactory\";\n\nimport { MetadataAtomic } from \"../../schemas/metadata/MetadataAtomic\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ICheckEntry } from \"../helpers/ICheckEntry\";\n\n/**\n * @internal\n */\nexport const check_string =\n  (project: IProject) =>\n  (atomic: MetadataAtomic) =>\n  (input: ts.Expression): ICheckEntry => {\n    const conditions: ICheckEntry.ICondition[][] =\n      check_string_type_tags(project)(atomic)(input);\n    return {\n      expected: atomic.getName(),\n      expression: ts.factory.createStrictEquality(\n        ts.factory.createStringLiteral(\"string\"),\n        ts.factory.createTypeOfExpression(input),\n      ),\n      conditions,\n    };\n  };\n\n/**\n * @internal\n */\nconst check_string_type_tags =\n  (project: IProject) =>\n  (atomic: MetadataAtomic) =>\n  (input: ts.Expression): ICheckEntry.ICondition[][] =>\n    atomic.tags\n      .map((row) => row.filter((tag) => !!tag.validate))\n      .filter((row) => !!row.length)\n      .map((row) =>\n        row.map((tag) => ({\n          expected: `string & ${tag.name}`,\n          expression: (\n            tag.predicate ??\n            ExpressionFactory.transpile(project.context)(tag.validate!)\n          )(input),\n        })),\n      );\n"],"mappings":";;;;;;;;AAAA,OAAOA,QAAQ;AAaR,IAAMC,eACX,wBAACC,YACD,CAACC,WACD,CAACC,UAAAA;AACC,QAAMC,aACJC,uBAAuBJ,OAAAA,EAASC,MAAAA,EAAQC,KAAAA;AAC1C,SAAO;IACLG,UAAUJ,OAAOK,QAAO;IACxBC,YAAYC,GAAGC,QAAQC,qBACrBF,GAAGC,QAAQE,oBAAoB,QAAA,GAC/BH,GAAGC,QAAQG,uBAAuBV,KAAAA,CAAAA;IAEpCC;EACF;AACF,GAbA;AAkBF,IAAMC,yBACJ,wBAACJ,YACD,CAACC,WACD,CAACC,UACCD,OAAOY,KACJC,IAAI,CAACC,QAAQA,IAAIC,OAAO,CAACC,QAAQ,CAAC,CAACA,IAAIC,QAAQ,CAAA,EAC/CF,OAAO,CAACD,QAAQ,CAAC,CAACA,IAAII,MAAM,EAC5BL,IAAI,CAACC,QACJA,IAAID,IAAI,CAACG,SAAS;EAChBZ,UAAU,YAAYY,IAAIG,IAAI;EAC9Bb,aACEU,IAAII,aACJC,kBAAkBC,UAAUvB,QAAQwB,OAAO,EAAEP,IAAIC,QAAQ,GACzDhB,KAAAA;AACJ,EAAA,CAAA,GAbN;","names":["ts","check_string","project","atomic","input","conditions","check_string_type_tags","expected","getName","expression","ts","factory","createStrictEquality","createStringLiteral","createTypeOfExpression","tags","map","row","filter","tag","validate","length","name","predicate","ExpressionFactory","transpile","context"]}