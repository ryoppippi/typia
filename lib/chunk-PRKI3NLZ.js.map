{"version":3,"sources":["../src/programmers/protobuf/ProtobufIsEncodeProgrammer.ts"],"names":["ts","ProtobufIsEncodeProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","TypeFactory","getFullName","checker","createUnionTypeNode","createLiteralTypeNode","createNull","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","ProtobufEncodeProgrammer","createReturnStatement","createConditionalExpression","createCallExpression","createIdentifier"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,6BAAAA;8BACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAX,GAAGO,QAAQK,wBACTN,QAAQO,YAAYC,YAAYX,QAAQY,OAAO,EAAEV,IAAAA,CAAAA,CAAAA;KAIvDL,GAAGO,QAAQS,oBAAoB;IAC7BhB,GAAGO,QAAQK,wBAAwB,YAAA;IACnCZ,GAAGO,QAAQU,sBAAsBjB,GAAGO,QAAQW,WAAU,CAAA;GACvD,GACDT,QACAT,GAAGO,QAAQY,YAAY;IACrBC,iBAAiBC,SACf,MACAC,aAAapB,MAAM;MACjB,GAAGC;MACHoB,SAAS;QACP,GAAGpB,QAAQoB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGrB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1Bc,iBAAiBC,SACf,UACAK,yBAAyBxB,MAAM;MAC7B,GAAGC;MACHoB,SAAS;QACP,GAAGpB,QAAQoB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGrB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBN,GAAGO,QAAQoB,sBACT3B,GAAGO,QAAQqB,4BACT5B,GAAGO,QAAQsB,qBACT7B,GAAGO,QAAQuB,iBAAiB,IAAA,GAC5BrB,QACA;MAACT,GAAGO,QAAQuB,iBAAiB,OAAA;KAAS,GAExCrB,QACAT,GAAGO,QAAQsB,qBACT7B,GAAGO,QAAQuB,iBAAiB,QAAA,GAC5BrB,QACA;MAACT,GAAGO,QAAQuB,iBAAiB,OAAA;KAAS,GAExCrB,QACAT,GAAGO,QAAQW,WAAU,CAAA,CAAA;GAG1B,CAAA;AAET,GA/DiBjB,+BAAAA,6BAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\nimport { ProtobufEncodeProgrammer } from \"./ProtobufEncodeProgrammer\";\n\nexport namespace ProtobufIsEncodeProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string) =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ),\n        ],\n        ts.factory.createUnionTypeNode([\n          ts.factory.createTypeReferenceNode(\"Uint8Array\"),\n          ts.factory.createLiteralTypeNode(ts.factory.createNull()),\n        ]),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"encode\",\n            ProtobufEncodeProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createConditionalExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              undefined,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"encode\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              undefined,\n              ts.factory.createNull(),\n            ),\n          ),\n        ]),\n      );\n}\n"]}