{"version":3,"sources":["../src/programmers/http/HttpValidateHeadersProgrammer.ts"],"names":["ts","HttpValidateHeadersProgrammer","write","project","modulo","type","name","factory","createArrowFunction","undefined","IdentifierFactory","parameter","createTypeReferenceNode","HttpHeadersProgrammer","INPUT_TYPE","TypeFactory","getFullName","checker","createBlock","StatementFactory","constant","ValidateProgrammer","options","functional","numeric","createCallExpression","createIdentifier","createReturnStatement","createAsExpression"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,gCAAAA;iCACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SACdN,GAAGO,QAAQC,oBACTC,QACAA,QACA;IACEC,kBAAkBC,UAChB,SACAX,GAAGO,QAAQK,wBACTC,sBAAsBC,UAAU,CAAA;KAItCd,GAAGO,QAAQK,wBACT,oCACEN,QAAQS,YAAYC,YAAYb,QAAQc,OAAO,EAAEZ,IAAAA,CAAAA,IAC/C,GAENI,QACAT,GAAGO,QAAQW,YAAY;IACrBC,iBAAiBC,SACf,YACAC,mBAAmBnB,MAAM;MACvB,GAAGC;MACHmB,SAAS;QACP,GAAGnB,QAAQmB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGpB,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;IAE1Ba,iBAAiBC,SACf,UACAP,sBAAsBX,MAAM;MAC1B,GAAGC;MACHmB,SAAS;QACP,GAAGnB,QAAQmB;QACXC,YAAY;QACZC,SAAS;MACX;IACF,CAAA,EAAGpB,MAAAA,EAAQC,MAAMC,IAAAA,CAAAA;IAEnBa,iBAAiBC,SACf,UACApB,GAAGO,QAAQkB,qBACTzB,GAAGO,QAAQmB,iBAAiB,QAAA,GAC5BjB,QACA;MAACT,GAAGO,QAAQmB,iBAAiB,OAAA;KAAS,CAAA;IAG1C1B,GAAGO,QAAQoB,sBACT3B,GAAGO,QAAQqB,mBACT5B,GAAGO,QAAQkB,qBACTzB,GAAGO,QAAQmB,iBAAiB,UAAA,GAC5BjB,QACA;MAACT,GAAGO,QAAQmB,iBAAiB,QAAA;KAAU,GAEzC1B,GAAGO,QAAQK,wBAAwB,KAAA,CAAA,CAAA;GAGxC,CAAA;AAET,GAjEiBX,kCAAAA,gCAAAA,CAAAA,EAAAA","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { ValidateProgrammer } from \"../ValidateProgrammer\";\nimport { HttpHeadersProgrammer } from \"./HttpHeadersProgrammer\";\n\nexport namespace HttpValidateHeadersProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction =>\n      ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [\n          IdentifierFactory.parameter(\n            \"input\",\n            ts.factory.createTypeReferenceNode(\n              HttpHeadersProgrammer.INPUT_TYPE,\n            ),\n          ),\n        ],\n        ts.factory.createTypeReferenceNode(\n          `typia.IValidation<typia.Resolved<${\n            name ?? TypeFactory.getFullName(project.checker)(type)\n          }>>`,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"validate\",\n            ValidateProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: true,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          StatementFactory.constant(\n            \"decode\",\n            HttpHeadersProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(type, name),\n          ),\n          StatementFactory.constant(\n            \"output\",\n            ts.factory.createCallExpression(\n              ts.factory.createIdentifier(\"decode\"),\n              undefined,\n              [ts.factory.createIdentifier(\"input\")],\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createAsExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"validate\"),\n                undefined,\n                [ts.factory.createIdentifier(\"output\")],\n              ),\n              ts.factory.createTypeReferenceNode(\"any\"),\n            ),\n          ),\n        ]),\n      );\n}\n"]}