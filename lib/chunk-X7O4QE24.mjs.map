{"version":3,"sources":["../src/schemas/metadata/MetadataAtomic.ts"],"sourcesContent":["import { ClassProperties } from \"../../typings/ClassProperties\";\n\nimport { IMetadataAtomic } from \"./IMetadataAtomic\";\nimport { IMetadataTypeTag } from \"./IMetadataTypeTag\";\n\nexport class MetadataAtomic {\n  public readonly type: \"boolean\" | \"bigint\" | \"number\" | \"string\";\n  public readonly tags: IMetadataTypeTag[][];\n\n  private name_?: string;\n\n  /**\n   * @internal\n   */\n  private constructor(props: ClassProperties<MetadataAtomic>) {\n    this.type = props.type;\n    this.tags = props.tags;\n  }\n\n  public static create(props: ClassProperties<MetadataAtomic>): MetadataAtomic {\n    return new MetadataAtomic(props);\n  }\n\n  public static from(json: IMetadataAtomic): MetadataAtomic {\n    return MetadataAtomic.create({\n      type: json.type,\n      tags: json.tags.map((row) =>\n        row.map((tag) => ({\n          target: tag.target,\n          name: tag.name,\n          kind: tag.kind,\n          value:\n            typeof tag.value === \"object\" &&\n            tag.value?.type === \"bigint\" &&\n            typeof tag.value.value === \"string\"\n              ? BigInt(tag.value.value)\n              : tag.value,\n          validate: tag.validate,\n          exclusive: tag.exclusive,\n          schema: tag.schema,\n        })),\n      ),\n    });\n  }\n\n  public getName(): string {\n    return (this.name_ ??= getName(this));\n  }\n\n  public toJSON(): IMetadataAtomic {\n    return {\n      type: this.type,\n      tags: this.tags.map((row) =>\n        row.map((tag) => ({\n          target: tag.target,\n          name: tag.name,\n          kind: tag.kind,\n          value:\n            typeof tag.value === \"bigint\"\n              ? {\n                  type: \"bigint\",\n                  value: tag.value.toString(),\n                }\n              : tag.value,\n          validate: tag.validate,\n          exclusive: tag.exclusive,\n          schema: this.type !== \"bigint\" ? tag.schema : undefined,\n        })),\n      ),\n    };\n  }\n}\n\nconst getName = (obj: MetadataAtomic): string => {\n  if (obj.tags.length === 0) return obj.type;\n  else if (obj.tags.length === 1) {\n    const str: string = [obj.type, ...obj.tags[0]!.map((t) => t.name)].join(\n      \" & \",\n    );\n    return `(${str})`;\n  }\n  const rows: string[] = obj.tags.map((row) => {\n    const str: string = row.map((t) => t.name).join(\" & \");\n    return row.length === 1 ? str : `(${str})`;\n  });\n  return `(${obj.type} & (${rows.join(\" | \")}))`;\n};\n"],"mappings":";;;;;AAKO,IAAMA,iBAAN,MAAMA,gBAAAA;EAAb,OAAaA;;;EACKC;EACAC;EAERC;;;;EAKR,YAAoBC,OAAwC;AAC1D,SAAKH,OAAOG,MAAMH;AAClB,SAAKC,OAAOE,MAAMF;EACpB;EAEA,OAAcG,OAAOD,OAAwD;AAC3E,WAAO,IAAIJ,gBAAeI,KAAAA;EAC5B;EAEA,OAAcE,KAAKC,MAAuC;AACxD,WAAOP,gBAAeK,OAAO;MAC3BJ,MAAMM,KAAKN;MACXC,MAAMK,KAAKL,KAAKM,IAAI,CAACC,QACnBA,IAAID,IAAI,CAACE,SAAS;QAChBC,QAAQD,IAAIC;QACZC,MAAMF,IAAIE;QACVC,MAAMH,IAAIG;QACVC,OACE,OAAOJ,IAAII,UAAU,YACrBJ,IAAII,OAAOb,SAAS,YACpB,OAAOS,IAAII,MAAMA,UAAU,WACvBC,OAAOL,IAAII,MAAMA,KAAK,IACtBJ,IAAII;QACVE,UAAUN,IAAIM;QACdC,WAAWP,IAAIO;QACfC,QAAQR,IAAIQ;MACd,EAAA,CAAA;IAEJ,CAAA;EACF;EAEOC,UAAkB;AACvB,WAAQ,KAAKhB,UAAUgB,QAAQ,IAAI;EACrC;EAEOC,SAA0B;AAC/B,WAAO;MACLnB,MAAM,KAAKA;MACXC,MAAM,KAAKA,KAAKM,IAAI,CAACC,QACnBA,IAAID,IAAI,CAACE,SAAS;QAChBC,QAAQD,IAAIC;QACZC,MAAMF,IAAIE;QACVC,MAAMH,IAAIG;QACVC,OACE,OAAOJ,IAAII,UAAU,WACjB;UACEb,MAAM;UACNa,OAAOJ,IAAII,MAAMO,SAAQ;QAC3B,IACAX,IAAII;QACVE,UAAUN,IAAIM;QACdC,WAAWP,IAAIO;QACfC,QAAQ,KAAKjB,SAAS,WAAWS,IAAIQ,SAASI;MAChD,EAAA,CAAA;IAEJ;EACF;AACF;AAEA,IAAMH,UAAU,wBAACI,QAAAA;AACf,MAAIA,IAAIrB,KAAKsB,WAAW,EAAG,QAAOD,IAAItB;WAC7BsB,IAAIrB,KAAKsB,WAAW,GAAG;AAC9B,UAAMC,MAAc;MAACF,IAAItB;SAASsB,IAAIrB,KAAK,CAAA,EAAIM,IAAI,CAACkB,MAAMA,EAAEd,IAAI;MAAGe,KACjE,KAAA;AAEF,WAAO,IAAIF,GAAAA;EACb;AACA,QAAMG,OAAiBL,IAAIrB,KAAKM,IAAI,CAACC,QAAAA;AACnC,UAAMgB,MAAchB,IAAID,IAAI,CAACkB,MAAMA,EAAEd,IAAI,EAAEe,KAAK,KAAA;AAChD,WAAOlB,IAAIe,WAAW,IAAIC,MAAM,IAAIA,GAAAA;EACtC,CAAA;AACA,SAAO,IAAIF,IAAItB,IAAI,OAAO2B,KAAKD,KAAK,KAAA,CAAA;AACtC,GAbgB;","names":["MetadataAtomic","type","tags","name_","props","create","from","json","map","row","tag","target","name","kind","value","BigInt","validate","exclusive","schema","getName","toJSON","toString","undefined","obj","length","str","t","join","rows"]}