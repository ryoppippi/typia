{"version":3,"sources":["../src/programmers/json/JsonIsParseProgrammer.ts"],"sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\nimport { JsonMetadataFactory } from \"../../factories/JsonMetadataFactory\";\nimport { StatementFactory } from \"../../factories/StatementFactory\";\nimport { TypeFactory } from \"../../factories/TypeFactory\";\n\nimport { IProject } from \"../../transformers/IProject\";\n\nimport { IsProgrammer } from \"../IsProgrammer\";\n\nexport namespace JsonIsParseProgrammer {\n  export const write =\n    (project: IProject) =>\n    (modulo: ts.LeftHandSideExpression) =>\n    (type: ts.Type, name?: string): ts.ArrowFunction => {\n      JsonMetadataFactory.analyze(`typia.json.${modulo.getText()}`)(\n        project.checker,\n        project.context,\n      )(type);\n      return ts.factory.createArrowFunction(\n        undefined,\n        undefined,\n        [IdentifierFactory.parameter(\"input\", TypeFactory.keyword(\"any\"))],\n        ts.factory.createImportTypeNode(\n          ts.factory.createLiteralTypeNode(\n            ts.factory.createStringLiteral(\"typia\"),\n          ),\n          undefined,\n          ts.factory.createIdentifier(\"Primitive\"),\n          [\n            ts.factory.createTypeReferenceNode(\n              name ?? TypeFactory.getFullName(project.checker)(type),\n            ),\n          ],\n          false,\n        ),\n        undefined,\n        ts.factory.createBlock([\n          StatementFactory.constant(\n            \"is\",\n            IsProgrammer.write({\n              ...project,\n              options: {\n                ...project.options,\n                functional: false,\n                numeric: false,\n              },\n            })(modulo)(false)(type, name),\n          ),\n          ts.factory.createExpressionStatement(\n            ts.factory.createBinaryExpression(\n              ts.factory.createIdentifier(\"input\"),\n              ts.SyntaxKind.EqualsToken,\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"JSON.parse\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n            ),\n          ),\n          ts.factory.createReturnStatement(\n            ts.factory.createConditionalExpression(\n              ts.factory.createCallExpression(\n                ts.factory.createIdentifier(\"is\"),\n                undefined,\n                [ts.factory.createIdentifier(\"input\")],\n              ),\n              undefined,\n              ts.factory.createAsExpression(\n                ts.factory.createIdentifier(\"input\"),\n                TypeFactory.keyword(\"any\"),\n              ),\n              undefined,\n              ts.factory.createNull(),\n            ),\n          ),\n        ]),\n      );\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,QAAQ;;UAWEC,wBAAAA;yBACFC,QACX,CAACC,YACD,CAACC,WACD,CAACC,MAAeC,SAAAA;AACdC,wBAAoBC,QAAQ,cAAcJ,OAAOK,QAAO,CAAA,EAAI,EAC1DN,QAAQO,SACRP,QAAQQ,OAAO,EACfN,IAAAA;AACF,WAAOO,GAAGC,QAAQC,oBAChBC,QACAA,QACA;MAACC,kBAAkBC,UAAU,SAASC,YAAYC,QAAQ,KAAA,CAAA;OAC1DP,GAAGC,QAAQO,qBACTR,GAAGC,QAAQQ,sBACTT,GAAGC,QAAQS,oBAAoB,OAAA,CAAA,GAEjCP,QACAH,GAAGC,QAAQU,iBAAiB,WAAA,GAC5B;MACEX,GAAGC,QAAQW,wBACTlB,QAAQY,YAAYO,YAAYtB,QAAQO,OAAO,EAAEL,IAAAA,CAAAA;OAGrD,KAAA,GAEFU,QACAH,GAAGC,QAAQa,YAAY;MACrBC,iBAAiBC,SACf,MACAC,aAAa3B,MAAM;QACjB,GAAGC;QACH2B,SAAS;UACP,GAAG3B,QAAQ2B;UACXC,YAAY;UACZC,SAAS;QACX;MACF,CAAA,EAAG5B,MAAAA,EAAQ,KAAA,EAAOC,MAAMC,IAAAA,CAAAA;MAE1BM,GAAGC,QAAQoB,0BACTrB,GAAGC,QAAQqB,uBACTtB,GAAGC,QAAQU,iBAAiB,OAAA,GAC5BX,GAAGuB,WAAWC,aACdxB,GAAGC,QAAQwB,qBACTzB,GAAGC,QAAQU,iBAAiB,YAAA,GAC5BR,QACA;QAACH,GAAGC,QAAQU,iBAAiB,OAAA;OAAS,CAAA,CAAA;MAI5CX,GAAGC,QAAQyB,sBACT1B,GAAGC,QAAQ0B,4BACT3B,GAAGC,QAAQwB,qBACTzB,GAAGC,QAAQU,iBAAiB,IAAA,GAC5BR,QACA;QAACH,GAAGC,QAAQU,iBAAiB,OAAA;OAAS,GAExCR,QACAH,GAAGC,QAAQ2B,mBACT5B,GAAGC,QAAQU,iBAAiB,OAAA,GAC5BL,YAAYC,QAAQ,KAAA,CAAA,GAEtBJ,QACAH,GAAGC,QAAQ4B,WAAU,CAAA,CAAA;KAG1B,CAAA;EAEL;AACJ,GArEiBxC,0BAAAA,wBAAAA,CAAAA,EAAAA;","names":["ts","JsonIsParseProgrammer","write","project","modulo","type","name","JsonMetadataFactory","analyze","getText","checker","context","ts","factory","createArrowFunction","undefined","IdentifierFactory","parameter","TypeFactory","keyword","createImportTypeNode","createLiteralTypeNode","createStringLiteral","createIdentifier","createTypeReferenceNode","getFullName","createBlock","StatementFactory","constant","IsProgrammer","options","functional","numeric","createExpressionStatement","createBinaryExpression","SyntaxKind","EqualsToken","createCallExpression","createReturnStatement","createConditionalExpression","createAsExpression","createNull"]}