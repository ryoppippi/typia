{"version":3,"sources":["../src/programmers/internal/feature_object_entries.ts"],"names":["ts","feature_object_entries","config","importer","obj","input","from","properties","map","prop","sole","key","getSoleLiteral","propInput","factory","createIdentifier","Escaper","variable","createPropertyAccessExpression","createElementAccessExpression","createStringLiteral","meta","value","expression","decoder","tracable","path","trace","source","postfix","IdentifierFactory","use"],"mappings":";;;;;;;;;;;AAAA,OAAOA,QAAQ;AAcR,IAAMC,yBACX,wBACEC,WAKF,CAACC,aACD,CAACC,QACD,CAACC,OAAsBC,OAAmC,aACxDF,IAAIG,WAAWC,IAAI,CAACC,SAAAA;AAClB,QAAMC,OAAsBD,KAAKE,IAAIC,eAAc;AACnD,QAAMC,YACJH,SAAS,OACLV,GAAGc,QAAQC,iBAAiB,OAAA,IAC5BC,QAAQC,SAASP,IAAAA,IACfV,GAAGc,QAAQI,+BACTb,OACAL,GAAGc,QAAQC,iBAAiBL,IAAAA,CAAAA,IAE9BV,GAAGc,QAAQK,8BACTd,OACAL,GAAGc,QAAQM,oBAAoBV,IAAAA,CAAAA;AAGzC,SAAO;IACLL,OAAOQ;IACPF,KAAKF,KAAKE;IACVU,MAAMZ,KAAKa;IACXC,YAAYrB,OAAOsB,QAAO,EAAGX,WAAWJ,KAAKa,OAAO;MAClDG,UAAUvB,OAAOwB,QAAQxB,OAAOyB;MAChCC,QAAQ;MACRtB;MACAuB,SAAS3B,OAAOyB,QACZjB,SAAS,OACPoB,kBAAkBD,QAAQnB,IAAAA,KACzB,MAAA;AACCP,iBAAS4B,IAAI,MAAA;AACb,eAAO;MACT,GAAA,IACF;IACN,CAAA;EACF;AACF,CAAA,GA1CF","sourcesContent":["import ts from \"typescript\";\n\nimport { IdentifierFactory } from \"../../factories/IdentifierFactory\";\n\nimport { MetadataObject } from \"../../schemas/metadata/MetadataObject\";\n\nimport { Escaper } from \"../../utils/Escaper\";\n\nimport { FeatureProgrammer } from \"../FeatureProgrammer\";\nimport { FunctionImporter } from \"../helpers/FunctionImporter\";\n\n/**\n * @internal\n */\nexport const feature_object_entries =\n  <Output extends ts.ConciseBody>(\n    config: Pick<\n      FeatureProgrammer.IConfig<Output>,\n      \"decoder\" | \"path\" | \"trace\"\n    >,\n  ) =>\n  (importer: FunctionImporter) =>\n  (obj: MetadataObject) =>\n  (input: ts.Expression, from: \"object\" | \"top\" | \"array\" = \"object\") =>\n    obj.properties.map((prop) => {\n      const sole: string | null = prop.key.getSoleLiteral();\n      const propInput =\n        sole === null\n          ? ts.factory.createIdentifier(\"value\")\n          : Escaper.variable(sole)\n            ? ts.factory.createPropertyAccessExpression(\n                input,\n                ts.factory.createIdentifier(sole),\n              )\n            : ts.factory.createElementAccessExpression(\n                input,\n                ts.factory.createStringLiteral(sole),\n              );\n\n      return {\n        input: propInput,\n        key: prop.key,\n        meta: prop.value,\n        expression: config.decoder()(propInput, prop.value, {\n          tracable: config.path || config.trace,\n          source: \"function\",\n          from,\n          postfix: config.trace\n            ? sole !== null\n              ? IdentifierFactory.postfix(sole)\n              : (() => {\n                  importer.use(\"join\");\n                  return `$join(key)`;\n                })()\n            : \"\",\n        }),\n      };\n    });\n"]}