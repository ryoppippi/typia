{"version":3,"sources":["../src/functional/$ProtobufWriter.ts"],"names":["$ProtobufWriter","sizer","ptr","buf","view","varlenidx","constructor","Uint8Array","len","DataView","buffer","bool","value","byte","int32","int64","variant32","sint32","uint32","sint64","BigInt","variant64","ND01","ND63","uint64","float","val","setFloat32","double","setFloat64","bytes","byteLength","i","string","varlen","binary","utf8","encode","fork","ldelim","finish","reset","asUintN","NX7F","Number","NX80","ND07","length","TextEncoder"],"mappings":"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","sourcesContent":["import { $ProtobufSizer } from \"./$ProtobufSizer\";\nimport { IProtobufWriter } from \"./IProtobufWriter\";\n\n/// @reference https://github.com/piotr-oles/as-proto/blob/main/packages/as-proto/assembly/internal/FixedWriter.ts\nexport class $ProtobufWriter implements IProtobufWriter {\n  /**\n   * Related sizer\n   */\n  private readonly sizer: $ProtobufSizer;\n\n  /**\n   * Current pointer.\n   */\n  private ptr: number;\n\n  /**\n   * Protobuf buffer.\n   */\n  private buf: Uint8Array;\n\n  /**\n   * DataView for buffer.\n   */\n  private view: DataView;\n\n  /**\n   * Index in varlen array from sizer.\n   */\n  private varlenidx: number;\n\n  constructor(sizer: $ProtobufSizer) {\n    this.sizer = sizer;\n    this.buf = new Uint8Array(sizer.len);\n    this.view = new DataView(this.buf.buffer);\n    this.ptr = 0;\n    this.varlenidx = 0;\n  }\n\n  buffer(): Uint8Array {\n    return this.buf;\n  }\n\n  bool(value: boolean): void {\n    this.byte(value ? 1 : 0);\n  }\n\n  byte(value: number): void {\n    this.buf[this.ptr++] = value & 255;\n  }\n\n  int32(value: number): void {\n    if (value < 0) this.int64(value);\n    else this.variant32(value >>> 0);\n  }\n\n  sint32(value: number): void {\n    this.variant32((value << 1) ^ (value >> 31));\n  }\n\n  uint32(value: number): void {\n    this.variant32(value);\n  }\n\n  sint64(value: number | bigint): void {\n    value = BigInt(value);\n    this.variant64((value << ND01) ^ (value >> ND63));\n  }\n\n  int64(value: number | bigint): void {\n    this.variant64(BigInt(value));\n  }\n\n  uint64(value: number | bigint): void {\n    this.variant64(BigInt(value));\n  }\n\n  float(val: number): void {\n    this.view.setFloat32(this.ptr, val, true);\n    this.ptr += 4;\n  }\n\n  double(val: number): void {\n    this.view.setFloat64(this.ptr, val, true);\n    this.ptr += 8;\n  }\n\n  bytes(value: Uint8Array): void {\n    this.uint32(value.byteLength);\n    for (let i = 0; i < value.byteLength; i++) this.buf[this.ptr++] = value[i]!;\n  }\n\n  string(value: string): void {\n    const len: number = this.varlen(); // use precomputed length\n    this.uint32(len);\n\n    const binary: Uint8Array = utf8.encode(value);\n    for (let i = 0; i < binary.byteLength; i++)\n      this.buf[this.ptr++] = binary[i]!;\n  }\n\n  fork(): void {\n    this.uint32(this.varlen()); // use precomputed length\n  }\n\n  ldelim(): void {\n    // nothing to do - all dirty work done by sizer\n  }\n\n  finish(): Uint8Array {\n    return this.buf;\n  }\n\n  reset(): void {\n    this.buf = new Uint8Array(this.sizer.len);\n    this.view = new DataView(this.buf.buffer);\n    this.ptr = 0;\n    this.varlenidx = 0;\n  }\n\n  private variant32(val: number): void {\n    while (val > 0x7f) {\n      this.buf[this.ptr++] = (val & 0x7f) | 0x80;\n      val = val >>> 7;\n    }\n    this.buf[this.ptr++] = val;\n  }\n\n  private variant64(val: bigint): void {\n    val = BigInt.asUintN(64, val);\n    while (val > NX7F) {\n      this.buf[this.ptr++] = Number((val & NX7F) | NX80);\n      val = val >> ND07;\n    }\n    this.buf[this.ptr++] = Number(val);\n  }\n\n  private varlen(): number {\n    return this.varlenidx >= this.sizer.varlen.length\n      ? 0\n      : this.sizer.varlen[this.varlenidx++]!;\n  }\n}\n\nconst utf8 = /** @__PURE__ */ new TextEncoder();\n\nconst ND01 = /** @__PURE__ */ BigInt(1);\nconst ND07 = /** @__PURE__ */ BigInt(7);\nconst ND63 = /** @__PURE__ */ BigInt(63);\nconst NX7F = /** @__PURE__ */ BigInt(0x7f);\nconst NX80 = /** @__PURE__ */ BigInt(0x80);\n"]}