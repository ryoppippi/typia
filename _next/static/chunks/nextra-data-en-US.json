{"/docs":{"title":"Index","data":{"outline#Outline":"// RUNTIME VALIDATORS\nexport function is<T>(input: unknown): input is T; // returns boolean\nexport function assert<T>(input: unknown): T; // throws TypeGuardError\nexport function assertGuard<T>(input: unknown): asserts input is T;\nexport function validate<T>(input: unknown): IValidation<T>; // detailed\n// JSON FUNCTIONS\nexport namespace json {\n  export function application<T>(): IJsonApplication; // JSON schema\n  export function assertParse<T>(input: string): T; // type safe parser\n  export function assertStringify<T>(input: T): string; // safe and faster\n}\n// PROTOCOL BUFFER\nexport namespace protobuf {\n  export function message<T>(): string; // Protocol Buffer message\n  export function assertDecode<T>(buffer: Uint8Array): T; // safe decoder\n  export function assertEncode<T>(input: T): Uint8Array; // safe encoder\n}\n// RANDOM GENERATOR\nexport function random<T>(g?: Partial<IRandomGenerator>): T;\nTypia is a transformer library supporting below features:\nSuper-fast Runtime Validators\nEnhanced JSON functions\nProtocol Buffer encoder and decoder\nRandom data generator\nOnly one line required, with pure TypeScript type\nRuntime validator is 20,000x faster than class-validator\nJSON serialization is 200x faster than class-transformer","sponsors#Sponsors":"Thanks for your support.Your donation would encourage typia development."}},"/docs/misc":{"title":"Misc","data":{"misc-module#misc module":"","clone-functions#clone() functions":"export namespace misc {\n  export function clone<T>(input: T): T;\n  export function assertClone<T>(input: T | unknown): Resolved<T>;\n  export function isClone<T>(input: T | unknown): Resolved<T> | null;\n  export function validateClone<T>(input: T | unknown): IValidation<Resolved<T>>;\n  export function createClone<T>(): (input: T) => Resolved<T>;\n  export function createAssertClone<T>(): (input: T | unknown) => Resolved<T>;\n  export function createIsClone<T>(): (input: T | unknown) => Resolved<T> | null;\n  export function createValidateClone<T>(): (\n      input: T | unknown\n  ) => IValidation<Resolved<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nDeep copy functions.When you want to copy an instance, just call typia.misc.clone() function. It would perform deep copy including nested objects, so you can get a new instance with same values. Also, if you want type safe deep copy function, you can use typia.misc.isClone(), typia.misc.assertClone() or typia.misc.validateClone() functions instead.\ntypia.misc.assertClone(): typia.assert<T>() + typia.misc.clone<T>()\ntypia.misc.isClone(): typia.is<T>() + typia.misc.clone<T>()\ntypia.misc.validateClone(): typia.validate<T>() + typia.misc.clone<T>()\nimport typia from \"typia\";\nconst department: IDepartment = typia.misc.random<IDepartment>();\nconst cloned: IDepartment = typia.misc.assertClone(department);\nconsole.log(cloned);\ninterface IDepartment {\n  /**\n   * @format uuid\n   */\n  id: string;\n  /**\n   * @minLength 3\n   */\n  name: string;\n  /**\n   * @type int\n   */\n  limit: number;\n  clerks: IClerk[];\n}\ninterface IClerk {\n  name: string;\n  /**\n   * @exclusiveMinimum 19\n   * @maximum 100\n   */\n  age: number;\n  authority: number;\n  /**\n   * @format date\n   */\n  joined_at: string;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst department = typia_1.default.misc.random();\nconst cloned = ((input) => {\n  const assert = (input) => {\n    const __is = (input) => {\n      const $io0 = (input) =>\n        \"string\" === typeof input.id &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          input.id,\n        ) &&\n        \"string\" === typeof input.name &&\n        3 <= input.name.length &&\n        \"number\" === typeof input.limit &&\n        Math.floor(input.limit) === input.limit &&\n        -2147483648 <= input.limit &&\n        input.limit <= 2147483647 &&\n        Array.isArray(input.clerks) &&\n        input.clerks.every(\n          (elem) => \"object\" === typeof elem && null !== elem && $io1(elem),\n        );\n      const $io1 = (input) =>\n        \"string\" === typeof input.name &&\n        \"number\" === typeof input.age &&\n        19 < input.age &&\n        input.age <= 100 &&\n        \"number\" === typeof input.authority &&\n        \"string\" === typeof input.joined_at &&\n        /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n      return \"object\" === typeof input && null !== input && $io0(input);\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.misc.assertClone.guard;\n        const $ao0 = (input, _path, _exceptionable = true) =>\n          ((\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $guard(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            })) &&\n          ((\"string\" === typeof input.name &&\n            (3 <= input.name.length ||\n              $guard(_exceptionable, {\n                path: _path + \".name\",\n                expected: \"string & MinLength<3>\",\n                value: input.name,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"(string & MinLength<3>)\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.limit &&\n            ((Math.floor(input.limit) === input.limit &&\n              -2147483648 <= input.limit &&\n              input.limit <= 2147483647) ||\n              $guard(_exceptionable, {\n                path: _path + \".limit\",\n                expected: 'number & Type<\"int32\">',\n                value: input.limit,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".limit\",\n              expected: '(number & Type<\"int32\">)',\n              value: input.limit,\n            })) &&\n          (((Array.isArray(input.clerks) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            })) &&\n            input.clerks.every(\n              (elem, _index1) =>\n                (((\"object\" === typeof elem && null !== elem) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".clerks[\" + _index1 + \"]\",\n                    expected: \"IClerk\",\n                    value: elem,\n                  })) &&\n                  $ao1(\n                    elem,\n                    _path + \".clerks[\" + _index1 + \"]\",\n                    true && _exceptionable,\n                  )) ||\n                $guard(_exceptionable, {\n                  path: _path + \".clerks[\" + _index1 + \"]\",\n                  expected: \"IClerk\",\n                  value: elem,\n                }),\n            )) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            }));\n        const $ao1 = (input, _path, _exceptionable = true) =>\n          (\"string\" === typeof input.name ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"string\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.age &&\n            (19 < input.age ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"(number & ExclusiveMinimum<19> & Maximum<100>)\",\n              value: input.age,\n            })) &&\n          (\"number\" === typeof input.authority ||\n            $guard(_exceptionable, {\n              path: _path + \".authority\",\n              expected: \"number\",\n              value: input.authority,\n            })) &&\n          ((\"string\" === typeof input.joined_at &&\n            (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at) ||\n              $guard(_exceptionable, {\n                path: _path + \".joined_at\",\n                expected: 'string & Format<\"date\">',\n                value: input.joined_at,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".joined_at\",\n              expected: '(string & Format<\"date\">)',\n              value: input.joined_at,\n            }));\n        return (\n          (((\"object\" === typeof input && null !== input) ||\n            $guard(true, {\n              path: _path + \"\",\n              expected: \"IDepartment\",\n              value: input,\n            })) &&\n            $ao0(input, _path + \"\", true)) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IDepartment\",\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  const clone = (input) => {\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      \"number\" === typeof input.age &&\n      19 < input.age &&\n      input.age <= 100 &&\n      \"number\" === typeof input.authority &&\n      \"string\" === typeof input.joined_at &&\n      /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n    const $cp0 = (input) =>\n      input.map((elem) =>\n        \"object\" === typeof elem && null !== elem ? $co1(elem) : elem,\n      );\n    const $co0 = (input) => ({\n      id: input.id,\n      name: input.name,\n      limit: input.limit,\n      clerks: Array.isArray(input.clerks) ? $cp0(input.clerks) : input.clerks,\n    });\n    const $co1 = (input) => ({\n      name: input.name,\n      age: input.age,\n      authority: input.authority,\n      joined_at: input.joined_at,\n    });\n    return \"object\" === typeof input && null !== input ? $co0(input) : input;\n  };\n  assert(input);\n  const output = clone(input);\n  return output;\n})(department);\nconsole.log(cloned);","prune-functions#prune() functions":"export function prune<T>(input: T): void;\nexport function assertPrune<T>(input: T | unknown): T;\nexport function isPrune<T>(input: T | unknown): T | null;\nexport function validatePrune<T>(input: T | unknown): IValidation<T>;\nexport function createPrune<T>(): (input: T) => void;\nexport function createAssertPrune<T>(): (input: T | unknown) => T;\nexport function createIsPrune<T>(): (input: T | unknown) => T | null;\nexport function createValidatePrune<T>(): (input: T | unknown) => IValidation<T>;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T = unknown> =\n  | IValidation.ISuccess<T>\n  | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T = unknown> {\n    success: true;\n    data: T;\n    errors: [];\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nDeep prune functions.When you want to remove every extra properties that are not defined in the type including nested objects, you can use typia.misc.prune<T>() function. Also, if you want to perform type safe pruning, you can use typia.misc.isPrune<T>(), typia.misc.assertPrune<T>() or typia.misc.validatePrune<T>() functions instead.\ntypia.misc.isPrune(): typia.is<T>() + typia.misc.prune<T>()\ntypia.misc.assertPrune(): typia.assert<T>() + typia.misc.prune<T>()\ntypia.misc.validatePrune(): typia.validate<T>() + typia.misc.prune<T>()\nimport typia from \"typia\";\nconst department: IDepartment = typia.misc.random<IDepartment>();\nconst pruned: IDepartment = typia.misc.assertPrune(department);\nconsole.log(pruned);\ninterface IDepartment {\n    /**\n     * @format uuid\n     */\n    id: string;\n    /**\n     * @minLength 3\n     */\n    name: string;\n    /**\n     * @type int\n     */\n    limit: number;\n    clerks: IClerk[];\n}\ninterface IClerk {\n    name: string;\n    /**\n     * @exclusiveMinimum 19\n     * @maximum 100\n     */\n    age: number;\n    authority: number;\n    /**\n     * @format date\n     */\n    joined_at: string;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst department = typia_1.default.misc.random();\nconst pruned = ((input) => {\n  const assert = (input) => {\n    const __is = (input) => {\n      const $io0 = (input) =>\n        \"string\" === typeof input.id &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          input.id,\n        ) &&\n        \"string\" === typeof input.name &&\n        3 <= input.name.length &&\n        \"number\" === typeof input.limit &&\n        Math.floor(input.limit) === input.limit &&\n        -2147483648 <= input.limit &&\n        input.limit <= 2147483647 &&\n        Array.isArray(input.clerks) &&\n        input.clerks.every(\n          (elem) => \"object\" === typeof elem && null !== elem && $io1(elem),\n        );\n      const $io1 = (input) =>\n        \"string\" === typeof input.name &&\n        \"number\" === typeof input.age &&\n        19 < input.age &&\n        input.age <= 100 &&\n        \"number\" === typeof input.authority &&\n        \"string\" === typeof input.joined_at &&\n        /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n      return \"object\" === typeof input && null !== input && $io0(input);\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.misc.assertPrune.guard;\n        const $ao0 = (input, _path, _exceptionable = true) =>\n          ((\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $guard(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            })) &&\n          ((\"string\" === typeof input.name &&\n            (3 <= input.name.length ||\n              $guard(_exceptionable, {\n                path: _path + \".name\",\n                expected: \"string & MinLength<3>\",\n                value: input.name,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"(string & MinLength<3>)\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.limit &&\n            ((Math.floor(input.limit) === input.limit &&\n              -2147483648 <= input.limit &&\n              input.limit <= 2147483647) ||\n              $guard(_exceptionable, {\n                path: _path + \".limit\",\n                expected: 'number & Type<\"int32\">',\n                value: input.limit,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".limit\",\n              expected: '(number & Type<\"int32\">)',\n              value: input.limit,\n            })) &&\n          (((Array.isArray(input.clerks) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            })) &&\n            input.clerks.every(\n              (elem, _index1) =>\n                (((\"object\" === typeof elem && null !== elem) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".clerks[\" + _index1 + \"]\",\n                    expected: \"IClerk\",\n                    value: elem,\n                  })) &&\n                  $ao1(\n                    elem,\n                    _path + \".clerks[\" + _index1 + \"]\",\n                    true && _exceptionable,\n                  )) ||\n                $guard(_exceptionable, {\n                  path: _path + \".clerks[\" + _index1 + \"]\",\n                  expected: \"IClerk\",\n                  value: elem,\n                }),\n            )) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            }));\n        const $ao1 = (input, _path, _exceptionable = true) =>\n          (\"string\" === typeof input.name ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"string\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.age &&\n            (19 < input.age ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"(number & ExclusiveMinimum<19> & Maximum<100>)\",\n              value: input.age,\n            })) &&\n          (\"number\" === typeof input.authority ||\n            $guard(_exceptionable, {\n              path: _path + \".authority\",\n              expected: \"number\",\n              value: input.authority,\n            })) &&\n          ((\"string\" === typeof input.joined_at &&\n            (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at) ||\n              $guard(_exceptionable, {\n                path: _path + \".joined_at\",\n                expected: 'string & Format<\"date\">',\n                value: input.joined_at,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".joined_at\",\n              expected: '(string & Format<\"date\">)',\n              value: input.joined_at,\n            }));\n        return (\n          (((\"object\" === typeof input && null !== input) ||\n            $guard(true, {\n              path: _path + \"\",\n              expected: \"IDepartment\",\n              value: input,\n            })) &&\n            $ao0(input, _path + \"\", true)) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IDepartment\",\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  const prune = (input) => {\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      \"number\" === typeof input.age &&\n      19 < input.age &&\n      input.age <= 100 &&\n      \"number\" === typeof input.authority &&\n      \"string\" === typeof input.joined_at &&\n      /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n    const $pp0 = (input) =>\n      input.forEach((elem) => {\n        if (\"object\" === typeof elem && null !== elem) $po1(elem);\n      });\n    const $po0 = (input) => {\n      if (Array.isArray(input.clerks)) $pp0(input.clerks);\n      for (const key of Object.keys(input)) {\n        if (\n          \"id\" === key ||\n          \"name\" === key ||\n          \"limit\" === key ||\n          \"clerks\" === key\n        )\n          continue;\n        delete input[key];\n      }\n    };\n    const $po1 = (input) => {\n      for (const key of Object.keys(input)) {\n        if (\n          \"name\" === key ||\n          \"age\" === key ||\n          \"authority\" === key ||\n          \"joined_at\" === key\n        )\n          continue;\n        delete input[key];\n      }\n    };\n    if (\"object\" === typeof input && null !== input) $po0(input);\n  };\n  assert(input);\n  prune(input);\n  return input;\n})(department);\nconsole.log(pruned);","literals-function#literals() function":"export namespace misc {\n  export function literals<\n    T extends boolean | number | string | bigint | null,\n  >(): T[];\n}\nUnion literal type to array.When you call typia.misc.literals<T>() function with union literal type, it returns an array of literal values listed in the generic T argument. This typia.misc.literals<T> function is useful when you are developing test program, especially handling some discriminated union types.\nimport typia from \"typia\";\ntypia.misc.literals<\"A\" | \"B\" | \"C\" | 1 | 2n>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n[\"A\", \"B\", \"C\", 1, BigInt(2)];","notations-module#notations module":"","camel-functions#camel() functions":"export namespace notations {\n  export function camel<T>(input: T): CamelCase<T>;\n  export function assertCamel<T>(input: T | unknown): CamelCase<T>;\n  export function isCamel<T>(input: T | unknown): CamelCase<T> | null;\n  export function validateCamel<T>(\n    input: T | unknown,\n  ): IValidation<CamelCase<T>>;\n  export function createCamel<T>(): (input: T) => CamelCase<T>;\n  export function createAssertCamel<T>(): (input: T | unknown) => CamelCase<T>;\n  export function createIsCamel<T>(): (\n    input: T | unknown,\n  ) => CamelCase<T> | null;\n  export function createValidateCamel<T>(): (\n    input: T | unknown,\n  ) => IValidation<CamelCase<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Camel case type.\n *\n * `CamelCase` type is a type that all keys of an object are camelized.\n *\n * It also erase every method properties like {@link Resolved} type.\n *\n * @template T Target type to be camelized\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type CamelCase<T> = Equal<T, CamelizeMain<T>> extends true\n  ? T\n  : CamelizeMain<T>;\n/* -----------------------------------------------------------\n    OBJECT CONVERSION\n----------------------------------------------------------- */\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype CamelizeMain<T> = T extends [never]\n  ? never // special trick for (jsonable | null) type\n  : T extends { valueOf(): boolean | bigint | number | string }\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? CamelizeObject<T>\n  : T;\ntype CamelizeObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? CamelizeTuple<T>\n    : CamelizeMain<U>[]\n  : T extends Set<infer U>\n  ? Set<CamelizeMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<CamelizeMain<K>, CamelizeMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [Key in keyof T as CamelizeString<Key & string>]: CamelizeMain<T[Key]>;\n    };\n/* -----------------------------------------------------------\n    SPECIAL CASES\n----------------------------------------------------------- */\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype CamelizeTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [CamelizeMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [CamelizeMain<F>, ...CamelizeTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [CamelizeMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [CamelizeMain<F>?, ...CamelizeTuple<Rest>]\n  : [];\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\n/* -----------------------------------------------------------\n    STRING CONVERTER\n----------------------------------------------------------- */\ntype CamelizeString<Key extends string> = Key extends `_${infer R}`\n  ? `_${CamelizeString<R>}`\n  : Key extends `${infer F}${infer R}`\n  ? `${Lowercase<F>}${CamelizeStringRepeatedly<R>}`\n  : Key;\ntype CamelizeStringRepeatedly<Key extends string> =\n  Key extends `${infer F}_${infer R}`\n    ? `${F}${Capitalize<CamelizeStringRepeatedly<R>>}`\n    : Key;\nCamel case converters.Convert every property names of nested objects to be camel case notation.When you need type safe functions, you can utilize below them.\ntypia.notations.assertCamel<T>(): typia.assert<T>() + typia.notations.camel<T>()\ntypia.notations.isCamel<T>: typia.is<T>() + typia.notations.camel<T>()\ntypia.notations.validateCamel<T>: typia.validate<T>() + typia.notations.camel<T>()\nimport typia from \"typia\";\ninterface IPerson {\n  is_my_name_samchon?: boolean;\n  HelloTheNewWorld: string;\n  ToHTML: string;\n}\ntypia.notations.createCamel<IPerson>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $co0 = (input) => ({\n    isMyNameSamchon: input.is_my_name_samchon,\n    helloTheNewWorld: input.HelloTheNewWorld,\n    toHTML: input.ToHTML,\n  });\n  return \"object\" === typeof input && null !== input ? $co0(input) : input;\n};","pascal-functions#pascal() functions":"export namespace notations {\n  export function pascal<T>(input: T): PascalCase<T>;\n  export function assertPascal<T>(input: T | unknown): PascalCase<T>;\n  export function isPascal<T>(input: T | unknown): PascalCase<T> | null;\n  export function validatePascal<T>(\n    input: T | unknown,\n  ): IValidation<PascalCase<T>>;\n  export function createPascal<T>(): (input: T) => PascalCase<T>;\n  export function createAssertPascal<T>(): (\n    input: T | unknown,\n  ) => PascalCase<T>;\n  export function createIsPascal<T>(): (\n    input: T | unknown,\n  ) => PascalCase<T> | null;\n  export function createValidatePascal<T>(): (\n    input: T | unknown,\n  ) => IValidation<PascalCase<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Pascal case type.\n *\n * `PascalCase` type is a type that all keys of an object are pascalized.\n *\n * It also erase every method properties like {@link Resolved} type.\n *\n * @template T Target type to be pascalized\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type PascalCase<T> = Equal<T, PascalizeMain<T>> extends true\n  ? T\n  : PascalizeMain<T>;\n/* -----------------------------------------------------------\n    OBJECT CONVERSION\n----------------------------------------------------------- */\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype PascalizeMain<T> = T extends [never]\n  ? never // special trick for (jsonable | null) type\n  : T extends { valueOf(): boolean | bigint | number | string }\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? PascalizeObject<T>\n  : T;\ntype PascalizeObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? PascalizeTuple<T>\n    : PascalizeMain<U>[]\n  : T extends Set<infer U>\n  ? Set<PascalizeMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<PascalizeMain<K>, PascalizeMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [Key in keyof T as PascalizeString<Key & string>]: PascalizeMain<T[Key]>;\n    };\n/* -----------------------------------------------------------\n    SPECIAL CASES\n----------------------------------------------------------- */\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype PascalizeTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [PascalizeMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [PascalizeMain<F>, ...PascalizeTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [PascalizeMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [PascalizeMain<F>?, ...PascalizeTuple<Rest>]\n  : [];\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\n/* -----------------------------------------------------------\n    STRING CONVERTER\n----------------------------------------------------------- */\ntype PascalizeString<Key extends string> = Key extends `_${infer R}`\n  ? `_${PascalizeString<R>}`\n  : Key extends `${infer F}${infer R}`\n  ? `${Uppercase<F>}${PascalizeStringRepeatedly<R>}`\n  : Key;\ntype PascalizeStringRepeatedly<Key extends string> =\n  Key extends `${infer F}_${infer R}`\n    ? `${F}${Capitalize<PascalizeStringRepeatedly<R>>}`\n    : Key;\nPascal case converters.Convert every property names of nested objects to be pascal case notation.When you need type safe functions, you can utilize below them.\ntypia.notations.assertPascal<T>(): typia.assert<T>() + typia.notations.pascal<T>()\ntypia.notations.isPascal<T>: typia.is<T>() + typia.notations.pascal<T>()\ntypia.notations.validatePascal<T>: typia.validate<T>() + typia.notations.pascal<T>()\nimport typia from \"typia\";\ninterface IPerson {\n  is_my_name_samchon?: boolean;\n  helloTheNewWorld: string;\n  toHTML: string;\n}\ntypia.notations.createPascal<IPerson>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $co0 = (input) => ({\n    IsMyNameSamchon: input.is_my_name_samchon,\n    HelloTheNewWorld: input.helloTheNewWorld,\n    ToHTML: input.toHTML,\n  });\n  return \"object\" === typeof input && null !== input ? $co0(input) : input;\n};","snake-functions#snake() functions":"export namespace notations {\n  export function snake<T>(input: T): SnakeCase<T>;\n  export function assertSnake<T>(input: T | unknown): SnakeCase<T>;\n  export function isSnake<T>(input: T | unknown): SnakeCase<T> | null;\n  export function validateSnake<T>(\n    input: T | unknown,\n  ): IValidation<SnakeCase<T>>;\n  export function createSnake<T>(): (input: T) => SnakeCase<T>;\n  export function createAssertSnake<T>(): (input: T | unknown) => SnakeCase<T>;\n  export function createIsSnake<T>(): (\n    input: T | unknown,\n  ) => SnakeCase<T> | null;\n  export function createValidateSnake<T>(): (\n    input: T | unknown,\n  ) => IValidation<SnakeCase<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Snake case type.\n *\n * `SnakeCase` type is a type that all keys of an object are converted to snake case.\n *\n * It also erase every method properties like {@link Resolved} type.\n *\n * @template T Target type to be snake cased\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type SnakeCase<T> = Equal<T, SnakageMain<T>> extends true\n  ? T\n  : SnakageMain<T>;\n/* -----------------------------------------------------------\n    OBJECT CONVERSION\n----------------------------------------------------------- */\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype SnakageMain<T> = T extends [never]\n  ? never // special trick for (jsonable | null) type\n  : T extends { valueOf(): boolean | bigint | number | string }\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? SnakageObject<T>\n  : T;\ntype SnakageObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? SnakageTuple<T>\n    : SnakageMain<U>[]\n  : T extends Set<infer U>\n  ? Set<SnakageMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<SnakageMain<K>, SnakageMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [Key in keyof T as SnakageString<Key & string>]: SnakageMain<T[Key]>;\n    };\n/* -----------------------------------------------------------\n    SPECIAL CASES\n----------------------------------------------------------- */\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype SnakageTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [SnakageMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [SnakageMain<F>, ...SnakageTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [SnakageMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [SnakageMain<F>?, ...SnakageTuple<Rest>]\n  : [];\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\n/* -----------------------------------------------------------\n    STRING CONVERTER\n----------------------------------------------------------- */\ntype SnakageString<Key extends string> = Key extends `${infer _}`\n  ? SnakageStringRepeatedly<Key, \"\">\n  : Key;\ntype SnakageStringRepeatedly<\n  S extends string,\n  Previous extends string,\n> = S extends `${infer First}${infer Second}${infer Rest}`\n  ? `${Underscore<Previous, First>}${Lowercase<First>}${Underscore<\n      First,\n      Second\n    >}${Lowercase<Second>}${SnakageStringRepeatedly<Rest, Second>}`\n  : S extends `${infer First}`\n  ? `${Underscore<Previous, First>}${Lowercase<First>}`\n  : \"\";\ntype Underscore<First extends string, Second extends string> = First extends\n  | UpperAlphabetic\n  | \"\"\n  | \"_\"\n  ? \"\"\n  : Second extends UpperAlphabetic\n  ? \"_\"\n  : \"\";\ntype UpperAlphabetic =\n  | \"A\"\n  | \"B\"\n  | \"C\"\n  | \"D\"\n  | \"E\"\n  | \"F\"\n  | \"G\"\n  | \"H\"\n  | \"I\"\n  | \"J\"\n  | \"K\"\n  | \"L\"\n  | \"M\"\n  | \"N\"\n  | \"O\"\n  | \"P\"\n  | \"Q\"\n  | \"R\"\n  | \"S\"\n  | \"T\"\n  | \"U\"\n  | \"V\"\n  | \"W\"\n  | \"X\"\n  | \"Y\"\n  | \"Z\";\nSnake case converters.Convert every property names of nested objects to be snake case notation.When you need type safe functions, you can utilize below them.\ntypia.notations.assertSnake<T>(): typia.assert<T>() + typia.notations.snake<T>()\ntypia.notations.isSnake<T>: typia.is<T>() + typia.notations.snake<T>()\ntypia.notations.validateSnake<T>: typia.validate<T>() + typia.notations.snake<T>()\nimport typia from \"typia\";\ninterface IPerson {\n  isMyNameSamchon?: boolean;\n  HelloTheNewWorld: string;\n  ToHTML: string;\n}\ntypia.notations.createSnake<IPerson>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $co0 = (input) => ({\n    is_my_name_samchon: input.isMyNameSamchon,\n    hello_the_new_world: input.HelloTheNewWorld,\n    to_html: input.ToHTML,\n  });\n  return \"object\" === typeof input && null !== input ? $co0(input) : input;\n};","http-module#http module":"Nestia Supporting\nhttp module has been designed to support the nestia project.\nquery() functions -> @TypedQuery()\nheaders() functions -> @TypedHeaders()\nparameter() function -> @TypedParam()","query-functions#query() functions":"export namespace http {\n  export function query<T extends object>(input: Query): Resolved<T>;\n  export function assertQuery<T extends object>(input: Query): Resolved<T>;\n  export function isQuery<T extends object>(input: Query): Resolved<T> | null;\n  export function validateQuery<T extends object>(\n    input: Query,\n  ): IValidation<Resolved<T>>;\n  export function createQuery<T extends object>(): (\n    input: Query,\n  ) => Resolved<T>;\n  export function createAssertQuery<T extends object>(): (\n    input: Query,\n  ) => Resolved<T>;\n  export function createIsQuery<T extends object>(): (\n    input: Query,\n  ) => Resolved<T> | null;\n  export function createValidateQuery<T extends object>(): (\n    input: Query,\n  ) => IValidation<Resolved<T>>;\n}\ntype Query = string | URLSearchParams;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nURL query decoder functions.typia.http.query<T>() is a function decoding a query string or an URLSearchParams instance, with automatic type casting to the expected type. When property type be defined as boolean or number type, typia.http.query<T>() will cast the value to the expected type when decoding.By the way, as URL query is not enough to express complex data structures, typia.http.query<T>() function has some limitations. If target type T is not following those restrictions, compilation errors would be occured.\nType T must be an object type\nDo not allow dynamic property\nOnly boolean, bigint, number, string or their array types are allowed\nBy the way, union type never be not allowed\nAlso, typia.http.query<T>() function does not perform validation about the decoded value. Therefore, if you can't sure that input data is following the T type, it would better to call one of below functions intead.\ntypia.http.assertQuery<T>(): typia.assert<T>() + typia.http.query<T>()\ntypia.http.isQuery<T>(): typia.is<T>() + typia.http.query<T>()\ntypia.http.validateQuery<T>(): typia.validate<T>() + typia.http.query<T>()\nimport typia from \"typia\";\ninterface IQuery {\n  limit?: number;\n  enforce: boolean;\n  values?: string[];\n  atomic: string | null;\n  indexes: number[];\n}\ntypia.http.createQuery<IQuery>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $params = typia_1.default.http.createQuery.params;\n  const $number = typia_1.default.http.createQuery.number;\n  const $boolean = typia_1.default.http.createQuery.boolean;\n  const $string = typia_1.default.http.createQuery.string;\n  const $array = typia_1.default.http.createQuery.array;\n  input = $params(input);\n  const output = {\n    limit: $number(input.get(\"limit\")) ?? undefined,\n    enforce: $boolean(input.get(\"enforce\")),\n    values: $array(\n      input.getAll(\"values\").map((elem) => $string(elem)),\n      undefined,\n    ),\n    atomic: $string(input.get(\"atomic\")),\n    indexes: input.getAll(\"indexes\").map((elem) => $number(elem)),\n  };\n  return output;\n};","headers-functions#headers() functions":"export namespace http {\n  export function headers<T extends object>(input: Headers): Resolved<T>;\n  export function assertHeaders<T extends object>(input: Headers): Resolved<T>;\n  export function isHeaders<T extends object>(\n    input: Headers,\n  ): Resolved<T> | null;\n  export function validateHeaders<T extends object>(\n    input: Headers,\n  ): IValidation<Resolved<T>>;\n  export function createHeaders<T extends object>(): (\n    input: Headers,\n  ) => Resolved<T>;\n  export function createAssertHeaders<T extends object>(): (\n    input: Headers,\n  ) => Resolved<T>;\n  export function createIsHeaders<T extends object>(): (\n    input: Headers,\n  ) => Resolved<T> | null;\n  export function createValidateHeaders<T extends object>(): (\n    input: Headers,\n  ) => IValidation<Resolved<T>>;\n}\ntype Headers = Record<string, string | string[] | undefined>;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nHeaders decoder (for express and fastify).typia.http.headers<t>() is a function decoding an header instance, with automatic type casting to the expected type. When property type be defined as boolean or number type, typia.http.headers<t>() will cast the value to the expected type.By the way, as HTTP headers are not enough to express complex data structures, typia.http.headers<t>() function has some limitations. If target type T is not following those restrictions, compilation errors would be occured.\nType T must be an object type\nDo not allow dynamic property\nProperty key must be lower case\nProperty value cannot be null, but undefined is possible\nOnly boolean, bigint, number, string or their array types are allowed\nBy the way, union type never be not allowed\nProperty set-cookie must be array type\nThose properties cannot be array type\nage\nauthorization\ncontent-length\ncontent-type\netag\nexpires\nfrom\nhost\nif-modified-since\nif-unmodified-since\nlast-modified\nlocation\nmax-forwards\nproxy-authorization\nreferer\nretry-after\nserver\nuser-agent\nAlso, typia.http.headers<t>() function does not perform validation about the decoded value. Therefore, if you can't sure that input data is following the T type, it would better to call one of below functions intead.\ntypia.http.assertHeaders<T>(): typia.assert<T>() + typia.http.headers<T>()\ntypia.http.isHeaders<T>(): typia.is<T>() + typia.http.headers<T>()\ntypia.http.validateHeaders<T>(): typia.validate<T>() + typia.http.headers<T>()\nimport typia from \"typia\";\ninterface IHeaders {\n  \"x-Category\": \"x\" | \"y\" | \"z\";\n  \"x-MEMO\"?: string;\n  \"x-nAmE\"?: string;\n  \"x-ValUes\": number[];\n  \"x-FlAgS\": boolean[];\n  \"X-Descriptions\": string[];\n}\ntypia.http.createHeaders<IHeaders>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $number = typia_1.default.http.createHeaders.number;\n  const $boolean = typia_1.default.http.createHeaders.boolean;\n  const $string = typia_1.default.http.createHeaders.string;\n  const output = {\n    \"x-Category\": input[\"x-category\"],\n    \"x-MEMO\": input[\"x-memo\"],\n    \"x-nAmE\": input[\"x-name\"],\n    \"x-ValUes\": Array.isArray(input[\"x-values\"])\n      ? input[\"x-values\"].map($number)\n      : input[\"x-values\"]?.split(\", \")?.map($number) ?? [],\n    \"x-FlAgS\": Array.isArray(input[\"x-flags\"])\n      ? input[\"x-flags\"].map($boolean)\n      : input[\"x-flags\"]?.split(\", \")?.map($boolean) ?? [],\n    \"X-Descriptions\": Array.isArray(input[\"x-descriptions\"])\n      ? input[\"x-descriptions\"].map($string)\n      : input[\"x-descriptions\"]?.split(\", \")?.map($string) ?? [],\n  };\n  return output;\n};","parameter-functions#parameter() functions":"export namespace http {\n  export function parameter<T extends Atomic.Type | null>(input: string): T;\n  export function createParameter<T extends Atomic.Type | null>(): (\n    input: string,\n  ) => T;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nURL path parameter decoder.typia.http.parameter<T>() is a function decoding a path parameter, with automatic type casting to the expected type. When type T has beeen defined as boolean or number type, typia.http.parameter<T>() will cast the value to the expected type.Also, typia.http.parameter<T>() performs type assertion to the decoded value by combining with assert function. Therefore, when the decoded value is not following the T type, TypeGuardError would be thrown.\nimport typia, { tags } from \"typia\";\ntypia.http.createParameter<string & tags.Format<\"uuid\">>();\ntypia.http.createParameter<number & tags.Type<\"uint32\">>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  const $string = typia_1.default.http.createParameter.string;\n  const assert = (input) => {\n    const __is = (input) => {\n      return (\n        \"string\" === typeof input &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          input,\n        )\n      );\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.http.createParameter.guard;\n        return (\n          (\"string\" === typeof input &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input,\n            ) ||\n              $guard(true, {\n                path: _path + \"\",\n                expected: 'string & Format<\"uuid\">',\n                value: input,\n              }))) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: '(string & Format<\"uuid\">)',\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  const value = $string(input);\n  return assert(value);\n};\n(input) => {\n  const $number = typia_1.default.http.createParameter.number;\n  const assert = (input) => {\n    const __is = (input) => {\n      return (\n        \"number\" === typeof input &&\n        Math.floor(input) === input &&\n        0 <= input &&\n        input <= 4294967295\n      );\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.http.createParameter.guard;\n        return (\n          (\"number\" === typeof input &&\n            ((Math.floor(input) === input &&\n              0 <= input &&\n              input <= 4294967295) ||\n              $guard(true, {\n                path: _path + \"\",\n                expected: 'number & Type<\"uint32\">',\n                value: input,\n              }))) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: '(number & Type<\"uint32\">)',\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  const value = $number(input);\n  return assert(value);\n};"}},"/docs/random":{"title":"Random","data":{"random-function#random() function":"export function random<T>(g?: IRandomGenerator): Resolved<T>;\nimport { Customizable } from \"./typings/Customizable\";\nexport interface IRandomGenerator {\n  // REGULAR\n  boolean(): boolean;\n  integer(minimum?: number, maximum?: number): number;\n  bigint(minimum?: bigint, maximum?: bigint): bigint;\n  number(minimum?: number, maximum?: number): number;\n  string(length?: number): string;\n  array<T>(closure: (index: number) => T, count?: number): T[];\n  length(): number;\n  pattern(regex: RegExp): string;\n  //----\n  // FORMAT\n  //----\n  // SPECIAL CHARACTERS\n  byte(): string;\n  password(): string;\n  regex(): string;\n  uuid(): string;\n  // ADDRESSES\n  email(): string;\n  hostname(): string;\n  idnEmail(): string;\n  idnHostname(): string;\n  iri(): string;\n  iriReference(): string;\n  ipv4(): string;\n  ipv6(): string;\n  uri(): string;\n  uriReference(): string;\n  uriTemplate(): string;\n  url(): string;\n  // TIMESTAMPS\n  datetime(minimum?: number, maximum?: number): string;\n  date(minimum?: number, maximum?: number): string;\n  time(): string;\n  duration(): string;\n  // POINTERS\n  jsonPointer(): string;\n  relativeJsonPointer(): string;\n  customs?: IRandomGenerator.CustomMap;\n}\nexport namespace IRandomGenerator {\n  export type CustomMap = {\n    [Type in keyof Customizable]?: (\n      tags: ITypeTag[],\n    ) => Customizable[Type] | undefined;\n  };\n  export interface ITypeTag {\n    name: string;\n    kind: string;\n    value: any;\n  }\n}\nexport interface Customizable {\n  number: number;\n  string: string;\n  bigint: bigint;\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nYou can make every random data just by calling typia.random<T>() function.When you call the typia.random<T>() function, typia will analyze your type T, and writes optimal random generation code for the type T, in the compilation level. This is called AOT (Ahead of Time) compliation, and you may understand what it is just by reading below example code.\nimport typia, { tags } from \"typia\";\nconst member: IMember = typia.random<IMember>();\nconsole.log(member);\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst member = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    id:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"uuid\">',\n          kind: \"format\",\n          value: \"uuid\",\n        },\n      ]) ?? (generator?.uuid ?? $generator.uuid)(),\n    email:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"email\">',\n          kind: \"format\",\n          value: \"email\",\n        },\n      ]) ?? (generator?.email ?? $generator.email)(),\n    age:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"uint32\">',\n          kind: \"type\",\n          value: \"uint32\",\n        },\n        {\n          name: \"ExclusiveMinimum<19>\",\n          kind: \"exclusiveMinimum\",\n          value: 19,\n        },\n        {\n          name: \"Maximum<100>\",\n          kind: \"maximum\",\n          value: 100,\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(19, 100),\n  });\n  return $ro0();\n})();\nconsole.log(member);","reusable-function#Reusable function":"export function createRandom<T>(): (g?: IRandomGenerator) => Resolved<T>;\nimport { Customizable } from \"./typings/Customizable\";\nexport interface IRandomGenerator {\n  // REGULAR\n  boolean(): boolean;\n  integer(minimum?: number, maximum?: number): number;\n  bigint(minimum?: bigint, maximum?: bigint): bigint;\n  number(minimum?: number, maximum?: number): number;\n  string(length?: number): string;\n  array<T>(closure: (index: number) => T, count?: number): T[];\n  length(): number;\n  pattern(regex: RegExp): string;\n  //----\n  // FORMAT\n  //----\n  // SPECIAL CHARACTERS\n  byte(): string;\n  password(): string;\n  regex(): string;\n  uuid(): string;\n  // ADDRESSES\n  email(): string;\n  hostname(): string;\n  idnEmail(): string;\n  idnHostname(): string;\n  iri(): string;\n  iriReference(): string;\n  ipv4(): string;\n  ipv6(): string;\n  uri(): string;\n  uriReference(): string;\n  uriTemplate(): string;\n  url(): string;\n  // TIMESTAMPS\n  datetime(minimum?: number, maximum?: number): string;\n  date(minimum?: number, maximum?: number): string;\n  time(): string;\n  duration(): string;\n  // POINTERS\n  jsonPointer(): string;\n  relativeJsonPointer(): string;\n  customs?: IRandomGenerator.CustomMap;\n}\nexport namespace IRandomGenerator {\n  export type CustomMap = {\n    [Type in keyof Customizable]?: (\n      tags: ITypeTag[],\n    ) => Customizable[Type] | undefined;\n  };\n  export interface ITypeTag {\n    name: string;\n    kind: string;\n    value: any;\n  }\n}\nexport interface Customizable {\n  number: number;\n  string: string;\n  bigint: bigint;\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}","special-tags#Special Tags":"Runtime validators of typia provides additional type checking logic through Type Tags and Comment Tags. typia.random<T>() function also like that. typia.random<T>() function can utilize those tags to specialize the behavior of random data generation.For reference, whether you choose Type Tags or Comment Tags. typia.random<T>(), it is not a matter for typia.random<T>() function. Below two TypeScript codes are generating exactly same JavaScript code. Therefore, you can choose whatever you want considering your preference.\nimport typia, { tags } from \"typia\";\nconst data: TypeTag = typia.random<TypeTag>();\nconsole.log(data);\ninterface TypeTag {\n  type: number & tags.Type<\"int32\">;\n  number?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  string: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  format: (string & tags.Format<\"date-time\">) | null;\n}\nimport typia from \"typia\";\nconst data: CommentTag = typia.random<CommentTag>();\nconsole.log(data);\ninterface CommentTag {\n  /**\n   * @type int\n   */\n  type: number;\n  /**\n   * @exclusiveMinimum 19\n   * @maximum 100\n   */\n  number?: number;\n  /**\n   * @minLength 3\n   */\n  string: string;\n  /**\n   * @pattern ^[a-z]+$\n   */\n  pattern: string;\n  /**\n   * @format date-time\n   */\n  format: string | null;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst data = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $pick = typia_1.default.random.pick;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    type:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"int32\">',\n          kind: \"type\",\n          value: \"int32\",\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(0, 100),\n    number: $pick([\n      () => undefined,\n      () =>\n        (generator?.customs ?? $generator.customs)?.number?.([\n          {\n            name: \"ExclusiveMinimum<19>\",\n            kind: \"exclusiveMinimum\",\n            value: 19,\n          },\n          {\n            name: \"Maximum<100>\",\n            kind: \"maximum\",\n            value: 100,\n          },\n        ]) ?? (generator?.number ?? $generator.number)(19, 100),\n    ])(),\n    string:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: \"MinLength<3>\",\n          kind: \"minLength\",\n          value: 3,\n        },\n      ]) ??\n      (generator?.string ?? $generator.string)(\n        (generator?.integer ?? $generator.integer)(3, 25),\n      ),\n    pattern:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Pattern<\"^[a-z]+$\">',\n          kind: \"pattern\",\n          value: \"^[a-z]+$\",\n        },\n      ]) ?? (generator?.pattern ?? $generator.pattern)(/^[a-z]+$/),\n    format: $pick([\n      () => null,\n      () =>\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"date-time\">',\n            kind: \"format\",\n            value: \"date-time\",\n          },\n        ]) ?? (generator?.datetime ?? $generator.datetime)(),\n    ])(),\n  });\n  return $ro0();\n})();\nconsole.log(data);","customization#Customization":"import { Customizable } from \"./typings/Customizable\";\nexport interface IRandomGenerator {\n  // REGULAR\n  boolean(): boolean;\n  integer(minimum?: number, maximum?: number): number;\n  bigint(minimum?: bigint, maximum?: bigint): bigint;\n  number(minimum?: number, maximum?: number): number;\n  string(length?: number): string;\n  array<T>(closure: (index: number) => T, count?: number): T[];\n  length(): number;\n  pattern(regex: RegExp): string;\n  //----\n  // FORMAT\n  //----\n  // SPECIAL CHARACTERS\n  byte(): string;\n  password(): string;\n  regex(): string;\n  uuid(): string;\n  // ADDRESSES\n  email(): string;\n  hostname(): string;\n  idnEmail(): string;\n  idnHostname(): string;\n  iri(): string;\n  iriReference(): string;\n  ipv4(): string;\n  ipv6(): string;\n  uri(): string;\n  uriReference(): string;\n  uriTemplate(): string;\n  url(): string;\n  // TIMESTAMPS\n  datetime(minimum?: number, maximum?: number): string;\n  date(minimum?: number, maximum?: number): string;\n  time(): string;\n  duration(): string;\n  // POINTERS\n  jsonPointer(): string;\n  relativeJsonPointer(): string;\n  customs?: IRandomGenerator.CustomMap;\n}\nexport namespace IRandomGenerator {\n  export type CustomMap = {\n    [Type in keyof Customizable]?: (\n      tags: ITypeTag[],\n    ) => Customizable[Type] | undefined;\n  };\n  export interface ITypeTag {\n    name: string;\n    kind: string;\n    value: any;\n  }\n}\nexport interface Customizable {\n  number: number;\n  string: string;\n  bigint: bigint;\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nYou can add custom type tags for random data generation.As above IRandomGenerator.CustomMap has a little bit complicate type, it may hard to understand for newcomers. However, such newcomers may easily understand, how to customize the random generation, just by reading the following example.Just define custom type tags like below, then everything would be done.For reference, when defining custom type tag, typia enforces user to define validate function literal for type safety. Never forget it when you define custom type tags for random generation. Such validation logic definition may enhance your random data generator logic when combining with typia.assert<T>() function.\nimport typia from \"typia\";\nimport { RandomGenerator } from \"typia/lib/utils/RandomGenerator\";\nconst data: TagCustom = typia.random<TagCustom>({\n  customs: {\n    string: (tags) => {\n      if (tags.find((t) => t.kind === \"dollar\") !== undefined)\n        return \"$\" + RandomGenerator.integer();\n      const postfix = tags.find((t) => t.kind === \"postfix\");\n      if (postfix !== undefined)\n        return RandomGenerator.string() + postfix.value;\n    },\n  },\n});\nconsole.log(data);\ninterface TagCustom {\n  id: string & typia.tags.Format<\"uuid\">;\n  dollar: string & Dolloar;\n  postfix: string & Postfix<\"abcd\">;\n  powerOf: number & PowerOf<2>;\n}\ntype Dolloar = typia.tags.TagBase<{\n  kind: \"dollar\";\n  target: \"string\";\n  value: undefined;\n  validate: `$input[0] === \"$\" && !isNaN(Number($input.substring(1).split(\",\").join(\"\")))`;\n}>;\ntype Postfix<Value extends string> = typia.tags.TagBase<{\n  kind: \"postfix\";\n  target: \"string\";\n  value: Value;\n  validate: `$input.endsWith(\"${Value}\")`;\n}>;\ntype PowerOf<Value extends number> = typia.tags.TagBase<{\n  kind: \"powerOf\";\n  target: \"number\";\n  value: Value;\n  validate: `(() => {\n        const denominator: number = Math.log(${Value});\n        const value: number = Math.log($input) / denominator;\n        return Math.abs(value - Math.round(value)) < 0.00000001;\n    })()`;\n}>;\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst RandomGenerator_1 = require(\"typia/lib/utils/RandomGenerator\");\nconst data = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    id:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"uuid\">',\n          kind: \"format\",\n          value: \"uuid\",\n        },\n      ]) ?? (generator?.uuid ?? $generator.uuid)(),\n    dollar:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: \"Dolloar\",\n          kind: \"dollar\",\n        },\n      ]) ?? (generator?.string ?? $generator.string)(),\n    postfix:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Postfix<\"abcd\">',\n          kind: \"postfix\",\n          value: \"abcd\",\n        },\n      ]) ?? (generator?.string ?? $generator.string)(),\n    powerOf:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: \"PowerOf<2>\",\n          kind: \"powerOf\",\n          value: 2,\n        },\n      ]) ?? (generator?.number ?? $generator.number)(0, 100),\n  });\n  return $ro0();\n})({\n  customs: {\n    string: (tags) => {\n      if (tags.find((t) => t.kind === \"dollar\") !== undefined)\n        return \"$\" + RandomGenerator_1.RandomGenerator.integer();\n      const postfix = tags.find((t) => t.kind === \"postfix\");\n      if (postfix !== undefined)\n        return RandomGenerator_1.RandomGenerator.string() + postfix.value;\n    },\n  },\n});\nconsole.log(data);"}},"/docs/utilization/hono":{"title":"Hono","data":{"":"Hono is a small, simple, and ultrafast web framework for the Edges.If you are using Hono with typia, you can use  @hono/typia-validator  to validate the request body.\nimport { Hono } from \"hono\";\nimport { typiaValidator } from '@hono/typia-validator'\nimport typia, { type tags } from \"typia\";\nimport { IBbsArticle } from \"../structures/IBbsArticle\";\n/** create a validate function */\nconst validate = typia.createValidate<IBbsArticle>();\nconst app = new Hono();\napp.post(\"/\",\n  typiaValidator('json', validate),\n  (c) => {\n    const data = c.req.valid(\"json\");\n    return c.json({\n      id: data.id,\n      title: data.title,\n      body: data.body,\n      created_at: data.created_at,\n    });\n  });\nexport default app;"}},"/docs/utilization/nestjs":{"title":"Nestjs","data":{"":"Nestia is a set of helper libraries for NestJS, supporting below features:\n@nestia/core: superfast decorators using typia\n@nestia/sdk: evolved SDK and Swagger generators\n@nestia/migrate: Swagger to NestJS\nnestia: just CLI (command line interface) tool\nimport { Controller } from \"@nestjs/common\";\nimport { TypedBody, TypedRoute } from \"@nestia/core\";\nimport type { IBbsArticle } from \"@bbs-api/structures/IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  /**\n   * Store a new content.\n   *\n   * @param input Content to store\n   * @returns Newly archived article\n   */\n  @TypedRoute.Post() // 200x faster and safer JSON.stringify()\n  public async store(\n    @TypedBody() input: IBbsArticle.IStore, // 20,000x faster validator\n  ): Promise<IBbsArticle>;\n    // do not need DTO class definition,\n    // just fine with interface\n}\nLeft: NestJS server code\nRight: Client code using SDK"}},"/docs/utilization/prisma":{"title":"Prisma","data":{"":"model bbs_articles {\n  id String @id @db.Uuid /// @format uuid\n  created_at DateTime @db.Timestamptz\n  /// @minItems 1\n  snapshots bbs_article_snapshots[]\n}\nmodel bbs_article_snapshots {\n  id String @id @db.Uuid /// @format uuid\n  bbs_article_id String @db.Uuid /// @format uuid\n  format String @db.VarChar\n  /// @minLength 5\n  /// @maxLength 80\n  title String @db.VarChar\n  body String\n  created_at DateTime @db.Timestamptz\n  article bbs_articles @relation(fields: [bbs_article_id], references: [id])\n}\n/**\n * Model bbs_articles\n */\nexport type bbs_articles = {\n  /**\n   * @format uuid\n   */\n  id: string\n  created_at: Date\n}\n/**\n * Model bbs_article_snapshots\n */\nexport type bbs_article_snapshots = {\n  /**\n   * @format uuid\n   */\n  id: string\n  /**\n   * @format uuid\n   */\n  bbs_article_id: string\n  format: string\n  /**\n   * @minLength 5\n   * @maxLength 80\n   */\n  title: string\n  body: string\n  created_at: Date\n}\nWhen defining prisma.schema file, you can write comment tags just by using /// statement.After the definition, you utillize some validate function like typia.assert<T>(), for type safe insertion."}},"/docs/validators/functional":{"title":"Functional","data":{"assertfunction#assertFunction()":"export namespace functional {\n  export function assertFunction<T extends Function>(func: T): T;\n  export function assertParameters<T extends Function>(func: T): T;\n  export function assertReturn<T extends Function>(func: T): T;\n  export function assertEqualsFunction<T extends Function>(func: T): T;\n  export function assertEqualsParameters<T extends Function>(func: T): T;\n  export function assertEqualsReturn<T extends Function>(func: T): T;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nAsserts a function.typia.functional.assertFunction<T>() asserts a function, by wrapping the parameter function and checking its parametrs and return value through typia.assert<T>() function. If some parameter or return value does not match the expected type, it throws a TypeGuardError error.For reference, TypeGuardError.path would be a little bit different with individual typia.assert<T>() function. If TypeGuardError occurs from some parameter, the path wouold start from $input.parameters[<index>]. Otherwise the path would start from $input.return.\n$input.parameters[0].~\n$input.return.~\nBy the way, if you don't want to assert both paramters and return value, but one of them, you can use typia.functional.assertParameters<T>() or typia.functional.assertReturn<T>() instead. Otherwise, if you want to prohibit superfluous properties, typia.functional.assertEqualsFunction<T>() would be helpful.Also, if what you want is not just finding the first type error through assertion, but also finding every type errors, utilize typia.functional.validateFunction<T>() function instead. Otherwise, you don't need the reason why, but just want to know whether the function is valid or not, use typia.functional.isFunction<T>() function.\nimport typia from \"typia\";\nconst func = typia.functional.assertFunction(\n  (x: number, y: number): number => x + y,\n);\nfunc(3, 4);\nfunc(4, 5);\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst func = (x, y) => {\n  const errorFactoryWrapper =\n    typia_1.default.functional.assertFunction.errorFactory;\n  ((\n    input,\n    errorFactory = (p) =>\n      errorFactoryWrapper({\n        ...p,\n        path: p.path\n          ? p.path.replace(\"$input\", \"$input.parameters[0]\")\n          : undefined,\n      }),\n  ) => {\n    const __is = (input) => {\n      return \"number\" === typeof input;\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.functional.assertFunction.guard;\n        return (\n          \"number\" === typeof input ||\n          $guard(\n            true,\n            {\n              path: _path + \"\",\n              expected: \"number\",\n              value: input,\n            },\n            errorFactory,\n          )\n        );\n      })(input, \"$input\", true);\n    return input;\n  })(x);\n  ((\n    input,\n    errorFactory = (p) =>\n      errorFactoryWrapper({\n        ...p,\n        path: p.path\n          ? p.path.replace(\"$input\", \"$input.parameters[1]\")\n          : undefined,\n      }),\n  ) => {\n    const __is = (input) => {\n      return \"number\" === typeof input;\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.functional.assertFunction.guard;\n        return (\n          \"number\" === typeof input ||\n          $guard(\n            true,\n            {\n              path: _path + \"\",\n              expected: \"number\",\n              value: input,\n            },\n            errorFactory,\n          )\n        );\n      })(input, \"$input\", true);\n    return input;\n  })(y);\n  return ((\n    input,\n    errorFactory = (p) =>\n      errorFactoryWrapper({\n        ...p,\n        path: p.path ? p.path.replace(\"$input\", \"$input.return\") : undefined,\n      }),\n  ) => {\n    const __is = (input) => {\n      return \"number\" === typeof input;\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.functional.assertFunction.guard;\n        return (\n          \"number\" === typeof input ||\n          $guard(\n            true,\n            {\n              path: _path + \"\",\n              expected: \"number\",\n              value: input,\n            },\n            errorFactory,\n          )\n        );\n      })(input, \"$input\", true);\n    return input;\n  })(((x, y) => x + y)(x, y));\n};\nfunc(3, 4);\nfunc(4, 5);","isfunction#isFunction()":"export namespace functional {\n  export function isFunction<T extends (...args: any[]) => any>(\n    func: T,\n  ): T extends (...args: infer Arguments) => infer Output\n    ? Output extends Promise<infer R>\n      ? (...args: Arguments) => Promise<R | null>\n      : (...args: Arguments) => Output | null\n    : never;\n  export function isParameters;\n  export function isReturn;\n  export function isEqualsFunction;\n  export function isEqualsParameters;\n  export function isEqualsReturn;\n}\nTests a function.typia.functional.isFunction<T>() tests a function, by wrapping the parameter function and checking its paramters and return value through typia.is<T>() function. If some parameter or return value does not match the expected type, it returns null. Otherwise, it returns the return value of the parameter function.By the way, if you don't want to test both paramters and return value, but one of them, you can use typia.functional.isParameters<T>() or typia.functional.isReturn<T>() instead. Otherwise, if you want to prohibit superfluous properties, typia.functional.equalsFunction<T>() would be helpful.Also, if what you want is not just type checking, but want to know the detailed reason(s) why, utilize typia.functional.assertFunction<T>() or typia.functional.validateFunction<T>() instead.\nimport typia from \"typia\";\nconst func = typia.functional.isFunction(\n  (x: number, y: number): number => x + y,\n);\nfunc(3, 4);\nfunc(4, 5);\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst func = (x, y) => {\n  if (\n    false ===\n    ((input) => {\n      return \"number\" === typeof input;\n    })(x)\n  )\n    return null;\n  if (\n    false ===\n    ((input) => {\n      return \"number\" === typeof input;\n    })(y)\n  )\n    return null;\n  const result = ((x, y) => x + y)(x, y);\n  return ((input) => {\n    return \"number\" === typeof input;\n  })(result)\n    ? result\n    : null;\n};\nfunc(3, 4);\nfunc(4, 5);\nValidates a function.typia.functional.validateFunction<T>() validates a function, by wrapping the parameter function and checking its paramters and return value through typia.validate<T>() function. If some parameter or return value does not match the expected type, it returns a IValidation.IFailure typed object. Otherwise, it returns a IValidation.ISuccess typed object instead.For reference, IValidation.IError.path would be a little bit different with individual typia.validate<T>() function. If IValidation.IError occurs from some parameter, the path wouold start from $input.parameters[<index>]. Otherwise the path would start from $input.return.\n$input.parameters[0].~\n$input.return.~\nBy the way, if you don't want to validate both paramters and return value, but one of them, you can use typia.functional.validateParameters<T>() or typia.functional.validateReturn<T>() instead. Otherwise, if you want to prohibit superfluous properties, typia.functional.validateEqualsFunction<T>() would be helpful.Also, if what you want is not retrieving every type errors, but just finding the first type error, utilize typia.functional.assertFunction<T>() function instead. Otherwise, you don't need the reason why, but just want to know whether the function is valid or not, use typia.functional.isFunction<T>() function.\nimport typia from \"typia\";\nconst func = typia.functional.validateFunction(\n  (x: number, y: number): number => x + y,\n);\nfunc(3, 4);\nfunc(4, 5);\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst func = (x, y) => {\n  const paramResults = [\n    ((input) => {\n      const errors = [];\n      const __is = (input) => {\n        return \"number\" === typeof input;\n      };\n      if (false === __is(input)) {\n        const $report =\n          typia_1.default.functional.validateFunction.report(errors);\n        ((input, _path, _exceptionable = true) => {\n          return (\n            \"number\" === typeof input ||\n            $report(true, {\n              path: _path + \"\",\n              expected: \"number\",\n              value: input,\n            })\n          );\n        })(input, \"$input\", true);\n      }\n      const success = 0 === errors.length;\n      return {\n        success,\n        errors,\n        data: success ? input : undefined,\n      };\n    })(x),\n    ((input) => {\n      const errors = [];\n      const __is = (input) => {\n        return \"number\" === typeof input;\n      };\n      if (false === __is(input)) {\n        const $report =\n          typia_1.default.functional.validateFunction.report(errors);\n        ((input, _path, _exceptionable = true) => {\n          return (\n            \"number\" === typeof input ||\n            $report(true, {\n              path: _path + \"\",\n              expected: \"number\",\n              value: input,\n            })\n          );\n        })(input, \"$input\", true);\n      }\n      const success = 0 === errors.length;\n      return {\n        success,\n        errors,\n        data: success ? input : undefined,\n      };\n    })(y),\n  ].filter((r) => false === r.success);\n  if (paramResults.length > 0)\n    return {\n      success: false,\n      errors: paramResults\n        .map((r, i) =>\n          r.errors.map((error) => ({\n            ...error,\n            path: error.path.replace(\"$input\", `$input.parameters[${i}]`),\n          })),\n        )\n        .flat(),\n    };\n  const result = ((input) => {\n    const errors = [];\n    const __is = (input) => {\n      return \"number\" === typeof input;\n    };\n    if (false === __is(input)) {\n      const $report =\n        typia_1.default.functional.validateFunction.report(errors);\n      ((input, _path, _exceptionable = true) => {\n        return (\n          \"number\" === typeof input ||\n          $report(true, {\n            path: _path + \"\",\n            expected: \"number\",\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    }\n    const success = 0 === errors.length;\n    return {\n      success,\n      errors,\n      data: success ? input : undefined,\n    };\n  })(((x, y) => x + y)(x, y));\n  if (!result.success)\n    result.errors = result.errors.map((error) => ({\n      ...error,\n      path: error.path.replace(\"$input\", \"$input.return\"),\n    }));\n  return result;\n};\nfunc(3, 4);\nfunc(4, 5);"}},"/":{"title":"Index","data":{"key-features#Key Features":"","sponsors#Sponsors":"Thanks for your support.Your donation would encourage typia development."}},"/playground":{"title":"Index","data":{}},"/docs/json/schema":{"title":"Schema","data":{"application-function#application() function":"export namespace json {\n  export function application<\n    Schemas extends unknown[],\n    Version extends \"3.0\" | \"3.1\" = \"3.1\",\n  >(): IJsonApplication<Version>;\n}\nimport type { OpenApi, OpenApiV3 } from \"@samchon/openapi\";\nexport type IJsonApplication<Version extends \"3.0\" | \"3.1\" = \"3.1\"> =\n  Version extends \"3.0\" ? IJsonApplication.IV3_0 : IJsonApplication.IV3_1;\nexport namespace IJsonApplication {\n  export interface IV3_0 {\n    version: \"3.0\";\n    schemas: OpenApiV3.IJsonSchema[];\n    components: OpenApiV3.IComponents;\n  }\n  export interface IV3_1 {\n    version: \"3.1\";\n    components: OpenApi.IComponents;\n    schemas: OpenApi.IJsonSchema[];\n  }\n}\nJSON schema generator.\nDefinitions:\nIJsonApplication\nOpenAPI v3.0\nOpenAPI v3.1\nWhen you need JSON schema, do not write it by yourself, but just call typia.json.application() function.If you call the typia.json.application() with specialization of target Schemas, typia will analyze your Schemas and generate JSON schema definition in the compilation level. However, note that, JSON schema definitions of \"OpenAPI v3.0\" and \"OpenAPI v3.1\" are a little bit different. Therefore, you have to consider which value to assign in the Version argument.\nSwagger can't express tuple type\nSwagger can't express pattern property\nimport typia, { tags } from \"typia\";\nexport const MemberSchema = typia.json.application<[IMember], \"3.0\">();\ninterface IMember {\n  /**\n   * Unique user ID generated by server.\n   */\n  id: string & tags.Format<\"uuid\">;\n  /**\n   * Email address of the member.\n   */\n  email: string & tags.Format<\"email\">;\n  /**\n   * Age of the member.\n   *\n   * For reference, only adult can be a member.\n   */\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MemberSchema = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nexports.MemberSchema = {\n  version: \"3.0\",\n  schemas: [\n    {\n      $ref: \"#/components/schemas/IMember\",\n    },\n  ],\n  components: {\n    schemas: {\n      IMember: {\n        $id: \"#/components/schemas/IMember\",\n        type: \"object\",\n        properties: {\n          id: {\n            type: \"string\",\n            format: \"uuid\",\n            title: \"Unique user ID generated by server\",\n            description: \"Unique user ID generated by server.\",\n          },\n          email: {\n            type: \"string\",\n            format: \"email\",\n            title: \"Email address of the member\",\n            description: \"Email address of the member.\",\n          },\n          age: {\n            type: \"integer\",\n            minimum: 19,\n            exclusiveMinimum: true,\n            maximum: 100,\n            title: \"Age of the member\",\n            description:\n              \"Age of the member.\\n\\nFor reference, only adult can be a member.\",\n          },\n        },\n        required: [\"id\", \"email\", \"age\"],\n      },\n    },\n  },\n};","specialization#Specialization":"You can utilize type tags (or validator's comment tags) to constructing special fields of JSON schema.If you write any comment on a property, it would fill the IJsonSchema.description value. Also, there're special comment tags only for JSON schema definition that are different with validator's comment tags like below.\n@deprecated\n@hidden\n@internal\n@title {string}\n@default {value}\nLet's see how those type tags, comment tags and description comments are working with example code.\nimport typia, { tags } from \"typia\";\nexport const SpecialTagSchema = typia.json.application<[Special], \"3.1\">();\ninterface Special {\n  /**\n   * Deprecated tags are just used for marking.\n   *\n   * @title Unsigned integer\n   * @deprecated\n   */\n  type: number & tags.Type<\"int32\">;\n  /**\n   * Internal tagged property never be shown in JSON schema.\n   *\n   * It even doesn't be shown in other `typia` functions like `assert<T>()`.\n   *\n   * @internal\n   */\n  internal: number[];\n  /**\n   * Hidden tagged property never be shown in JSON schema.\n   *\n   * However, it would be shown in other `typia` functions like `stringify<T>()`.\n   *\n   * @hidden\n   */\n  hidden: boolean;\n  /**\n   * You can limit the range of number.\n   *\n   * @exclusiveMinimum 19\n   * @maximum 100\n   * @default 30\n   */\n  number?: number;\n  /**\n   * You can limit the length of string.\n   *\n   * Also, multiple range conditions are also possible.\n   */\n  string: string &\n    (\n      | (tags.MinLength<3> & tags.MaxLength<24>)\n      | (tags.MinLength<40> & tags.MaxLength<100>)\n    );\n  /**\n   * You can limit the pattern of string.\n   *\n   * @pattern ^[a-z]+$\n   */\n  pattern: string;\n  /**\n   * You can limit the format of string.\n   *\n   * @format date-time\n   */\n  format: string | null;\n  /**\n   * In the Array case, possible to restrict its elements.\n   */\n  array: Array<string & tags.Format<\"uuid\">> & tags.MinItems<3>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpecialTagSchema = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nexports.SpecialTagSchema = {\n  version: \"3.1\",\n  schemas: [\n    {\n      $ref: \"#/components/schemas/Special\",\n    },\n  ],\n  components: {\n    schemas: {\n      Special: {\n        type: \"object\",\n        properties: {\n          type: {\n            type: \"integer\",\n            deprecated: true,\n            title: \"Unsigned integer\",\n            description: \"Deprecated tags are just used for marking.\",\n          },\n          number: {\n            type: \"number\",\n            minimum: 19,\n            exclusiveMinimum: true,\n            maximum: 100,\n            default: 30,\n            title: \"You can limit the range of number\",\n            description: \"You can limit the range of number.\",\n          },\n          string: {\n            oneOf: [\n              {\n                type: \"string\",\n                maxLength: 24,\n                minLength: 3,\n              },\n              {\n                type: \"string\",\n                maxLength: 100,\n                minLength: 40,\n              },\n            ],\n            title: \"You can limit the length of string\",\n            description:\n              \"You can limit the length of string.\\n\\nAlso, multiple range conditions are also possible.\",\n          },\n          pattern: {\n            type: \"string\",\n            pattern: \"^[a-z]+$\",\n            title: \"You can limit the pattern of string\",\n            description: \"You can limit the pattern of string.\",\n          },\n          format: {\n            oneOf: [\n              {\n                type: \"null\"\n              },\n              {\n                type: \"string\",\n                format: \"date-time\",\n              }\n            ],\n            title: \"You can limit the format of string\",\n            description: \"You can limit the format of string.\",\n          },\n          array: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"uuid\",\n            },\n            minItems: 3,\n            title: \"In the Array case, possible to restrict its elements\",\n            description:\n              \"In the Array case, possible to restrict its elements.\",\n          },\n        },\n        required: [\"type\", \"string\", \"pattern\", \"format\", \"array\"],\n      },\n    },\n  },\n};","customization#Customization":"If what you want is not just filling special properties of JSON schema spec, but to adding custom properties into the JSON schema definition, you can do it through the tags.TagBase.schema property type.For reference, the custom property must be started with x- prefix. It's a rule of JSON schema.\nimport typia, { tags } from \"typia\";\n \ntype Monetary<Value extends string> = tags.TagBase<{\n  target: \"number\";\n  kind: \"monetary\";\n  value: Value;\n  schema: {\n    \"x-monetary\": Value;\n  };\n}>;\ntype Placeholder<Value extends string> = tags.TagBase<{\n  target: \"boolean\" | \"number\" | \"string\";\n  kind: \"placeholder\";\n  value: Value;\n  schema: {\n    \"x-placeholder\": Value;\n  };\n}>;\ninterface IAccount {\n  code: string & Placeholder<\"Write you account code please\">;\n  balance: number & Monetary<\"dollar\">;\n};\n \ntypia.json.application<[IAccount]>();\n({\n  version: \"3.1\",\n  schemas: [\n    {\n      $ref: \"#/components/schemas/IAccount\",\n    },\n  ],\n  components: {\n    schemas: {\n      IAccount: {\n        type: \"object\",\n        properties: {\n          code: {\n            type: \"string\",\n            \"x-placeholder\": \"Write you account code please\",\n          },\n          balance: {\n            type: \"number\",\n            \"x-monetary\": \"dollar\",\n          },\n        },\n        required: [\"code\", \"balance\"],\n      },\n    },\n  },\n});","restrictions#Restrictions":"JSON schema does not support bigint type.So if you use bigint type in one of your onetarget schemas, typia will make compile error like below.\nimport typia, { tags } from \"typia\";\ninterface Something {\n  bigint: bigint;\n  array: bigint[];\n  nested: Nested;\n}\ninterface Nested {\n  uint64: bigint & tags.Type<\"uint64\">;\n}\ntypia.json.application<[Something], \"ajv\">();\nmain.ts:12:1 - error TS(typia.json.application): unsupported type detected\n- Something.bigint: bigint\n  - JSON does not support bigint type.\n- Something.array: bigint\n  - JSON does not support bigint type.\n- Nested.uint64: (bigint & Type<\"uint64\">)\n  - JSON does not support bigint type.\nAlso, if you put any type of native classes like Map or Uint8Array, it would also be error, either. By the way, only Date class is exceptional, and it would be considered as string & Format<\"date-time\"> type like below.\nimport typia from \"typia\";\ninterface Native {\n  date: Date;\n}\ntypia.json.application<[Native], \"ajv\">();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n({\n  version: \"3.1\",\n  schemas: [\n    {\n      $ref: \"#/components/schemas/Native\",\n    },\n  ],\n  components: {\n    schemas: {\n      Native: {\n        $id: \"#/components/schemas/Native\",\n        type: \"object\",\n        properties: {\n          date: {\n            type: \"string\",\n            format: \"date-time\",\n          },\n        },\n        required: [\"date\"],\n      },\n    },\n  },\n});"}},"/docs/protobuf/decode":{"title":"Decode","data":{"decode-functions#decode() functions":"export namespace protobuf {\n  export function decode<T>(buffer: Uint8Array): Resolved<T>;\n  export function isDecode<T>(buffer: Uint8Array): Resolved<T> | null;\n  export function assertDecode<T>(buffer: Uint8Array): Resolved<T>;\n  export function validateDecode<T>(\n    buffer: Uint8Array,\n  ): IValidation<Resolved<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nProtocol Buffer Decoder.You can easily convert a Protocol Buffer's binary data to a JavaScript object, without any extra Protocol Buffer Message Schema definition. typia.protobuf.decode<T>() function analyzes your type T, and generates a Protocol Buffer Message Schema internally.And then, it converts the binary data to a JavaScript object.By the way, as Protocol Buffer handles binary data directly, there's no way when input binary data was not encoded from the T typed value. In that case, unexpected behavior or internal error would be occured. Therefore, I recommend you to encode binary data of Protocol Buffer from type safe encode functions like below, Use typia.protobuf.encode<T>() function only when you can trust it.\ntypia.protobuf.isEncode<T>()\ntypia.protobuf.assertEncode<T>()\ntypia.protobuf.validateEncode<T>()\nFor reference, typia provides type safe decorators like below, but they are just for additional type validation like number & Minimum<7> or string & Format<\"uuid\"> cases, that are represented by Special Tags. Thus, I repeat that, you've to ensure type safety when using decoder function.\ntypia.protobuf.isDecode<T>(): typia.is<T>() + typia.protobuf.decode<T>()\ntypia.protobuf.assertDecode<T>(): typia.assert<T>() + typia.protobuf.decode<T>()\ntypia.protobuf.validateDecode<T>(): typia.validate<T>() + typia.protobuf.decode<T>()\nAOT compliation\ntypia.protobuf.decode<T>() and other similar functions are still much faster than any other competitive libraries, even though they include type checking process. This is the power of AOT compilation, writing optimal dedicated code by analyzing TypeScript type, in the compilation level.\nimport typia, { tags } from \"typia\";\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\nconst data: ICustomer = typia.random<ICustomer>();\nconst encoded: Uint8Array = typia.protobuf.encode(data);\ntypia.protobuf.decode<ICustomer>(encoded);\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst data = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $pick = typia_1.default.random.pick;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    id:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"int32\">',\n          kind: \"type\",\n          value: \"int32\",\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(0, 100),\n    email:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"email\">',\n          kind: \"format\",\n          value: \"email\",\n        },\n      ]) ?? (generator?.email ?? $generator.email)(),\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    pet: $pick([\n      () => null,\n      () => $ro1(_recursive, _recursive ? 1 + _depth : _depth),\n      () => $ro2(_recursive, _recursive ? 1 + _depth : _depth),\n    ])(),\n    memo: $pick([\n      () => null,\n      () =>\n        new Map(\n          (generator?.array ?? $generator.array)(() => [\n            (generator?.customs ?? $generator.customs)?.string?.([]) ??\n              (generator?.string ?? $generator.string)(),\n            (generator?.customs ?? $generator.customs)?.string?.([]) ??\n              (generator?.string ?? $generator.string)(),\n          ]),\n        ),\n    ])(),\n    logins: (generator?.array ?? $generator.array)(() =>\n      $ro3(_recursive, _recursive ? 1 + _depth : _depth),\n    ),\n  });\n  const $ro1 = (_recursive = false, _depth = 0) => ({\n    type: \"cat\",\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    ribbon: (generator?.boolean ?? $generator.boolean)(),\n  });\n  const $ro2 = (_recursive = false, _depth = 0) => ({\n    type: \"dog\",\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    hunt: (generator?.boolean ?? $generator.boolean)(),\n  });\n  const $ro3 = (_recursive = false, _depth = 0) => ({\n    success: (generator?.boolean ?? $generator.boolean)(),\n    href:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"url\">',\n          kind: \"format\",\n          value: \"url\",\n        },\n      ]) ?? (generator?.url ?? $generator.url)(),\n    referrer:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"url\">',\n          kind: \"format\",\n          value: \"url\",\n        },\n      ]) ?? (generator?.url ?? $generator.url)(),\n    ip: $pick([\n      () =>\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"ipv4\">',\n            kind: \"format\",\n            value: \"ipv4\",\n          },\n        ]) ?? (generator?.ipv4 ?? $generator.ipv4)(),\n      () =>\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"ipv6\">',\n            kind: \"format\",\n            value: \"ipv6\",\n          },\n        ]) ?? (generator?.ipv6 ?? $generator.ipv6)(),\n    ])(),\n    time:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"date-time\">',\n          kind: \"format\",\n          value: \"date-time\",\n        },\n      ]) ?? (generator?.datetime ?? $generator.datetime)(),\n  });\n  return $ro0();\n})();\nconst encoded = ((input) => {\n  const $throws = typia_1.default.protobuf.encode.throws;\n  const $Sizer = typia_1.default.protobuf.encode.Sizer;\n  const $Writer = typia_1.default.protobuf.encode.Writer;\n  const encoder = (writer) => {\n    const $peo0 = (input) => {\n      // property \"id\";\n      writer.uint32(8);\n      writer.int32(input.id);\n      // property \"email\";\n      writer.uint32(18);\n      writer.string(input.email);\n      // property \"name\";\n      writer.uint32(26);\n      writer.string(input.name);\n      // property \"pet\";\n      if (null !== input.pet) {\n        if (\"cat\" === input.pet.type)\n          (() => {\n            // 4 -> ICat;\n            writer.uint32(34);\n            writer.fork();\n            $peo1(input.pet);\n            writer.ldelim();\n          })();\n        else if (\"dog\" === input.pet.type)\n          (() => {\n            // 5 -> IDog;\n            writer.uint32(42);\n            writer.fork();\n            $peo2(input.pet);\n            writer.ldelim();\n          })();\n        else\n          $throws({\n            expected: \"(ICat | IDog)\",\n            value: input.pet,\n          });\n      }\n      // property \"memo\";\n      if (null !== input.memo) {\n        for (const [key, value] of input.memo) {\n          writer.uint32(50);\n          writer.fork();\n          writer.uint32(10);\n          writer.string(key);\n          writer.uint32(18);\n          writer.string(value);\n          writer.ldelim();\n        }\n      }\n      // property \"logins\";\n      if (0 !== input.logins.length) {\n        for (const elem of input.logins) {\n          // 7 -> ICustomerLogin;\n          writer.uint32(58);\n          writer.fork();\n          $peo3(elem);\n          writer.ldelim();\n        }\n      }\n    };\n    const $peo1 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"ribbon\";\n      writer.uint32(24);\n      writer.bool(input.ribbon);\n    };\n    const $peo2 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"hunt\";\n      writer.uint32(24);\n      writer.bool(input.hunt);\n    };\n    const $peo3 = (input) => {\n      // property \"success\";\n      writer.uint32(8);\n      writer.bool(input.success);\n      // property \"href\";\n      writer.uint32(18);\n      writer.string(input.href);\n      // property \"referrer\";\n      writer.uint32(26);\n      writer.string(input.referrer);\n      // property \"ip\";\n      writer.uint32(34);\n      writer.string(input.ip);\n      // property \"time\";\n      writer.uint32(42);\n      writer.string(input.time);\n    };\n    const $io1 = (input) =>\n      \"cat\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.ribbon;\n    const $io2 = (input) =>\n      \"dog\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.hunt;\n    const $io3 = (input) =>\n      \"boolean\" === typeof input.success &&\n      \"string\" === typeof input.href &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.href,\n      ) &&\n      \"string\" === typeof input.referrer &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.referrer,\n      ) &&\n      \"string\" === typeof input.ip &&\n      (/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/.test(\n        input.ip,\n      ) ||\n        /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))$/i.test(\n          input.ip,\n        )) &&\n      \"string\" === typeof input.time &&\n      !isNaN(new Date(input.time).getTime());\n    const $iu0 = (input) =>\n      (() => {\n        if (\"cat\" === input.type) return $io1(input);\n        else if (\"dog\" === input.type) return $io2(input);\n        else return false;\n      })();\n    //ICustomer;\n    $peo0(input);\n    return writer;\n  };\n  const sizer = encoder(new $Sizer());\n  const writer = encoder(new $Writer(sizer));\n  return writer.buffer();\n})(data);\n((input) => {\n  const $Reader = typia_1.default.protobuf.decode.Reader;\n  const $pdo0 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      id: undefined,\n      email: \"\",\n      name: \"\",\n      pet: null,\n      memo: null,\n      logins: [],\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // int32;\n          output.id = reader.int32();\n          break;\n        case 2:\n          // string;\n          output.email = reader.string();\n          break;\n        case 3:\n          // string;\n          output.name = reader.string();\n          break;\n        case 4:\n          // ICat;\n          output.pet = $pdo1(reader, reader.uint32());\n          break;\n        case 5:\n          // IDog;\n          output.pet = $pdo2(reader, reader.uint32());\n          break;\n        case 6:\n          // type: Map<string, string>;\n          (() => {\n            output.memo ??= new Map();\n            const piece = reader.uint32() + reader.index();\n            const entry = {\n              key: \"\",\n              value: \"\",\n            };\n            while (reader.index() < piece) {\n              const kind = reader.uint32();\n              switch (kind >>> 3) {\n                case 1:\n                  // string;\n                  entry.key = reader.string();\n                  break;\n                case 2:\n                  // string;\n                  entry.value = reader.string();\n                  break;\n                default:\n                  reader.skipType(kind & 7);\n                  break;\n              }\n            }\n            output.memo.set(entry.key, entry.value);\n          })();\n          break;\n        case 7:\n          // type: Array<ICustomerLogin>;\n          output.logins.push($pdo3(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo1 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      type: undefined,\n      name: \"\",\n      ribbon: undefined,\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // string;\n          output.type = reader.string();\n          break;\n        case 2:\n          // string;\n          output.name = reader.string();\n          break;\n        case 3:\n          // bool;\n          output.ribbon = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo2 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      type: undefined,\n      name: \"\",\n      hunt: undefined,\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // string;\n          output.type = reader.string();\n          break;\n        case 2:\n          // string;\n          output.name = reader.string();\n          break;\n        case 3:\n          // bool;\n          output.hunt = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo3 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      success: undefined,\n      href: \"\",\n      referrer: \"\",\n      ip: \"\",\n      time: \"\",\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // bool;\n          output.success = reader.bool();\n          break;\n        case 2:\n          // string;\n          output.href = reader.string();\n          break;\n        case 3:\n          // string;\n          output.referrer = reader.string();\n          break;\n        case 4:\n          // string;\n          output.ip = reader.string();\n          break;\n        case 5:\n          // string;\n          output.time = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const reader = new $Reader(input);\n  return $pdo0(reader);\n})(encoded);","reusable-functions#Reusable functions":"export namespace protobuf {\n  export function createDecode<T>(): (buffer: Uint8Array) => Resolved<T>;\n  export function createIsDecode<T>: (buffer: Uint8Array) => Resolved<T> | null;\n  export function createAssertDecode<T>(): (buffer: Uint8Array) => Resolved<T>;\n  export function createValidateDecode<T>(): (\n      buffer: Uint8Array\n  ) => IValidation<Resolved<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nimport typia, { tags } from \"typia\";\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\nconst data: ICustomer = typia.random<ICustomer>();\nconst encoded: Uint8Array = typia.protobuf.encode(data);\ntypia.protobuf.decode<ICustomer>(encoded);\nReusable typia.protobuf.decode<T>() function generators.If you repeat to call typia.protobuf.decode<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.protobuf.createDecode<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const encode = typia.protobuf.createDecode<ICustomer>();\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst encode = (input) => {\n  const $Reader = typia_1.default.protobuf.createDecode.Reader;\n  const $pdo0 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      id: undefined,\n      email: \"\",\n      name: \"\",\n      pet: null,\n      memo: null,\n      logins: [],\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // int32;\n          output.id = reader.int32();\n          break;\n        case 2:\n          // string;\n          output.email = reader.string();\n          break;\n        case 3:\n          // string;\n          output.name = reader.string();\n          break;\n        case 4:\n          // ICat;\n          output.pet = $pdo1(reader, reader.uint32());\n          break;\n        case 5:\n          // IDog;\n          output.pet = $pdo2(reader, reader.uint32());\n          break;\n        case 6:\n          // type: Map<string, string>;\n          (() => {\n            output.memo ??= new Map();\n            const piece = reader.uint32() + reader.index();\n            const entry = {\n              key: \"\",\n              value: \"\",\n            };\n            while (reader.index() < piece) {\n              const kind = reader.uint32();\n              switch (kind >>> 3) {\n                case 1:\n                  // string;\n                  entry.key = reader.string();\n                  break;\n                case 2:\n                  // string;\n                  entry.value = reader.string();\n                  break;\n                default:\n                  reader.skipType(kind & 7);\n                  break;\n              }\n            }\n            output.memo.set(entry.key, entry.value);\n          })();\n          break;\n        case 7:\n          // type: Array<ICustomerLogin>;\n          output.logins.push($pdo3(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo1 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      type: undefined,\n      name: \"\",\n      ribbon: undefined,\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // string;\n          output.type = reader.string();\n          break;\n        case 2:\n          // string;\n          output.name = reader.string();\n          break;\n        case 3:\n          // bool;\n          output.ribbon = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo2 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      type: undefined,\n      name: \"\",\n      hunt: undefined,\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // string;\n          output.type = reader.string();\n          break;\n        case 2:\n          // string;\n          output.name = reader.string();\n          break;\n        case 3:\n          // bool;\n          output.hunt = reader.bool();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const $pdo3 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      success: undefined,\n      href: \"\",\n      referrer: \"\",\n      ip: \"\",\n      time: \"\",\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // bool;\n          output.success = reader.bool();\n          break;\n        case 2:\n          // string;\n          output.href = reader.string();\n          break;\n        case 3:\n          // string;\n          output.referrer = reader.string();\n          break;\n        case 4:\n          // string;\n          output.ip = reader.string();\n          break;\n        case 5:\n          // string;\n          output.time = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const reader = new $Reader(input);\n  return $pdo0(reader);\n};\nexports.encode = encode;","references#References":"Protocol Buffer supports special numeric types like int32 or uint64 that are not supported in TypeScript. Also, types of Protocol Buffer cannot fully meet TypeScript type specs either, as expression power of TypeScript types are much stronger than Protocol Buffer.To know how to define special numeric types like uint64, and to understand which TypeScript types are not supported in Protocol Buffer specs, it would better to read below documents. I recommend you to read them before using typia.protobuf.decode<T>() related functions.\nTypia Guide Documents > Protocol Buffer > Message Schema\nmessage() function\nType Tags\nComment Tags\nRestrictions"}},"/docs/protobuf/encode":{"title":"Encode","data":{"encode-functions#encode() functions":"export namespace protobuf {\n  export function encode<T>(input: T): Uint8Array;\n  export function isEncode<T>(input: T): Uint8Array | null;\n  export function assertEncode<T>(input: T): Uint8Array;\n  export function validateEncode<T>(input: T): IValidation<Uint8Array>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nProtocol Buffer Encoder.You can easily convert a JavaScript object to a binary data of Protocol Buffer, without any extra Protocol Buffer Message Schema definition. typia.protobuf.encode<T>() function analyzes your type T, and generates a Protocol Buffer Message Schema internally. And then, it converts the input instance to the binary data of Protocol Buffer format.By the way, typia.protobuf.encode<T>() function does not validate the input value. It just believes user and input value, and converts to the Protocol Buffer binary data directly without any validation. By the way, if the input value was not validate, the encoded binary data never can be decoded. So, if you can't sure the input value type, you should use below functions instead.\ntypia.protobuf.isEncode<T>(): typia.is<T>() + typia.protobuf.encode<T>()\ntypia.protobuf.assertEncode<T>(): typia.assert<T>() + typia.protobuf.encode<T>()\ntypia.protobuf.validateEncode<T>(): typia.validate<T>() + typia.protobuf.encode<T>()\nAOT compliation\ntypia.protobuf.encode<T>() and other similar functions are still much faster than any other competitive libraries, even though they include type checking process. This is the power of AOT compilation, writing optimal dedicated code by analyzing TypeScript type, in the compilation level.\nimport typia, { tags } from \"typia\";\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\nconst customer: ICustomer = typia.random<ICustomer>();\ntypia.protobuf.encode<ICustomer>(customer);\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst customer = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $pick = typia_1.default.random.pick;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    id:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"int32\">',\n          kind: \"type\",\n          value: \"int32\",\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(0, 100),\n    email:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"email\">',\n          kind: \"format\",\n          value: \"email\",\n        },\n      ]) ?? (generator?.email ?? $generator.email)(),\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    pet: $pick([\n      () => null,\n      () => $ro1(_recursive, _recursive ? 1 + _depth : _depth),\n      () => $ro2(_recursive, _recursive ? 1 + _depth : _depth),\n    ])(),\n    memo: $pick([\n      () => null,\n      () =>\n        new Map(\n          (generator?.array ?? $generator.array)(() => [\n            (generator?.customs ?? $generator.customs)?.string?.([]) ??\n              (generator?.string ?? $generator.string)(),\n            (generator?.customs ?? $generator.customs)?.string?.([]) ??\n              (generator?.string ?? $generator.string)(),\n          ]),\n        ),\n    ])(),\n    logins: (generator?.array ?? $generator.array)(() =>\n      $ro3(_recursive, _recursive ? 1 + _depth : _depth),\n    ),\n  });\n  const $ro1 = (_recursive = false, _depth = 0) => ({\n    type: \"cat\",\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    ribbon: (generator?.boolean ?? $generator.boolean)(),\n  });\n  const $ro2 = (_recursive = false, _depth = 0) => ({\n    type: \"dog\",\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    hunt: (generator?.boolean ?? $generator.boolean)(),\n  });\n  const $ro3 = (_recursive = false, _depth = 0) => ({\n    success: (generator?.boolean ?? $generator.boolean)(),\n    href:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"url\">',\n          kind: \"format\",\n          value: \"url\",\n        },\n      ]) ?? (generator?.url ?? $generator.url)(),\n    referrer:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"url\">',\n          kind: \"format\",\n          value: \"url\",\n        },\n      ]) ?? (generator?.url ?? $generator.url)(),\n    ip: $pick([\n      () =>\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"ipv4\">',\n            kind: \"format\",\n            value: \"ipv4\",\n          },\n        ]) ?? (generator?.ipv4 ?? $generator.ipv4)(),\n      () =>\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"ipv6\">',\n            kind: \"format\",\n            value: \"ipv6\",\n          },\n        ]) ?? (generator?.ipv6 ?? $generator.ipv6)(),\n    ])(),\n    time:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"date-time\">',\n          kind: \"format\",\n          value: \"date-time\",\n        },\n      ]) ?? (generator?.datetime ?? $generator.datetime)(),\n  });\n  return $ro0();\n})();\n((input) => {\n  const $throws = typia_1.default.protobuf.encode.throws;\n  const $Sizer = typia_1.default.protobuf.encode.Sizer;\n  const $Writer = typia_1.default.protobuf.encode.Writer;\n  const encoder = (writer) => {\n    const $peo0 = (input) => {\n      // property \"id\";\n      writer.uint32(8);\n      writer.int32(input.id);\n      // property \"email\";\n      writer.uint32(18);\n      writer.string(input.email);\n      // property \"name\";\n      writer.uint32(26);\n      writer.string(input.name);\n      // property \"pet\";\n      if (null !== input.pet) {\n        if (\"cat\" === input.pet.type)\n          (() => {\n            // 4 -> ICat;\n            writer.uint32(34);\n            writer.fork();\n            $peo1(input.pet);\n            writer.ldelim();\n          })();\n        else if (\"dog\" === input.pet.type)\n          (() => {\n            // 5 -> IDog;\n            writer.uint32(42);\n            writer.fork();\n            $peo2(input.pet);\n            writer.ldelim();\n          })();\n        else\n          $throws({\n            expected: \"(ICat | IDog)\",\n            value: input.pet,\n          });\n      }\n      // property \"memo\";\n      if (null !== input.memo) {\n        for (const [key, value] of input.memo) {\n          writer.uint32(50);\n          writer.fork();\n          writer.uint32(10);\n          writer.string(key);\n          writer.uint32(18);\n          writer.string(value);\n          writer.ldelim();\n        }\n      }\n      // property \"logins\";\n      if (0 !== input.logins.length) {\n        for (const elem of input.logins) {\n          // 7 -> ICustomerLogin;\n          writer.uint32(58);\n          writer.fork();\n          $peo3(elem);\n          writer.ldelim();\n        }\n      }\n    };\n    const $peo1 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"ribbon\";\n      writer.uint32(24);\n      writer.bool(input.ribbon);\n    };\n    const $peo2 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"hunt\";\n      writer.uint32(24);\n      writer.bool(input.hunt);\n    };\n    const $peo3 = (input) => {\n      // property \"success\";\n      writer.uint32(8);\n      writer.bool(input.success);\n      // property \"href\";\n      writer.uint32(18);\n      writer.string(input.href);\n      // property \"referrer\";\n      writer.uint32(26);\n      writer.string(input.referrer);\n      // property \"ip\";\n      writer.uint32(34);\n      writer.string(input.ip);\n      // property \"time\";\n      writer.uint32(42);\n      writer.string(input.time);\n    };\n    const $io1 = (input) =>\n      \"cat\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.ribbon;\n    const $io2 = (input) =>\n      \"dog\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.hunt;\n    const $io3 = (input) =>\n      \"boolean\" === typeof input.success &&\n      \"string\" === typeof input.href &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.href,\n      ) &&\n      \"string\" === typeof input.referrer &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.referrer,\n      ) &&\n      \"string\" === typeof input.ip &&\n      (/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/.test(\n        input.ip,\n      ) ||\n        /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))$/i.test(\n          input.ip,\n        )) &&\n      \"string\" === typeof input.time &&\n      !isNaN(new Date(input.time).getTime());\n    const $iu0 = (input) =>\n      (() => {\n        if (\"cat\" === input.type) return $io1(input);\n        else if (\"dog\" === input.type) return $io2(input);\n        else return false;\n      })();\n    //ICustomer;\n    $peo0(input);\n    return writer;\n  };\n  const sizer = encoder(new $Sizer());\n  const writer = encoder(new $Writer(sizer));\n  return writer.buffer();\n})(customer);\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}","reusable-functions#Reusable Functions":"export namespace protobuf {\n  export function encode<T>(): (input: T) => Uint8Array;\n  export function isEncode<T>(): (input: T) => Uint8Array | null;\n  export function assertEncode<T>(): (input: T) => Uint8Array;\n  export function validateEncode<T>(): (input: T) => IValidation<Uint8Array>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Resolved type erased every methods.\n *\n * `Resolved` is a type of TMP (Type Meta Programming) type which converts\n * its argument as a resolved type that erased every method properties.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be same with the target argument.\n *\n * Otherwise, the target argument is a type of custom class, all of its custom methods\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the resolved object.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `BigInt`                | `bigint`\n * `String`                | `string`\n * `Class`                 | `interface`\n * Native Class or Others  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n */\nexport type Resolved<T> = Equal<T, ResolvedMain<T>> extends true\n  ? T\n  : ResolvedMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype ResolvedMain<T> = T extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<T> extends boolean | number | bigint | string\n  ? ValueOf<T>\n  : T extends Function\n  ? never\n  : T extends object\n  ? ResolvedObject<T>\n  : ValueOf<T>;\ntype ResolvedObject<T extends object> = T extends Array<infer U>\n  ? IsTuple<T> extends true\n    ? ResolvedTuple<T>\n    : ResolvedMain<U>[]\n  : T extends Set<infer U>\n  ? Set<ResolvedMain<U>>\n  : T extends Map<infer K, infer V>\n  ? Map<ResolvedMain<K>, ResolvedMain<V>>\n  : T extends WeakSet<any> | WeakMap<any, any>\n  ? never\n  : T extends\n      | Date\n      | Uint8Array\n      | Uint8ClampedArray\n      | Uint16Array\n      | Uint32Array\n      | BigUint64Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | BigInt64Array\n      | Float32Array\n      | Float64Array\n      | ArrayBuffer\n      | SharedArrayBuffer\n      | DataView\n      | Blob\n      | File\n  ? T\n  : {\n      [P in keyof T]: ResolvedMain<T[P]>;\n    };\ntype ResolvedTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [ResolvedMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>, ...ResolvedTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [ResolvedMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [ResolvedMain<F>?, ...ResolvedTuple<Rest>]\n  : [];\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer Primitive>\n    ? Instance extends Primitive\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\nReusable typia.protobuf.encode<T>() function generators.If you repeat to call typia.protobuf.encode<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.protobuf.createEncode<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const encode = typia.protobuf.createEncode<ICustomer>();\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst encode = (input) => {\n  const $throws = typia_1.default.protobuf.createEncode.throws;\n  const $Sizer = typia_1.default.protobuf.createEncode.Sizer;\n  const $Writer = typia_1.default.protobuf.createEncode.Writer;\n  const encoder = (writer) => {\n    const $peo0 = (input) => {\n      // property \"id\";\n      writer.uint32(8);\n      writer.int32(input.id);\n      // property \"email\";\n      writer.uint32(18);\n      writer.string(input.email);\n      // property \"name\";\n      writer.uint32(26);\n      writer.string(input.name);\n      // property \"pet\";\n      if (null !== input.pet) {\n        if (\"cat\" === input.pet.type)\n          (() => {\n            // 4 -> ICat;\n            writer.uint32(34);\n            writer.fork();\n            $peo1(input.pet);\n            writer.ldelim();\n          })();\n        else if (\"dog\" === input.pet.type)\n          (() => {\n            // 5 -> IDog;\n            writer.uint32(42);\n            writer.fork();\n            $peo2(input.pet);\n            writer.ldelim();\n          })();\n        else\n          $throws({\n            expected: \"(ICat | IDog)\",\n            value: input.pet,\n          });\n      }\n      // property \"memo\";\n      if (null !== input.memo) {\n        for (const [key, value] of input.memo) {\n          writer.uint32(50);\n          writer.fork();\n          writer.uint32(10);\n          writer.string(key);\n          writer.uint32(18);\n          writer.string(value);\n          writer.ldelim();\n        }\n      }\n      // property \"logins\";\n      if (0 !== input.logins.length) {\n        for (const elem of input.logins) {\n          // 7 -> ICustomerLogin;\n          writer.uint32(58);\n          writer.fork();\n          $peo3(elem);\n          writer.ldelim();\n        }\n      }\n    };\n    const $peo1 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"ribbon\";\n      writer.uint32(24);\n      writer.bool(input.ribbon);\n    };\n    const $peo2 = (input) => {\n      // property \"type\";\n      writer.uint32(10);\n      writer.string(input.type);\n      // property \"name\";\n      writer.uint32(18);\n      writer.string(input.name);\n      // property \"hunt\";\n      writer.uint32(24);\n      writer.bool(input.hunt);\n    };\n    const $peo3 = (input) => {\n      // property \"success\";\n      writer.uint32(8);\n      writer.bool(input.success);\n      // property \"href\";\n      writer.uint32(18);\n      writer.string(input.href);\n      // property \"referrer\";\n      writer.uint32(26);\n      writer.string(input.referrer);\n      // property \"ip\";\n      writer.uint32(34);\n      writer.string(input.ip);\n      // property \"time\";\n      writer.uint32(42);\n      writer.string(input.time);\n    };\n    const $io1 = (input) =>\n      \"cat\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.ribbon;\n    const $io2 = (input) =>\n      \"dog\" === input.type &&\n      \"string\" === typeof input.name &&\n      \"boolean\" === typeof input.hunt;\n    const $io3 = (input) =>\n      \"boolean\" === typeof input.success &&\n      \"string\" === typeof input.href &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.href,\n      ) &&\n      \"string\" === typeof input.referrer &&\n      /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n        input.referrer,\n      ) &&\n      \"string\" === typeof input.ip &&\n      (/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/.test(\n        input.ip,\n      ) ||\n        /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))$/i.test(\n          input.ip,\n        )) &&\n      \"string\" === typeof input.time &&\n      !isNaN(new Date(input.time).getTime());\n    const $iu0 = (input) =>\n      (() => {\n        if (\"cat\" === input.type) return $io1(input);\n        else if (\"dog\" === input.type) return $io2(input);\n        else return false;\n      })();\n    //ICustomer;\n    $peo0(input);\n    return writer;\n  };\n  const sizer = encoder(new $Sizer());\n  const writer = encoder(new $Writer(sizer));\n  return writer.buffer();\n};\nexports.encode = encode;","references#References":"Protocol Buffer supports special numeric types like int32 or uint64 that are not supported in TypeScript. Also, types of Protocol Buffer cannot fully meet TypeScript type specs either, as expression power of TypeScript types are much stronger than Protocol Buffer.To know how to define special numeric types like uint64, and to understand which TypeScript types are not supported in Protocol Buffer specs, it would better to read below documents. I recommend you to read them before using typia.protobuf.encode<T>() related functions.\nTypia Guide Documents > Protocol Buffer > Message Schema\nmessage() function\nType Tags\nComment Tags\nRestrictions"}},"/docs/protobuf/message":{"title":"Message","data":{"message-function#message() function":"export namespace protobuf {\n  export function message<T>(): string;\n}\ntypia.protobuf.message() function returns a Protocol Buffer message (structure) as a string value.With this message() function, you can share *.proto files with other languages. If you want to customize byte order or define specific type (that is not supported in the TypeScript) like uint32, use comment tags by following comment tags section.\nimport typia, { tags } from \"typia\";\ninterface ICustomer {\n  id: number & tags.Type<\"int32\">;\n  email: string & tags.Format<\"email\">;\n  name: string;\n  pet: null | ICat | IDog;\n  memo: null | Map<string, string>;\n  logins: Array<ICustomerLogin>;\n}\ninterface ICat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface IDog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ninterface ICustomerLogin {\n  success: boolean;\n  href: string & tags.Format<\"url\">;\n  referrer: string & tags.Format<\"url\">;\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  time: string & tags.Format<\"date-time\">;\n}\ntypia.protobuf.message<ICustomer>();\nsyntax = \"proto3\";\nmessage ICustomer {\n  required int32 id = 1;\n  required string email = 2;\n  required string name = 3;\n  oneof pet {\n    ICat v4 = 4;\n    IDog v5 = 5;\n  }\n  map<string, string> memo = 6;\n  repeated ICustomerLogin logins = 7;\n}\nmessage ICat {\n  required string type = 1;\n  required string name = 2;\n  required bool ribbon = 3;\n}\nmessage IDog {\n  required string type = 1;\n  required string name = 2;\n  required bool hunt = 3;\n}\nmessage ICustomerLogin {\n  required bool success = 1;\n  required string href = 2;\n  required string referrer = 3;\n  required string ip = 4;\n  required string time = 5;\n}","type-tags#Type Tags":"By using type tags, you can use special numeric types that are not supported in the TypeScript.Just import Type (or typia.tags.Type) type, and combine it with number or bigint type through intersection symbol number & typia.tagsType<\"float\"> case. If you want to declare an union numeric type, combine | and bracket (()) symbols properly like below.When you take a mistake that choosing different target type, TypeScript compiler would block it with compliation error message. Therefore, have a confidence when using the Type tag. For such type safety reason, I recommend to use Type tag instead of using comment tags as much as possible.\nnumber & (Type<\"uint32\"> | Type<\"double\">)\nnumber type can be both uint32 and double\n(number & Type<\"int32\">) | (bigint & Type<\"uint64\">)\nnumber is int32\nbigint is uint64\n(number & (Type<\"int32\">)| Type<\"float\">) | (bigint & Type<\"uint64\">)\nnumber can be both int32 and float\nbigint is uint64\nimport typia, { tags } from \"typia\";\nexport interface TypeTagExample {\n  // ATOMIC TYPES\n  int32: number & tags.Type<\"int32\">;\n  uint32: number & tags.Type<\"uint32\">;\n  uint64: bigint & tags.Type<\"uint64\">;\n  int64: number & tags.Type<\"int64\">;\n  float: number & tags.Type<\"float\">;\n  double: number | undefined;\n  string: string | null;\n  // UNION TYPES\n  uint32_or_double: number & (tags.Type<\"uint32\"> | tags.Type<\"double\">);\n  int32_or_uint64:\n    | (number & tags.Type<\"int32\">)\n    | (bigint & tags.Type<\"uint64\">);\n  int32_or_float_or_uint64:\n    | (number & (tags.Type<\"int32\"> | tags.Type<\"float\">))\n    | (bigint & tags.Type<\"uint64\">);\n  // ARRAY AND MAP\n  uint64_array: Array<bigint & tags.Type<\"uint64\">>;\n  int32_map?: Map<number & tags.Type<\"int32\">, string> | null;\n}\n//----\n// PROTOBUF MESSAGE SCHEMA\n//----\ntypia.protobuf.message<TypeTagExample>();\n//----\n// DECODE FUNCTION\n//----\ntypia.protobuf.createDecode<TypeTagExample>();\n//----\n// ENCODE FUNCTION\n//----\ntypia.protobuf.createEncode<TypeTagExample>();\nsyntax = \"proto3\";\nmessage TypeTagExample {\n  required int32 int32 = 1;\n  required uint32 uint32 = 2;\n  required uint64 uint64 = 3;\n  required int64 int64 = 4;\n  required float float = 5;\n  optional double double = 6;\n  optional string string = 7;\n  oneof uint32_or_double {\n    uint32 v8 = 8;\n    double v9 = 9;\n  }\n  oneof int32_or_uint64 {\n    int32 v10 = 10;\n    uint64 v11 = 11;\n  }\n  oneof int32_or_float_or_uint64 {\n    int32 v12 = 12;\n    uint64 v13 = 13;\n    float v14 = 14;\n  }\n  repeated uint64 uint64_array = 15;\n  map<int32, string> int32_map = 16;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n//----\n// PROTOBUF MESSAGE SCHEMA\n//----\n('syntax = \"proto3\";\\n\\nmessage TypeTagExample {\\n    required int32 int32 = 1;\\n    required uint32 uint32 = 2;\\n    required uint64 uint64 = 3;\\n    required int64 int64 = 4;\\n    required float float = 5;\\n    optional double double = 6;\\n    optional string string = 7;\\n    oneof uint32_or_double {\\n        uint32 v8 = 8;\\n        double v9 = 9;\\n    }\\n    oneof int32_or_uint64 {\\n        int32 v10 = 10;\\n        uint64 v11 = 11;\\n    }\\n    oneof int32_or_float_or_uint64 {\\n        int32 v12 = 12;\\n        uint64 v13 = 13;\\n        float v14 = 14;\\n    }\\n    repeated uint64 uint64_array = 15;\\n    map<int32, string> int32_map = 16;\\n}');\n//----\n// DECODE FUNCTION\n//----\n(input) => {\n  const $Reader = typia_1.default.protobuf.createDecode.Reader;\n  const $pdo0 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      int32: undefined,\n      uint32: undefined,\n      uint64: undefined,\n      int64: undefined,\n      float: undefined,\n      double: undefined,\n      string: null,\n      uint32_or_double: undefined,\n      int32_or_uint64: undefined,\n      int32_or_float_or_uint64: undefined,\n      uint64_array: [],\n      int32_map: null,\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // int32;\n          output.int32 = reader.int32();\n          break;\n        case 2:\n          // uint32;\n          output.uint32 = reader.uint32();\n          break;\n        case 3:\n          // uint64;\n          output.uint64 = reader.uint64();\n          break;\n        case 4:\n          // int64;\n          output.int64 = Number(reader.int64());\n          break;\n        case 5:\n          // float;\n          output.float = reader.float();\n          break;\n        case 6:\n          // double;\n          output.double = reader.double();\n          break;\n        case 7:\n          // string;\n          output.string = reader.string();\n          break;\n        case 8:\n          // uint32;\n          output.uint32_or_double = reader.uint32();\n          break;\n        case 9:\n          // double;\n          output.uint32_or_double = reader.double();\n          break;\n        case 10:\n          // int32;\n          output.int32_or_uint64 = reader.int32();\n          break;\n        case 11:\n          // uint64;\n          output.int32_or_uint64 = reader.uint64();\n          break;\n        case 12:\n          // int32;\n          output.int32_or_float_or_uint64 = reader.int32();\n          break;\n        case 13:\n          // uint64;\n          output.int32_or_float_or_uint64 = reader.uint64();\n          break;\n        case 14:\n          // float;\n          output.int32_or_float_or_uint64 = reader.float();\n          break;\n        case 15:\n          // type: Array<(bigint & Type<\"uint64\">)>;\n          if (2 === (tag & 7)) {\n            const piece = reader.uint32() + reader.index();\n            while (reader.index() < piece)\n              output.uint64_array.push(reader.uint64());\n          } else output.uint64_array.push(reader.uint64());\n          break;\n        case 16:\n          // type: Map<string, string>;\n          (() => {\n            output.int32_map ??= new Map();\n            const piece = reader.uint32() + reader.index();\n            const entry = {\n              key: undefined,\n              value: \"\",\n            };\n            while (reader.index() < piece) {\n              const kind = reader.uint32();\n              switch (kind >>> 3) {\n                case 1:\n                  // int32;\n                  entry.key = reader.int32();\n                  break;\n                case 2:\n                  // string;\n                  entry.value = reader.string();\n                  break;\n                default:\n                  reader.skipType(kind & 7);\n                  break;\n              }\n            }\n            output.int32_map.set(entry.key, entry.value);\n          })();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const reader = new $Reader(input);\n  return $pdo0(reader);\n};\n//----\n// ENCODE FUNCTION\n//----\n(input) => {\n  const $throws = typia_1.default.protobuf.createEncode.throws;\n  const $Sizer = typia_1.default.protobuf.createEncode.Sizer;\n  const $Writer = typia_1.default.protobuf.createEncode.Writer;\n  const encoder = (writer) => {\n    const $peo0 = (input) => {\n      // property \"int32\";\n      writer.uint32(8);\n      writer.int32(input.int32);\n      // property \"uint32\";\n      writer.uint32(16);\n      writer.uint32(input.uint32);\n      // property \"uint64\";\n      writer.uint32(24);\n      writer.uint64(input.uint64);\n      // property \"int64\";\n      writer.uint32(32);\n      writer.int64(input.int64);\n      // property \"float\";\n      writer.uint32(45);\n      writer.float(input.float);\n      // property \"double\";\n      if (undefined !== input.double) {\n        writer.uint32(49);\n        writer.double(input.double);\n      }\n      // property \"string\";\n      if (null !== input.string) {\n        writer.uint32(58);\n        writer.string(input.string);\n      }\n      // property \"uint32_or_double\";\n      if (\n        \"number\" === typeof input.uint32_or_double &&\n        Math.floor(input.uint32_or_double) === input.uint32_or_double &&\n        0 <= input.uint32_or_double &&\n        input.uint32_or_double <= 4294967295\n      ) {\n        writer.uint32(64);\n        writer.uint32(input.uint32_or_double);\n      } else if (\"number\" === typeof input.uint32_or_double && true) {\n        writer.uint32(73);\n        writer.double(input.uint32_or_double);\n      } else\n        $throws({\n          expected: '(number & (Type<\"uint32\"> | Type<\"double\">))',\n          value: input.uint32_or_double,\n        });\n      // property \"int32_or_uint64\";\n      if (\"number\" === typeof input.int32_or_uint64) {\n        writer.uint32(80);\n        writer.int32(input.int32_or_uint64);\n      } else if (\"bigint\" === typeof input.int32_or_uint64) {\n        writer.uint32(88);\n        writer.uint64(input.int32_or_uint64);\n      } else\n        $throws({\n          expected: '((bigint & Type<\"uint64\">) | (number & Type<\"int32\">))',\n          value: input.int32_or_uint64,\n        });\n      // property \"int32_or_float_or_uint64\";\n      if (\n        \"number\" === typeof input.int32_or_float_or_uint64 &&\n        Math.floor(input.int32_or_float_or_uint64) ===\n          input.int32_or_float_or_uint64 &&\n        -2147483648 <= input.int32_or_float_or_uint64 &&\n        input.int32_or_float_or_uint64 <= 2147483647\n      ) {\n        writer.uint32(96);\n        writer.int32(input.int32_or_float_or_uint64);\n      } else if (\"bigint\" === typeof input.int32_or_float_or_uint64) {\n        writer.uint32(104);\n        writer.uint64(input.int32_or_float_or_uint64);\n      } else if (\n        \"number\" === typeof input.int32_or_float_or_uint64 &&\n        -1.175494351e38 <= input.int32_or_float_or_uint64 &&\n        input.int32_or_float_or_uint64 <= 3.4028235e38\n      ) {\n        writer.uint32(117);\n        writer.float(input.int32_or_float_or_uint64);\n      } else\n        $throws({\n          expected:\n            '((bigint & Type<\"uint64\">) | (number & (Type<\"int32\"> | Type<\"float\">)))',\n          value: input.int32_or_float_or_uint64,\n        });\n      // property \"uint64_array\";\n      if (0 !== input.uint64_array.length) {\n        writer.uint32(122);\n        writer.fork();\n        for (const elem of input.uint64_array) {\n          writer.uint64(elem);\n        }\n        writer.ldelim();\n      }\n      // property \"int32_map\";\n      if (undefined !== input.int32_map && null !== input.int32_map) {\n        for (const [key, value] of input.int32_map) {\n          writer.uint32(130);\n          writer.fork();\n          writer.uint32(8);\n          writer.int32(key);\n          writer.uint32(18);\n          writer.string(value);\n          writer.ldelim();\n        }\n      }\n    };\n    //TypeTagExample;\n    $peo0(input);\n    return writer;\n  };\n  const sizer = encoder(new $Sizer());\n  const writer = encoder(new $Writer(sizer));\n  return writer.buffer();\n};","comment-tags#Comment Tags":"By using @type {target} comment tag, you also can use special numeric types.However, this way is not recommended, because it can't perform union numeric types, and cannot be used in Array and Map types. When you declare @type int32 statement, target number type be fixed as int32 type, and never can have another numeric type by declaring union statements.Also, those comment tags are not type safe. If you take a mistake when writing a comment tag, it will not be detected by the compiler, and will cause an error at runtime. For example, if you write a mis-spelled keyword like @type unit32, the target number type would be double type, and you can identify it just by running the program (or visiting playground website).\nWhy supports comment tags?\nDespite these disadvantages, the reason for maintaining comment tags is as follows.First, it is to support the legacy JSDoc style that had been used in the JS camp for a long time. If you had developed a legacy project and JSDoc being used, you can use it as is.Second, to support Prisma. If a comment is created in the Prisma Schema through the /// statement as shown below and a type is created, it is converted to a TS comment as it is. And since there is no way that union types, numeric Arrays or Maps are used in Prisma (database) schema, these comment tags are surprisingly compatible with Prisma.\nimport typia from \"typia\";\nexport interface CommentTagExample {\n  /**\n   * @type int32\n   */\n  int32: number;\n  /**\n   * @type uint32\n   */\n  uint32?: number | null;\n  /**\n   * @type uint64\n   */\n  uint64?: number;\n  /**\n   * @type int64\n   */\n  int64: number;\n  /**\n   * @type float\n   */\n  float: number | null;\n  double: number;\n  string: string;\n}\n//----\n// PROTOBUF MESSAGE SCHEMA\n//----\ntypia.protobuf.message<CommentTagExample>();\n//----\n// DECODE FUNCTION\n//----\ntypia.protobuf.createDecode<CommentTagExample>();\n//----\n// ENCODE FUNCTION\n//----\ntypia.protobuf.createEncode<CommentTagExample>();\nsyntax = \"proto3\";\nmessage CommentTagExample {\n  required int32 int32 = 1;\n  optional uint32 uint32 = 2;\n  optional uint64 uint64 = 3;\n  required int64 int64 = 4;\n  optional float float = 5;\n  required double double = 6;\n  required string string = 7;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n//----\n// PROTOBUF MESSAGE SCHEMA\n//----\n('syntax = \"proto3\";\\n\\nmessage CommentTagExample {\\n    required int32 int32 = 1;\\n    optional uint32 uint32 = 2;\\n    optional uint64 uint64 = 3;\\n    required int64 int64 = 4;\\n    optional float float = 5;\\n    required double double = 6;\\n    required string string = 7;\\n}');\n//----\n// DECODE FUNCTION\n//----\n(input) => {\n  const $Reader = typia_1.default.protobuf.createDecode.Reader;\n  const $pdo0 = (reader, length = -1) => {\n    length = length < 0 ? reader.size() : reader.index() + length;\n    const output = {\n      int32: undefined,\n      uint32: null,\n      uint64: undefined,\n      int64: undefined,\n      float: null,\n      double: undefined,\n      string: \"\",\n    };\n    while (reader.index() < length) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          // int32;\n          output.int32 = reader.int32();\n          break;\n        case 2:\n          // uint32;\n          output.uint32 = reader.uint32();\n          break;\n        case 3:\n          // uint64;\n          output.uint64 = Number(reader.uint64());\n          break;\n        case 4:\n          // int64;\n          output.int64 = Number(reader.int64());\n          break;\n        case 5:\n          // float;\n          output.float = reader.float();\n          break;\n        case 6:\n          // double;\n          output.double = reader.double();\n          break;\n        case 7:\n          // string;\n          output.string = reader.string();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return output;\n  };\n  const reader = new $Reader(input);\n  return $pdo0(reader);\n};\n//----\n// ENCODE FUNCTION\n//----\n(input) => {\n  const $Sizer = typia_1.default.protobuf.createEncode.Sizer;\n  const $Writer = typia_1.default.protobuf.createEncode.Writer;\n  const encoder = (writer) => {\n    const $peo0 = (input) => {\n      // property \"int32\";\n      writer.uint32(8);\n      writer.int32(input.int32);\n      // property \"uint32\";\n      if (undefined !== input.uint32 && null !== input.uint32) {\n        writer.uint32(16);\n        writer.uint32(input.uint32);\n      }\n      // property \"uint64\";\n      if (undefined !== input.uint64) {\n        writer.uint32(24);\n        writer.uint64(input.uint64);\n      }\n      // property \"int64\";\n      writer.uint32(32);\n      writer.int64(input.int64);\n      // property \"float\";\n      if (null !== input.float) {\n        writer.uint32(45);\n        writer.float(input.float);\n      }\n      // property \"double\";\n      writer.uint32(49);\n      writer.double(input.double);\n      // property \"string\";\n      writer.uint32(58);\n      writer.string(input.string);\n    };\n    //CommentTagExample;\n    $peo0(input);\n    return writer;\n  };\n  const sizer = encoder(new $Sizer());\n  const writer = encoder(new $Writer(sizer));\n  return writer.buffer();\n};","restrictions#Restrictions":"You know what? Expression power of Protocol Buffer is extremely narrower than type system of TypeScript. For example, Protocol Buffer can't express complicate union type containing array. Also, Protocol Buffer can't express multi dimensional array type, either.In such reason, when converting TypeScript type to Protocol buffer message schema, lots of restrictions are exist. Let's study which types of TyeScript are not supported in Protocol Buffer. For reference, if you try to call typia.protobuf.message<T>() function with unsupported type, typia will generate compile errors like below example cases.At first, top level type must be a sole and static object.If you try to use number or Array<T> type as a top level type, typia will generate compile error like below. Dynamic object types like Record<string, T>, or Map<string, T> types are not allowed either. For reference, the sole object means that, union of object types is not allowed, either.\nimport typia from \"typia\";\ninterface Cat {\n    type: \"cat\";\n    name: string;\n    ribbon: boolean;\n}\ninterface Dog {\n    type: \"dog\";\n    name: string;\n    hunt: boolean;\n}\ntypia.protobuf.message<bigint>();\ntypia.protobuf.createDecode<Record<string, number>>();\ntypia.protobuf.createDecode<Map<number & typia.tags.Type<\"float\">, Dog>>();\ntypia.protobuf.createEncode<boolean[]>();\ntypia.protobuf.createEncode<Cat | Dog>();\nmain.ts:14:1 - error TS(typia.protobuf.message): unsupported type detected\n- bigint\n  - target type must be a sole and static object type\nmain.ts:15:1 - error TS(typia.protobuf.typia.protobuf.createDecode): unsupported type detected\n- Record<string, number>\n  - target type must be a sole and static object type\nmain.ts:16:1 - error TS(typia.protobuf.typia.protobuf.createDecode): unsupported type detected\n- Map<(number & Type<\"float\">), Dog>\n  - target type must be a sole and static object type\n- (number & Type<\"float\">)\n  - target type must be a sole and static object type\nmain.ts:17:1 - error TS(typia.protobuf.typia.protobuf.createEncode): unsupported type detected\n- Array<boolean>\n  - target type must be a sole and static object type\nmain.ts:18:1 - error TS(typia.protobuf.typia.protobuf.createEncode): unsupported type detected\n- (Cat | Dog)\n  - target type must be a sole and static object type\nAt next, in Protocol Buffer, those types are categorized as container types.\nArray<T>\nMap<Key, T>\nRecord<string, T> (dynamic object)\nAlso, those container types does not allow over two-dimensional stacking. Therefore, it is not possible to declaring two dimensional array like number[][], or Array type in Map like Map<string, number[]>. Besides, value type of those container also do not support union type either.Additionally, about Map<Key, T> type, key type must be an atomic type. It means that, only boolean, number, bigint and string types are allowed. Also, key type cannot be union type, either.\nimport typia from \"typia\";\ninterface IPointer<T> {\n  value: T;\n}\ninterface Cat {\n  type: \"cat\";\n  name: string;\n  ribbon: boolean;\n}\ninterface Dog {\n  type: \"dog\";\n  name: string;\n  hunt: boolean;\n}\ntypia.protobuf.message<IPointer<number[][]>>();\ntypia.protobuf.createEncode<IPointer<Record<string, string[]>>>();\ntypia.protobuf.createDecode<IPointer<Map<string, Cat | Dog>>>();\ntypia.protobuf.message<IPointer<Map<Cat, string>>>();\ntypia.protobuf.message<IPointer<Map<number | string, Dog>>>();\nmain.ts:17:1 - error TS(typia.protobuf.message): unsupported type detected\n- IPointer<Array<Array<number>>>[key]: Array<Array<number>>\n  - does not support over two dimenstional array type\nmain.ts:18:1 - error TS(typia.protobuf.typia.protobuf.createEncode): unsupported type detected\n- IPointer<Record<string, Array<string>>>[key]: Record<string, Array<string>>\n  - does not support dynamic object with array value type\nmain.ts:19:1 - error TS(typia.protobuf.typia.protobuf.createDecode): unsupported type detected\n- IPointer<Map<string, Cat | Dog>>[key]: Map<string, (Cat | Dog)>\n  - does not support union type in map value type\nmain.ts:21:1 - error TS(typia.protobuf.message): unsupported type detected\n- IPointer<Map<Cat, string>>[key]: Map<Cat, string>\n  - does not support non-atomic key typed map\nmain.ts:22:1 - error TS(typia.protobuf.message): unsupported type detected\n- IPointer<Map<string | number, Dog>>[key]: Map<(number | string), Dog>\n  - does not support union key typed map\n  - does not support non-atomic key typed map\nAt last, those types are all not allowed.\nany\nfunctional type\nSet<T>, WeakSet<T> and WeakMap<T>\nDate, Boolean, BigInt, Number, String\nBinary classes except Uint8Array\nUint8ClampedArray, Uint16Array, Uint32Array, BigUint64Array\nInt8Array, Int16Array, Int32Array, BigInt64Array\nArrayBuffer, SharedArrayBuffer and DataView\nimport typia from \"typia\";\ninterface Something {\n  any: any;\n  unknown: unknown;\n  closure: () => void;\n  dict: Set<string> | WeakSet<Something> | WeakMap<Something, string>;\n  date: Date;\n  classic: String;\n  buffer: ArrayBuffer;\n}\ntypia.protobuf.message<Something>();\nmain.ts:13:1 - error TS(typia.protobuf.message): unsupported type detected\n- Something.any: any\n  - does not support any type\n- Something.unknown: any\n  - does not support any type\n- Something.closure: unknown\n  - does not support functional type\n- Something.dict: (Set<string> | WeakMap | WeakSet)\n  - does not support Set type\n  - does not support WeakSet type. Use Array type instead.\n  - does not support WeakMap type. Use Map type instead.\n- Something.date: Date\n  - does not support Date type. Use string type instead.\n- Something.classic: String\n  - does not support String type. Use string type instead.\n- Something.buffer: ArrayBuffer\n  - does not support ArrayBuffer type. Use Uint8Array type instead."}},"/docs/json/parse":{"title":"Parse","data":{"parse-functions#parse() functions":"export namespace json {\n  export function isParse<T>(input: string): Primitive<T> | null;\n  export function assertParse<T>(input: string): Primitive<T>;\n  export function validateParse<T>(input: string): IValidation<Primitive<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\n/**\n * Primitive type of JSON.\n *\n * `Primitive<T>` is a TMP (Type Meta Programming) type which converts\n * its argument as a primitive type within framework JSON.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be an empty object (`{}`).\n *\n * Otherwise, the target argument is a type of custom class, all of its custom method\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the primitive object.\n *\n * In addition, if the target argument is a type of custom class and it has a special\n * method `toJSON()`, return type of this `Primitive` would be not `Primitive<Instance>`\n * but `Primitive<ReturnType<Instance.toJSON>>`.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `String`                | `string`\n * `Class`                 | `object`\n * `Class` with `toJSON()` | `Primitive<ReturnType<Class.toJSON>>`\n * Native Class            | never\n * Others                  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n * @author Michael - https://github.com/8471919\n */\nexport type Primitive<T> = Equal<T, PrimitiveMain<T>> extends true\n  ? T\n  : PrimitiveMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype PrimitiveMain<Instance> = Instance extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<Instance> extends bigint\n  ? never\n  : ValueOf<Instance> extends boolean | number | string\n  ? ValueOf<Instance>\n  : Instance extends Function\n  ? never\n  : ValueOf<Instance> extends object\n  ? Instance extends object\n    ? Instance extends NativeClass\n      ? never\n      : Instance extends IJsonable<infer Raw>\n      ? ValueOf<Raw> extends object\n        ? Raw extends object\n          ? PrimitiveObject<Raw> // object would be primitified\n          : never // cannot be\n        : ValueOf<Raw> // atomic value\n      : PrimitiveObject<Instance> // object would be primitified\n    : never // cannot be\n  : ValueOf<Instance>;\ntype PrimitiveObject<Instance extends object> = Instance extends Array<infer T>\n  ? IsTuple<Instance> extends true\n    ? PrimitiveTuple<Instance>\n    : PrimitiveMain<T>[]\n  : {\n      [P in keyof Instance]: PrimitiveMain<Instance[P]>;\n    };\ntype PrimitiveTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [PrimitiveMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [PrimitiveMain<F>, ...PrimitiveTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [PrimitiveMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [PrimitiveMain<F>?, ...PrimitiveTuple<Rest>]\n  : [];\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype NativeClass =\n  | Set<any>\n  | Map<any, any>\n  | WeakSet<any>\n  | WeakMap<any, any>\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | BigUint64Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | BigInt64Array\n  | Float32Array\n  | Float64Array\n  | ArrayBuffer\n  | SharedArrayBuffer\n  | DataView;\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer U>\n    ? Instance extends U\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\ninterface IJsonable<T> {\n  toJSON(): T;\n}\nType safe JSON parser.Unlike native JSON.parse() function which returns any typed instance without type checking, typia.json.assertParse<T>() function validates instance type after the parsing. If the parsed value is not following the promised type T, it throws TypeGuardError with the first type error info.If you want to know every type error infos detaily, you can use typia.json.validateParse<T>() function instead. Otherwise, you just only want to know whether the parsed value is following the type T or not, just call typia.json.isParse<T>() function.\ntypia.json.isParse<T>(): JSON.parse() + typia.is<T>()\ntypia.json.assertParse<T>(): JSON.parse() + typia.assert<T>()\ntypia.json.validateParse<T>(): JSON.parse() + typia.validate<T>()\nLook at the below code, then you may understand how the typia.json.assertParse<T>() function works.\nimport typia, { tags } from \"typia\";\nconst json: string = JSON.stringify(typia.random<IMember>());\nconst parsed: IMember = typia.json.assertParse<IMember>(json);\nconsole.log(json === JSON.stringify(parsed)); // true\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst json = JSON.stringify(\n  ((generator) => {\n    const $generator = typia_1.default.random.generator;\n    const $ro0 = (_recursive = false, _depth = 0) => ({\n      id:\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"uuid\">',\n            kind: \"format\",\n            value: \"uuid\",\n          },\n        ]) ?? (generator?.uuid ?? $generator.uuid)(),\n      email:\n        (generator?.customs ?? $generator.customs)?.string?.([\n          {\n            name: 'Format<\"email\">',\n            kind: \"format\",\n            value: \"email\",\n          },\n        ]) ?? (generator?.email ?? $generator.email)(),\n      age:\n        (generator?.customs ?? $generator.customs)?.number?.([\n          {\n            name: 'Type<\"uint32\">',\n            kind: \"type\",\n            value: \"uint32\",\n          },\n          {\n            name: \"ExclusiveMinimum<19>\",\n            kind: \"exclusiveMinimum\",\n            value: 19,\n          },\n          {\n            name: \"Maximum<100>\",\n            kind: \"maximum\",\n            value: 100,\n          },\n        ]) ?? (generator?.integer ?? $generator.integer)(19, 100),\n    });\n    return $ro0();\n  })(),\n);\nconst parsed = ((input) => {\n  const assert = (input) => {\n    const __is = (input) => {\n      return (\n        \"object\" === typeof input &&\n        null !== input &&\n        \"string\" === typeof input.id &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          input.id,\n        ) &&\n        \"string\" === typeof input.email &&\n        /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n          input.email,\n        ) &&\n        \"number\" === typeof input.age &&\n        Math.floor(input.age) === input.age &&\n        0 <= input.age &&\n        input.age <= 4294967295 &&\n        19 < input.age &&\n        input.age <= 100\n      );\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.json.assertParse.guard;\n        const $ao0 = (input, _path, _exceptionable = true) =>\n          ((\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $guard(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            })) &&\n          ((\"string\" === typeof input.email &&\n            (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n              input.email,\n            ) ||\n              $guard(_exceptionable, {\n                path: _path + \".email\",\n                expected: 'string & Format<\"email\">',\n                value: input.email,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".email\",\n              expected: '(string & Format<\"email\">)',\n              value: input.email,\n            })) &&\n          ((\"number\" === typeof input.age &&\n            ((Math.floor(input.age) === input.age &&\n              0 <= input.age &&\n              input.age <= 4294967295) ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: 'number & Type<\"uint32\">',\n                value: input.age,\n              })) &&\n            (19 < input.age ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected:\n                '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n              value: input.age,\n            }));\n        return (\n          (((\"object\" === typeof input && null !== input) ||\n            $guard(true, {\n              path: _path + \"\",\n              expected: \"IMember\",\n              value: input,\n            })) &&\n            $ao0(input, _path + \"\", true)) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  input = JSON.parse(input);\n  return assert(input);\n})(json);\nconsole.log(json === JSON.stringify(parsed)); // true\n/**\n * Primitive type of JSON.\n *\n * `Primitive<T>` is a TMP (Type Meta Programming) type which converts\n * its argument as a primitive type within framework JSON.\n *\n * If the target argument is a built-in class which returns its origin primitive type\n * through the `valueOf()` method like the `String` or `Number`, its return type would\n * be the `string` or `number`. Otherwise, the built-in class does not have the\n * `valueOf()` method, the return type would be an empty object (`{}`).\n *\n * Otherwise, the target argument is a type of custom class, all of its custom method\n * would be erased and its prototype would be changed to the primitive `object`.\n * Therefore, return type of the TMP type finally be the primitive object.\n *\n * In addition, if the target argument is a type of custom class and it has a special\n * method `toJSON()`, return type of this `Primitive` would be not `Primitive<Instance>`\n * but `Primitive<ReturnType<Instance.toJSON>>`.\n *\n * Before                  | After\n * ------------------------|----------------------------------------\n * `Boolean`               | `boolean`\n * `Number`                | `number`\n * `String`                | `string`\n * `Class`                 | `object`\n * `Class` with `toJSON()` | `Primitive<ReturnType<Class.toJSON>>`\n * Native Class            | never\n * Others                  | No change\n *\n * @template T Target argument type.\n * @author Jeongho Nam - https://github.com/samchon\n * @author Kyungsu Kang - https://github.com/kakasoo\n * @author Michael - https://github.com/8471919\n */\nexport type Primitive<T> = Equal<T, PrimitiveMain<T>> extends true\n  ? T\n  : PrimitiveMain<T>;\ntype Equal<X, Y> = X extends Y ? (Y extends X ? true : false) : false;\ntype PrimitiveMain<Instance> = Instance extends [never]\n  ? never // (special trick for jsonable | null) type\n  : ValueOf<Instance> extends bigint\n  ? never\n  : ValueOf<Instance> extends boolean | number | string\n  ? ValueOf<Instance>\n  : Instance extends Function\n  ? never\n  : ValueOf<Instance> extends object\n  ? Instance extends object\n    ? Instance extends NativeClass\n      ? never\n      : Instance extends IJsonable<infer Raw>\n      ? ValueOf<Raw> extends object\n        ? Raw extends object\n          ? PrimitiveObject<Raw> // object would be primitified\n          : never // cannot be\n        : ValueOf<Raw> // atomic value\n      : PrimitiveObject<Instance> // object would be primitified\n    : never // cannot be\n  : ValueOf<Instance>;\ntype PrimitiveObject<Instance extends object> = Instance extends Array<infer T>\n  ? IsTuple<Instance> extends true\n    ? PrimitiveTuple<Instance>\n    : PrimitiveMain<T>[]\n  : {\n      [P in keyof Instance]: PrimitiveMain<Instance[P]>;\n    };\ntype PrimitiveTuple<T extends readonly any[]> = T extends []\n  ? []\n  : T extends [infer F]\n  ? [PrimitiveMain<F>]\n  : T extends [infer F, ...infer Rest extends readonly any[]]\n  ? [PrimitiveMain<F>, ...PrimitiveTuple<Rest>]\n  : T extends [(infer F)?]\n  ? [PrimitiveMain<F>?]\n  : T extends [(infer F)?, ...infer Rest extends readonly any[]]\n  ? [PrimitiveMain<F>?, ...PrimitiveTuple<Rest>]\n  : [];\ntype ValueOf<Instance> = IsValueOf<Instance, Boolean> extends true\n  ? boolean\n  : IsValueOf<Instance, Number> extends true\n  ? number\n  : IsValueOf<Instance, String> extends true\n  ? string\n  : Instance;\ntype NativeClass =\n  | Set<any>\n  | Map<any, any>\n  | WeakSet<any>\n  | WeakMap<any, any>\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | BigUint64Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | BigInt64Array\n  | Float32Array\n  | Float64Array\n  | ArrayBuffer\n  | SharedArrayBuffer\n  | DataView;\ntype IsTuple<T extends readonly any[] | { length: number }> = [T] extends [\n  never,\n]\n  ? false\n  : T extends readonly any[]\n  ? number extends T[\"length\"]\n    ? false\n    : true\n  : false;\ntype IsValueOf<Instance, Object extends IValueOf<any>> = Instance extends Object\n  ? Object extends IValueOf<infer U>\n    ? Instance extends U\n      ? false\n      : true // not Primitive, but Object\n    : false // cannot be\n  : false;\ninterface IValueOf<T> {\n  valueOf(): T;\n}\ninterface IJsonable<T> {\n  toJSON(): T;\n}","reusable-functions#Reusable functions":"export namespace json {\n  export function createIsParse<T>(): (input: string) => Primitive<T> | null;\n  export function createAssertParse<T>(): (input: string) => Primitive<T>;\n  export function createValidateParse<T>(): (\n    input: string,\n  ) => IValidation<Primitive<T>>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nReusable typia.json.isParse<T>() function generators.If you repeat to call typia.json.isParse<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.createIsParse<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const parseMember = typia.json.createIsParse<IMember>();\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseMember = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst parseMember = (input) => {\n  const is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  input = JSON.parse(input);\n  return is(input) ? input : null;\n};\nexports.parseMember = parseMember;"}},"/docs/pure":{"title":"Pure TypeScript","data":{"outline#Outline":"typia.assert<IBbsArticle>(article);\ntypia needs only one line with pure TypeScript type.You know what? Every other validator libraries need extra schema definition, that is different with pure TypeScript type. For an example, class-validator is the most famous validator due to used in NestJS. However, NestJS and class-validator force you to define triple duplicated DTO schema.\nTypeScript Type\nclass-validator decorators\n@nestjs/swagger decorators\nAnother famous validator library ajv requires JSON schema definition. Move to the #Demonstration, and click the ajv (JSON Schema) tab, then you may understand how it terrible. It requires hundreds of lines of JSON schema definition even just for a simple DTO.Those duplicated schema definitions are not only annoying, but also error-prone. If you take any mistake on the extra schema definition, such mistake can't be detected by TypeScript compiler. It will be detected only at runtime, therefore become a critical runtime error. Another words, it is not type safe.Besides, typia only needs pure TypeScript type. You don't need to define any extra schema like class-validator or ajv. Just define pure TypeScript type only (especially recommend to use interface type), then typia will do all the rest.","demonstration#Demonstration":"If you're confusing how typia is different with others, just see example codes below.At first, look at the first (class-validator) tab, and find the BbsArticle.files property, enhanced by blue coloured blocks. Looking at the files property, how do you feel? Just defining an array object type, you've to call 7 decorator functions. If you take any mistake when using the decorator like omitting isArray property, it would be a critical runtime erorr.Besides, typia needs only one line. Click the third (typia) tab, and find the IAttachmentFile.files property. Only one line being used, and they are even not class, but just interface types. Comparing it to the first and second tabs, how do you feel? Isn't it more simple and readable?This is the power of typia, with pure TypeScript type.\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsObject,\n  IsOptional,\n  IsString,\n  Match,\n  MaxLength,\n  Type,\n  ValidateNested,\n} from \"class-validator\";\nexport class BbsArticle {\n  @ApiProperty({\n    format: \"uuid\",\n  })\n  @IsString()\n  id!: string;\n  // DUPLICATED SCHEMA DEFINITION\n  // - duplicated function call + property type\n  // - have to specify `isArray` and `nullable` props by yourself\n  @ApiProperty({\n    type: () => AttachmentFile,\n    nullable: true,\n    isArray: true,\n    description: \"List of attached files.\",\n  })\n  @Type(() => AttachmentFile)\n  @IsArray()\n  @IsOptional()\n  @IsObject({ each: true })\n  @ValidateNested({ each: true })\n  files!: AttachmentFile[] | null;\n  @ApiProperty({\n    type: \"string\",\n    nullable: true,\n    minLength: 5,\n    maxLength: 100,\n    description: \"Title of the article.\",\n  })\n  @IsOptional()\n  @IsString()\n  title!: string | null;\n  @ApiProperty({\n    description: \"Main content body of the article.\",\n  })\n  @IsString()\n  body!: string;\n  @ApiProperty({\n    format: \"date-time\",\n    description: \"Creation time of article\",\n  })\n  @IsString()\n  created_at!: string;\n}\nexport class AttachmentFile {\n  @ApiProperty({\n    type: \"string\",\n    maxLength: 255,\n    pattern: \"^[a-zA-Z0-9-_]+$\",\n    description: \"File name.\",\n  })\n  @Matches(/^[a-z0-9]+$/)\n  @MaxLength(255)\n  @IsString()\n  name!: string | null;\n  @ApiProperty({\n    type: \"string\",\n    nullable: true,\n    maxLength: 255,\n    pattern: \"^[a-zA-Z0-9-_]+$\",\n    description: \"File extension.\",\n  })\n  @Matches(/^[a-z0-9]+$/)\n  @MaxLength(8)\n  @IsOptional()\n  @IsString()\n  extension!: string | null;\n  @ApiProperty({\n    format: \"url\",\n    description: \"URL of the file.\",\n  })\n  @IsString()\n  url!: string;\n}\n{\n  \"schemas\": [\n    {\n      \"$ref\": \"#/components/schemas/IBbsArticle\"\n    }\n  ],\n  \"components\": {\n    \"schemas\": {\n      \"IBbsArticle\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"title\": \"Primary Key\",\n            \"description\": \"Primary Key.\"\n          },\n          \"files\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IAttachmentFile\"\n            },\n            \"nullable\": true,\n            \"title\": \"List of attached files\",\n            \"description\": \"List of attached files.\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"maxLength\": 100,\n            \"minLength\": 5,\n            \"nullable\": true,\n            \"title\": \"Title of the article\",\n            \"description\": \"Title of the article.\"\n          },\n          \"body\": {\n            \"type\": \"string\",\n            \"title\": \"Main content body of the article\",\n            \"description\": \"Main content body of the article.\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Creation time of article\",\n            \"description\": \"Creation time of article.\"\n          }\n        },\n        \"nullable\": false,\n        \"required\": [\n          \"id\",\n          \"files\",\n          \"title\",\n          \"body\",\n          \"created_at\"\n        ]\n      },\n      \"IAttachmentFile\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 255,\n            \"pattern\": \"^[a-z0-9]+$\",\n            \"title\": \"File name\",\n            \"description\": \"File name.\"\n          },\n          \"extension\": {\n            \"type\": \"string\",\n            \"maxLength\": 8,\n            \"pattern\": \"^[a-z0-9]+$\",\n            \"nullable\": true,\n            \"title\": \"File extension\",\n            \"description\": \"File extension.\"\n          },\n          \"url\": {\n            \"type\": \"string\",\n            \"title\": \"URL of the file\",\n            \"description\": \"URL of the file.\"\n          }\n        },\n        \"nullable\": false,\n        \"required\": [\n          \"name\",\n          \"extension\",\n          \"url\"\n        ]\n      }\n    }\n  },\n  \"purpose\": \"swagger\",\n  \"surplus\": false\n}\nimport typia, { tags } from \"typia\";\nexport interface IBbsArticle {\n  /**\n   * Primary Key.\n   */\n  id: string & tags.Format<\"uuid\">;\n  /**\n   * List of attached files.\n   */\n  files: null | IAttachmentFile[];\n  /**\n   * Title of the article.\n   */\n  title: null | (string & tags.MinLength<5> & tags.MaxLength<100>);\n  /**\n   * Main content body of the article.\n   */\n  body: string;\n  /**\n   * Creation time of article.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport interface IAttachmentFile {\n  /**\n   * File name.\n   */\n  name: string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<255>;\n  /**\n   * File extension.\n   */\n  extension: null | (string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<8>);\n  /**\n   * URL of the file.\n   */\n  url: string;\n}","aot-compilation#AOT Compilation":"Someone may be suspicious of the phrase \"Pure TypeScript Type\".\n\"As you know, TypeScript types do not have any tangible instance when compiled to JS.However, with only these fictitious TypeScript types, how can typia validates types at runtime? How typia builds much faster JSON serializer only with these types? Are these things really possible without extra schema definition like class-validator or ajv?\"\nMy answer is: \"Yes, it is possible due to typia analyzes your server code, and performs AOT compilation\".Such compile time optimization is called AOT (Ahead of Time) compilation. And this is the secret why typia can do everything with only pure TypeScript type. Read below example codes, and just look how JavaScript file being compiled. Then you may understand why typia is much easier, and futhermore much faster.\nRuntime validator is 20,000x faster than class-validator\nJSON serialization is 200x faster than class-transformer\nimport typia, { tags } from \"typia\";\nexport interface IBbsArticle {\n  /**\n   * Primary Key.\n   */\n  id: string & tags.Format<\"uuid\">;\n  /**\n   * List of attached files.\n   */\n  files: null | IAttachmentFile[];\n  /**\n   * Title of the article.\n   */\n  title: null | (string & tags.MinLength<5> & tags.MaxLength<100>);\n  /**\n   * Main content body of the article.\n   */\n  body: string;\n  /**\n   * Creation time of article.\n   */\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport interface IAttachmentFile {\n  /**\n   * File name.\n   */\n  name: string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<255>;\n  /**\n   * File extension.\n   */\n  extension: null | (string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<8>);\n  /**\n   * URL of the file.\n   */\n  url: string;\n}\nimport typia from \"typia\";\nimport { IBbsArticle } from \"./IBbsArticle\";\nexport const assertArticle = typia.createAssert<IBbsArticle>();\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n  return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertArticle = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst assertArticle = (input) => {\n  const __is = (input) => {\n    const $io0 = (input) =>\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      (null === input.files ||\n        (Array.isArray(input.files) &&\n          input.files.every(\n            (elem) => \"object\" === typeof elem && null !== elem && $io1(elem),\n          ))) &&\n      (null === input.title ||\n        (\"string\" === typeof input.title &&\n          5 <= input.title.length &&\n          input.title.length <= 100)) &&\n      \"string\" === typeof input.body &&\n      \"string\" === typeof input.created_at &&\n      !isNaN(new Date(input.created_at).getTime());\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      /^[a-z0-9]+$/.test(input.name) &&\n      input.name.length <= 255 &&\n      (null === input.extension ||\n        (\"string\" === typeof input.extension &&\n          /^[a-z0-9]+$/.test(input.extension) &&\n          input.extension.length <= 8)) &&\n      \"string\" === typeof input.url;\n    return \"object\" === typeof input && null !== input && $io0(input);\n  };\n  if (false === __is(input))\n    ((input, _path, _exceptionable = true) => {\n      const $guard = typia_1.default.createAssert.guard;\n      const $ao0 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.id &&\n          (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n            input.id,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: 'string & Format<\"uuid\">',\n              value: input.id,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".id\",\n            expected: '(string & Format<\"uuid\">)',\n            value: input.id,\n          })) &&\n        (null === input.files ||\n          ((Array.isArray(input.files) ||\n            $guard(_exceptionable, {\n              path: _path + \".files\",\n              expected: \"(Array<IAttachmentFile> | null)\",\n              value: input.files,\n            })) &&\n            input.files.every(\n              (elem, _index1) =>\n                (((\"object\" === typeof elem && null !== elem) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files[\" + _index1 + \"]\",\n                    expected: \"IAttachmentFile\",\n                    value: elem,\n                  })) &&\n                  $ao1(\n                    elem,\n                    _path + \".files[\" + _index1 + \"]\",\n                    true && _exceptionable,\n                  )) ||\n                $guard(_exceptionable, {\n                  path: _path + \".files[\" + _index1 + \"]\",\n                  expected: \"IAttachmentFile\",\n                  value: elem,\n                }),\n            )) ||\n          $guard(_exceptionable, {\n            path: _path + \".files\",\n            expected: \"(Array<IAttachmentFile> | null)\",\n            value: input.files,\n          })) &&\n        (null === input.title ||\n          (\"string\" === typeof input.title &&\n            (5 <= input.title.length ||\n              $guard(_exceptionable, {\n                path: _path + \".title\",\n                expected: \"string & MinLength<5>\",\n                value: input.title,\n              })) &&\n            (input.title.length <= 100 ||\n              $guard(_exceptionable, {\n                path: _path + \".title\",\n                expected: \"string & MaxLength<100>\",\n                value: input.title,\n              }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".title\",\n            expected: \"((string & MinLength<5> & MaxLength<100>) | null)\",\n            value: input.title,\n          })) &&\n        (\"string\" === typeof input.body ||\n          $guard(_exceptionable, {\n            path: _path + \".body\",\n            expected: \"string\",\n            value: input.body,\n          })) &&\n        ((\"string\" === typeof input.created_at &&\n          (!isNaN(new Date(input.created_at).getTime()) ||\n            $guard(_exceptionable, {\n              path: _path + \".created_at\",\n              expected: 'string & Format<\"date-time\">',\n              value: input.created_at,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".created_at\",\n            expected: '(string & Format<\"date-time\">)',\n            value: input.created_at,\n          }));\n      const $ao1 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.name &&\n          (/^[a-z0-9]+$/.test(input.name) ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: 'string & Pattern<\"^[a-z0-9]+$\">',\n              value: input.name,\n            })) &&\n          (input.name.length <= 255 ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"string & MaxLength<255>\",\n              value: input.name,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".name\",\n            expected: '(string & Pattern<\"^[a-z0-9]+$\"> & MaxLength<255>)',\n            value: input.name,\n          })) &&\n        (null === input.extension ||\n          (\"string\" === typeof input.extension &&\n            (/^[a-z0-9]+$/.test(input.extension) ||\n              $guard(_exceptionable, {\n                path: _path + \".extension\",\n                expected: 'string & Pattern<\"^[a-z0-9]+$\">',\n                value: input.extension,\n              })) &&\n            (input.extension.length <= 8 ||\n              $guard(_exceptionable, {\n                path: _path + \".extension\",\n                expected: \"string & MaxLength<8>\",\n                value: input.extension,\n              }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".extension\",\n            expected:\n              '((string & Pattern<\"^[a-z0-9]+$\"> & MaxLength<8>) | null)',\n            value: input.extension,\n          })) &&\n        (\"string\" === typeof input.url ||\n          $guard(_exceptionable, {\n            path: _path + \".url\",\n            expected: \"string\",\n            value: input.url,\n          }));\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IBbsArticle\",\n            value: input,\n          })) &&\n          $ao0(input, _path + \"\", true)) ||\n        $guard(true, {\n          path: _path + \"\",\n          expected: \"IBbsArticle\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  return input;\n};\nexports.assertArticle = assertArticle;\nMeasured on Intel i5-1135g7, Surface Pro 8"}},"/docs/setup":{"title":"Setup","data":{"summary#Summary":"npm install typia\nnpx typia setup\npnpm install typia\npnpm typia setup --manager pnpm\n# YARN BERRY IS NOT SUPPORTED\nyarn add typia\nyarn typia setup --manager yarn\nbun add typia\nbun typia setup --manager bun\nJust run npx typia setup command if you're using tsc. The setup wizard will do everything.By the way, if you need additional bundling, the third party library unplugin-typia is recommended.Otherwise non-standard compiler case, only the generation mode is available.\nStandard Compiler\nMicrosoft/TypeScript (tsc)\nNon-standard Compilers\nbabel\nesbuild -> covered by unplugin-typia\nSWC","transformation#Transformation":"","concepts#Concepts":"AOT (Ahead of Time) compilation mode.When you write a TypeScript code calling typia.createIs<IMember>() function and compile it through tsc command, typia will replace the typia.createIs<IMember>() statement to optimal validation code in the compiled JavaScript file, for the IMember type.This is the transform mode performing AOT (Ahead of Time) compilation.\nimport typia, { tags } from \"typia\";\nexport const check = typia.createIs<IMember>();\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.check = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst check = (input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.email &&\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n      input.email,\n    ) &&\n    \"number\" === typeof input.age &&\n    19 < input.age &&\n    input.age <= 100\n  );\n};\nexports.check = check;","setup-wizard#Setup Wizard":"npm install --save typia\nnpx typia setup\npnpm install --save typia\npnpm typia setup --manager pnpm\n# YARN BERRY IS NOT SUPPORTED\nyarn add typia\nyarn typia setup --manager yarn\nbun add typia\nbun typia setup --manager bun\nYou can turn on transformation mode just by running npx typia setup command.Setup wizard would be executed, and it will do everything for the transformation.","manual-setup#Manual Setup":"npm install --save typia\nnpm install --save-dev typescript ts-patch\npnpm install --save typia\npnpm install --save-dev typescript ts-patch\n# YARN BERRY IS NOT SUPPORTED\nyarn add typia\nyarn add -D typescript ts-patch\nbun add typia\nbun add -d typescript ts-patch\nIf you want to install typia manually, just follow the steps.Firstly install typia as a dependency. And then, install typescript and ts-patch as devDependencies.\n{\n  \"strict\": true,\n  \"strictNullChecks\": true,\n  \"compilerOptions\": {\n    \"plugins\": [\n      { \"transform\": \"typia/lib/transform\" }\n    ]\n  }\n}\nSecondly open your tsconfig.json file as shown above.As typia generates optimal operation code through transformation, it must be configured as a plugin. Also, never forget to configure strict (or strictNullChecks) to be true within your tsconfig.json compilerOptions. It is essential option for modern TypeScript development.\n{\n  \"scripts\": {\n    \"prepare\": \"ts-patch install\"\n  },\n  \"dependencies\": {\n    \"typia\": \"^6.0.6\"\n  },\n  \"devDependencies\": {\n    \"ts-patch\": \"^3.2.0\",\n    \"typescript\": \"^5.4.5\"\n  }\n}\nnpm run prepare\npnpm prepare\n# YARN BERRY IS NOT SUPPORTED\nyarn prepare\nbun prepare\nFinally open package.json file and configure npm run prepare command like above.Be sure to run npm run prepare once you have made these changes.For reference, ts-patch is an helper library of TypeScript compiler that supporting custom transformations by plugins. From now on, whenever you run tsc command, your typia function call statements would be transformed to the optimal operation codes in the compiled JavaScript files.","bundlers#Bundlers":"","unplugin-typia#unplugin-typia":"unplugin-typia is a plugin to integrate typia into your bundlers seamlessly.Currently, unplugin-typia supports the following bundlers:\nBun\nEsbuild\nFarm\nNext.js\nRolldown\nRollup\nRspack\nVite\nWebpack\nnpx jsr add -D @ryoppippi/unplugin-typia\nnpm install --save typia\nnpx typia setup\npnpm dlx jsr add -D @ryoppippi/unplugin-typia\npnpm install typia\npnpm typia setup --manager pnpm\n# YARN BERRY IS NOT SUPPORTED\nyarn dlx jsr add -D @ryoppippi/unplugin-typia\nyarn add typia\nyarn typia setup --manager yarn\nbun add @ryoppippi/unplugin-typia\nbun add typia\nbun typia setup\nAt first, install both unplugin-typia and typia, with npx typia setup command.After that, follow the next section steps to integrate unplugin-typia into your bundlers.For reference, there are a couple of ways to integrate unplugin-typia into your bundlers. For the full integration guide, please refer to the unplugin-typia documentation. Also, you can see the examples projects in unplugin-typia repository.\nimport UnpluginTypia from 'unplugin-typia/vite'\n \nexport default defineConfig({\n  plugins: [\n    UnpluginTypia({ /* options */ })\n  ],\n})\nimport unTypiaNext from \"unplugin-typia/next\";\n \n/** @type {import('next').NextConfig} */\nconst config = {\n  // your next.js config\n};\nexport default unTypiaNext(\n  config,\n  {} // options of unplugin-typia\n);\nimport { build } from 'esbuild'\nimport UnpluginTypia from 'unplugin-typia/esbuild';\n \nbuild({\n  plugins: [\n    UnpluginTypia({ /* options */ }),\n  ],\n});","webpack#webpack":"unplugin-typia also supports webpack as well.\n# TYPIA\nnpm install typia\nnpx typia setup\n# WEBPACK + TS-LOADER\nnpm install --save-dev ts-loader\nnpm install --save-dev webpack webpack-cli\n# TYPIA\npnpm install typia\npnpm typia setup --manager pnpm\n# WEBPACK + TS-LOADER\npnpm install --save-dev ts-loader\npnpm install --save-dev webpack webpack-cli\n###########################################\n# YARN BERRY IS NOT SUPPORTED\n###########################################\n# TYPIA\nyarn add typia\nyarn typia setup --manager yarn\n# WEBPACK + TS-LOADER\nyarn add -D ts-loader\nyarn add -D webpack webpack-cli\n# TYPIA\nbun add typia\nbun typia setup\n# WEBPACK + TS-LOADER\nbun add -d ts-loader\nbun add -d webpack webpack-cli\nWhen you're using webpack as a bundler, you can still utilize the transformation mode.Just install ts-loader as well as webpack, and configure webpack.config.js file like below.\nconst path = require(\"path\");\nconst nodeExternals = require(\"webpack-node-externals\");\nmodule.exports = {\n  // CUSTOMIZE HERE\n  entry: [\"./src/index.tsx\"],\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"index.js\",\n  },\n  optimization: {\n    minimize: false,\n  },\n  // JUST KEEP THEM\n  mode: \"development\",\n  target: \"node\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        loader: \"ts-loader\",\n      },\n    ],\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n  },\n};\nFrom now on, you can build the single JS file just by running the npx webpack command. By the way, when removing devDependencies for --production install, never forget to add the --ignore-scripts option to prevent the prepare script.\nnpx webpack\nnpm ci --omit=dev --ignore-scripts\npnpm webpack\npnpm install --production --ignore-scripts\nyarn webpack\nrm -rf node_modules\nyarn install --production --ignore-scripts --immutable\nbun webpack\nbun install --production --ignore-scripts\nAdditionally, if you're using typia in the NodeJS project especially for the backend development, Setup Guide Documents of nestia would be helpful. Even though you're not using NestJS, you can still utilize below documents, and \"Single JS file only\" mode would be especially helpful for you.\nNestia > Setup > Webpack\nWith node_modules\nSingle JS file only","nx#NX":"npm install --save typia\nnpx typia setup\npnpm install --save typia\npnpm typia setup --manager pnpm\n# YARN BERRY IS NOT SUPPORTED\nyarn add typia\nyarn typia setup --manager yarn\nbun add typia\nbun typia setup --manager bun\nAfter install typia like above, you have to modify project.json on each app like below.\n \"targets\": {\n    \"build\": {\n      ...\n      \"options\": {\n        ...\n        \"target\": \"node\",\n        \"compiler\": \"tsc\",\n        \"transformers\": [\n          \"typia/lib/transform\",\n        ]\n      }\n    },\n    ...\n }","generation#Generation":"# INSTALL TYPIA\nnpm install --save typia\nnpm install --save-dev typescript\n# GENERATE TRANSFORMED TYPESCRIPT CODES\nnpx typia generate \\\n  --input src/templates \\\n  --output src/generated \\\n  --project tsconfig.json\n# INSTALL TYPIA\npnpm install --save typia\npnpm install --save-dev typescript\n# GENERATE TRANSFORMED TYPESCRIPT CODES\npnpm typia generate \\\n  --input src/templates \\\n  --output src/generated \\\n  --project tsconfig.json\n# INSTALL TYPIA\nyarn add typia\nyarn add -D typescript\n# GENERATE TRANSFORMED TYPESCRIPT CODES\nyarn typia generate \\\n  --input src/templates \\\n  --output src/generated \\\n  --project tsconfig.json\n# INSTALL TYPIA\nbun add typia\nbun add -d typescript\nbun typia generate \\\n  --input src/templates \\\n  --output src/generated \\\n  --project tsconfig.json\nFor frontend projects.If you are using a non-standard TypeScript compiler such as the following, you will need to fall back to generation mode\nNon-standard TypeScript compilers:\nBabel in Create-React-App\nesbuild in Vite -> covered by unplugin-typia\nSWC in Next.js -> only Next.js is covered by unplugin-typia\nInstead you should utilise the generation mode.Install typia through npm install command, and run typia generate command. Then, generator of typia reads your TypeScript codes of --input, and writes transformed TypeScript files into the --output directory, like below.For clarification, the input directory should contain one or more TypeScript files which define how you want to verify your associated type assertions. Commonly you will import your TypeScript type, then export a function which validates that type. See below.If you want to specify other TypeScript project file instead of tsconfig.json, you can use --project option.\nimport typia from \"typia\";\nimport { IMember } from \"../structures/IMember\";\nexport const check = typia.createIs<IMember>();\nimport typia from \"typia\";\nimport { IMember } from \"../structures/IMember\";\nexport const check = (input: any): input is IMember => {\n  const $is_uuid = (typia.createIs as any).is_uuid;\n  const $is_email = (typia.createIs as any).is_email;\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    $is_uuid(input.id) &&\n    \"string\" === typeof input.email &&\n    $is_email(input.email) &&\n    \"number\" === typeof input.age &&\n    19 <= input.age &&\n    100 >= input.age\n  );\n};\nWhy not support non-standard compilers?Non-standard TypeScript compilers are removing every type informations, and skipping type checkings for rapid compilation. By the way, without those type informations, typia can't do anything. This is the reason why typia doesn't support non-standard TypeScript compilers."}},"/docs/utilization/trpc":{"title":"Trpc","data":{"":"import { initTRPC } from \"@trpc/server\";\nimport { v4 } from \"uuid\";\nimport typia from \"typia\";\nimport { IBbsArticle } from \"../structures/IBbsArticle\";\nconst server = initTRPC.create();\nexport const appRouter = server.router({\n  store: server.procedure\n    .input(typia.createAssert<IBbsArticle.IStore>())\n    .output(typia.createAssert<IBbsArticle>())\n    .query(({ input }) => {\n      return {\n        id: v4(),\n        writer: input.writer,\n        title: input.title,\n        body: input.body,\n        created_at: new Date().toString(),\n      };\n    }),\n});\nexport type AppRouter = typeof appRouter;"}},"/docs/json/stringify":{"title":"Stringify","data":{"stringify-functions#stringify() functions":"export namespace json {\n  export function stringify<T>(input: T): string;\n  export function isStringify<T>(input: T | unknown): string | null;\n  export function assertStringify<T>(input: T | unknown): string;\n  export function validateStringify<T>(input: T | unknown): IValidation<string>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nYou can boost up JSON serialization speed just by calling typia.json.stringify<T>() function. Also, you even can ensure type safety of JSON serialization by calling other functions like typia.json.isStringify() and typia.json.assertStringify() functions.As typia.json.stringify<T>() function writes dedicated JSON serialization code only for the target type T, its performance is much faster than native JSON.stringify() function. However, because of the dedicated optimal JSON serialization code, when wrong typed data comes, unexpected error be occured.Instead, typia supports type safe JSON serialization functions like typia.json.isStringify(). The typia.json.isStringify() is a combination function of typia.is<T>() and typia.json.stringify<T>() function. It checks whether the input value is valid for the target type T or not first, and operate JSON serialization later. If the input value is not matched with the type T, it returns null value.\ntypia.json.isStringify(): typia.is<T>() + typia.json.stringify<T>()\ntypia.json.assertStringify(): typia.assert<T>() + typia.json.stringify<T>()\ntypia.json.validateStringify(): typia.validate<T>() + typia.json.stringify<T>()\nAOT compliation\ntypia.json.isStringify() and other similar functions are still much faster than native JSON.stringify() function, even though they include type checking process. This is the power of AOT compilation, writing optimal dedicated code by analyzing TypeScript type, in the compilation level.\nimport typia, { tags } from \"typia\";\nconst department: IDepartment = typia.random<IDepartment>();\nconst json: string | null = typia.json.isStringify(department);\nconsole.log(json); // not null, but string\ninterface IDepartment {\n    id: string & tags.Format<\"uuid\">;\n    name: string & tags.MinLength<3>;\n    limit: number & tags.Type<\"int32\">;\n    clerks: IClerk[];\n}\ninterface IClerk {\n    name: string;\n    age: number \n        & tags.Type<\"uint32\"> \n        & tags.ExclusiveMinimum<19> \n        & tags.Maximum<100>;\n    authority: number;\n    joined_at: string & tags.Format<\"date\">;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst department = ((generator) => {\n  const $generator = typia_1.default.random.generator;\n  const $ro0 = (_recursive = false, _depth = 0) => ({\n    id:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"uuid\">',\n          kind: \"format\",\n          value: \"uuid\",\n        },\n      ]) ?? (generator?.uuid ?? $generator.uuid)(),\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: \"MinLength<3>\",\n          kind: \"minLength\",\n          value: 3,\n        },\n      ]) ??\n      (generator?.string ?? $generator.string)(\n        (generator?.integer ?? $generator.integer)(3, 25),\n      ),\n    limit:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"int32\">',\n          kind: \"type\",\n          value: \"int32\",\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(0, 100),\n    clerks: (generator?.array ?? $generator.array)(() =>\n      $ro1(_recursive, _recursive ? 1 + _depth : _depth),\n    ),\n  });\n  const $ro1 = (_recursive = false, _depth = 0) => ({\n    name:\n      (generator?.customs ?? $generator.customs)?.string?.([]) ??\n      (generator?.string ?? $generator.string)(),\n    age:\n      (generator?.customs ?? $generator.customs)?.number?.([\n        {\n          name: 'Type<\"uint32\">',\n          kind: \"type\",\n          value: \"uint32\",\n        },\n        {\n          name: \"ExclusiveMinimum<19>\",\n          kind: \"exclusiveMinimum\",\n          value: 19,\n        },\n        {\n          name: \"Maximum<100>\",\n          kind: \"maximum\",\n          value: 100,\n        },\n      ]) ?? (generator?.integer ?? $generator.integer)(19, 100),\n    authority:\n      (generator?.customs ?? $generator.customs)?.number?.([]) ??\n      (generator?.number ?? $generator.number)(0, 100),\n    joined_at:\n      (generator?.customs ?? $generator.customs)?.string?.([\n        {\n          name: 'Format<\"date\">',\n          kind: \"format\",\n          value: \"date\",\n        },\n      ]) ?? (generator?.date ?? $generator.date)(),\n  });\n  return $ro0();\n})();\nconst json = ((input) => {\n  const is = (input) => {\n    const $io0 = (input) =>\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.name &&\n      3 <= input.name.length &&\n      \"number\" === typeof input.limit &&\n      Math.floor(input.limit) === input.limit &&\n      -2147483648 <= input.limit &&\n      input.limit <= 2147483647 &&\n      Array.isArray(input.clerks) &&\n      input.clerks.every(\n        (elem) => \"object\" === typeof elem && null !== elem && $io1(elem),\n      );\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100 &&\n      \"number\" === typeof input.authority &&\n      !Number.isNaN(input.authority) &&\n      \"string\" === typeof input.joined_at &&\n      /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n    return \"object\" === typeof input && null !== input && $io0(input);\n  };\n  const stringify = (input) => {\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100 &&\n      \"number\" === typeof input.authority &&\n      \"string\" === typeof input.joined_at &&\n      /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n    const $string = typia_1.default.json.isStringify.string;\n    const $so0 = (input) =>\n      `{\"id\":${$string(input.id)},\"name\":${$string(input.name)},\"limit\":${input.limit},\"clerks\":${`[${input.clerks.map((elem) => `{\"name\":${$string(elem.name)},\"age\":${elem.age},\"authority\":${elem.authority},\"joined_at\":${$string(elem.joined_at)}}`).join(\",\")}]`}}`;\n    return $so0(input);\n  };\n  return is(input) ? stringify(input) : null;\n})(department);\nconsole.log(json); // not null, but string","reusable-functions#Reusable functions":"export namespace json {\n  export function createStringify<T>: (input: T) => string;\n  export function createIsStringify<T>: (\n      input: T | unknown\n  ) => string | null;\n  export function createAssertStringify<T>: (\n      input: T | unknown\n  ) => string;\n  export function createValidateStringify<T>: (\n      input: T | unknown\n  ) => IValidation<string>;\n}\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nReusable typia.json.stringify<T>() function generators.If you repeat to call typia.json.stringify<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.json.createStringify<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const assertDepartment = typia.json.createAssertStringify<IDepartment>();\ninterface IDepartment {\n  id: string & tags.Format<\"uuid\">;\n  name: string & tags.MinLength<3>;\n  limit: number & tags.Type<\"int32\">;\n  clerks: IClerk[];\n}\ninterface IClerk {\n  name: string;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n  authority: number;\n  joined_at: string & tags.Format<\"date\">;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertDepartment = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst assertDepartment = (input) => {\n  const assert = (input) => {\n    const __is = (input) => {\n      const $io0 = (input) =>\n        \"string\" === typeof input.id &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          input.id,\n        ) &&\n        \"string\" === typeof input.name &&\n        3 <= input.name.length &&\n        \"number\" === typeof input.limit &&\n        Math.floor(input.limit) === input.limit &&\n        -2147483648 <= input.limit &&\n        input.limit <= 2147483647 &&\n        Array.isArray(input.clerks) &&\n        input.clerks.every(\n          (elem) => \"object\" === typeof elem && null !== elem && $io1(elem),\n        );\n      const $io1 = (input) =>\n        \"string\" === typeof input.name &&\n        \"number\" === typeof input.age &&\n        Math.floor(input.age) === input.age &&\n        0 <= input.age &&\n        input.age <= 4294967295 &&\n        19 < input.age &&\n        input.age <= 100 &&\n        \"number\" === typeof input.authority &&\n        !Number.isNaN(input.authority) &&\n        \"string\" === typeof input.joined_at &&\n        /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n      return \"object\" === typeof input && null !== input && $io0(input);\n    };\n    if (false === __is(input))\n      ((input, _path, _exceptionable = true) => {\n        const $guard = typia_1.default.json.createAssertStringify.guard;\n        const $ao0 = (input, _path, _exceptionable = true) =>\n          ((\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $guard(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            })) &&\n          ((\"string\" === typeof input.name &&\n            (3 <= input.name.length ||\n              $guard(_exceptionable, {\n                path: _path + \".name\",\n                expected: \"string & MinLength<3>\",\n                value: input.name,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"(string & MinLength<3>)\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.limit &&\n            ((Math.floor(input.limit) === input.limit &&\n              -2147483648 <= input.limit &&\n              input.limit <= 2147483647) ||\n              $guard(_exceptionable, {\n                path: _path + \".limit\",\n                expected: 'number & Type<\"int32\">',\n                value: input.limit,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".limit\",\n              expected: '(number & Type<\"int32\">)',\n              value: input.limit,\n            })) &&\n          (((Array.isArray(input.clerks) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            })) &&\n            input.clerks.every(\n              (elem, _index1) =>\n                (((\"object\" === typeof elem && null !== elem) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".clerks[\" + _index1 + \"]\",\n                    expected: \"IClerk\",\n                    value: elem,\n                  })) &&\n                  $ao1(\n                    elem,\n                    _path + \".clerks[\" + _index1 + \"]\",\n                    true && _exceptionable,\n                  )) ||\n                $guard(_exceptionable, {\n                  path: _path + \".clerks[\" + _index1 + \"]\",\n                  expected: \"IClerk\",\n                  value: elem,\n                }),\n            )) ||\n            $guard(_exceptionable, {\n              path: _path + \".clerks\",\n              expected: \"Array<IClerk>\",\n              value: input.clerks,\n            }));\n        const $ao1 = (input, _path, _exceptionable = true) =>\n          (\"string\" === typeof input.name ||\n            $guard(_exceptionable, {\n              path: _path + \".name\",\n              expected: \"string\",\n              value: input.name,\n            })) &&\n          ((\"number\" === typeof input.age &&\n            ((Math.floor(input.age) === input.age &&\n              0 <= input.age &&\n              input.age <= 4294967295) ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: 'number & Type<\"uint32\">',\n                value: input.age,\n              })) &&\n            (19 < input.age ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $guard(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected:\n                '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n              value: input.age,\n            })) &&\n          ((\"number\" === typeof input.authority &&\n            !Number.isNaN(input.authority)) ||\n            $guard(_exceptionable, {\n              path: _path + \".authority\",\n              expected: \"number\",\n              value: input.authority,\n            })) &&\n          ((\"string\" === typeof input.joined_at &&\n            (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at) ||\n              $guard(_exceptionable, {\n                path: _path + \".joined_at\",\n                expected: 'string & Format<\"date\">',\n                value: input.joined_at,\n              }))) ||\n            $guard(_exceptionable, {\n              path: _path + \".joined_at\",\n              expected: '(string & Format<\"date\">)',\n              value: input.joined_at,\n            }));\n        return (\n          (((\"object\" === typeof input && null !== input) ||\n            $guard(true, {\n              path: _path + \"\",\n              expected: \"IDepartment\",\n              value: input,\n            })) &&\n            $ao0(input, _path + \"\", true)) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IDepartment\",\n            value: input,\n          })\n        );\n      })(input, \"$input\", true);\n    return input;\n  };\n  const stringify = (input) => {\n    const $io1 = (input) =>\n      \"string\" === typeof input.name &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100 &&\n      \"number\" === typeof input.authority &&\n      \"string\" === typeof input.joined_at &&\n      /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(input.joined_at);\n    const $string = typia_1.default.json.createAssertStringify.string;\n    const $so0 = (input) =>\n      `{\"id\":${$string(input.id)},\"name\":${$string(input.name)},\"limit\":${input.limit},\"clerks\":${`[${input.clerks.map((elem) => `{\"name\":${$string(elem.name)},\"age\":${elem.age},\"authority\":${elem.authority},\"joined_at\":${$string(elem.joined_at)}}`).join(\",\")}]`}}`;\n    return $so0(input);\n  };\n  return stringify(assert(input));\n};\nexports.assertDepartment = assertDepartment;","performance#Performance":"Comparing JSON serialization speed with others, it is maximum 200x faster than class-transformer.For reference, class-transformer is the most famous library used in NestJS with class-validator. Also, fast-json-stringify is another famous one used in fastify. However, whether they are fast or slow, both of them require extra schema definition, that is different with TypeScript type. If you see the code below without experience of them, you may get shocked: how complicate and inefficient they are:\nfast-json-stringify requires JSON schema definition.\nclass-validator requires DTO class with decorator function calls.\nMeasured on Intel i5-1135g7, Surface Pro 8","server-performance#Server Performance":"Someone may ask:\nJSON serialization speed affects on the server performance?I think that the JSON serialization is just a tiny thing in the server side, isn't it?\nMy answer is, \"Yes, it affects on the server performance\".Most operations in NodeJS server are asynchronously executed in background thread, what are called \"event based non-blocking I/O model\". However, JSON serialization is a synchronous operation running on the main thread. Therefore, if the JSON serialization speed is slow, it makes the entire server program slow.I'll show you the benchmark result that, how JSON serizliation speed affects on the server performance.\nMeasured on Intel i5-1135g7, Surface Pro 8"}},"/docs/validators/assert":{"title":"Assert","data":{"assert-function#assert() function":"export function assert<T>(input: T): T;\nexport function assert<T>(input: unknown): T;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nAsserts a value type.typia.assert<T>() function throws a TypeGuardError when wrong type comes.The TypeGuardError instance has only the first type error info, with access path and expected type. In the below example case, as the age property is wrong with its definition (@exclusiveMinimum), such TypeGuardError would be thrown:\nmethod: typia.assert()\npath: input.age\nvalue: 18,\nexpected: number & ExclusiveMinimum<19>\nAOT compliation\nIf you'd used other competitive validator libraries like ajv or class-validator, you may found that typia does not require any extra schema definition. If you have not experienced them, I can sure that you may get shocked after reading below extra schema definition files.\najv requires JSON schema definition.\nclass-validator requires DTO class with decorator function calls.\nYeah, typia needs only pure TypeScript type. As typia is a compiler library, it can analyze TypeScript type by itself, and possible to write the optimal validation code like below. This is the key principle of typia, which needs only one line with pure TypeScript type.\nimport typia, { tags } from \"typia\";\nimport { v4 } from \"uuid\";\ntypia.assert<IMember>({\n  id: v4(),\n  email: \"samchon.github@gmail.com\",\n  age: 18, // wrong, must be greater than 19\n});\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst uuid_1 = require(\"uuid\");\n((input) => {\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  if (false === __is(input))\n    ((input, _path, _exceptionable = true) => {\n      const $guard = typia_1.default.assert.guard;\n      const $ao0 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.id &&\n          (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n            input.id,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: 'string & Format<\"uuid\">',\n              value: input.id,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".id\",\n            expected: '(string & Format<\"uuid\">)',\n            value: input.id,\n          })) &&\n        ((\"string\" === typeof input.email &&\n          (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n            input.email,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".email\",\n              expected: 'string & Format<\"email\">',\n              value: input.email,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".email\",\n            expected: '(string & Format<\"email\">)',\n            value: input.email,\n          })) &&\n        ((\"number\" === typeof input.age &&\n          ((Math.floor(input.age) === input.age &&\n            0 <= input.age &&\n            input.age <= 4294967295) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: 'number & Type<\"uint32\">',\n              value: input.age,\n            })) &&\n          (19 < input.age ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & ExclusiveMinimum<19>\",\n              value: input.age,\n            })) &&\n          (input.age <= 100 ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & Maximum<100>\",\n              value: input.age,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".age\",\n            expected:\n              '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n            value: input.age,\n          }));\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $ao0(input, _path + \"\", true)) ||\n        $guard(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  return input;\n})({\n  id: (0, uuid_1.v4)(),\n  email: \"samchon.github@gmail.com\",\n  age: 18, // wrong, must be greater than 19\n});","assertequals-function#assertEquals() function":"export function assertEquals<T>(input: T): T;\nexport function assertEquals<T>(input: unknown): T;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nMore strict assert function prohibiting superfluous properties.typia.assert<T>() function inspects input value type and throws TypeGuardError when mismatched, however, it can't detect superfluous properties. If you want to prohibit those superfluous properties, therefore throws an TypeGuardError when superfluous property exists, use typia.assertEquals<T()> function instead.In the below example case, as sex property is not defined in the IMember type, such TypeGuardError would be thrown:\nmethod: typia.assertEquals()\npath: input.sex\nvalue: 1,\n expected: undefined\nimport typia, { tags } from \"typia\";\nimport { v4 } from \"uuid\";\ntypia.assert<IMember>({\n  id: v4(),\n  email: \"samchon.github@gmail.com\",\n  age: 30,\n  sex: 1, // extra\n});\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst uuid_1 = require(\"uuid\");\n((input) => {\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  if (false === __is(input))\n    ((input, _path, _exceptionable = true) => {\n      const $guard = typia_1.default.assert.guard;\n      const $ao0 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.id &&\n          (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n            input.id,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: 'string & Format<\"uuid\">',\n              value: input.id,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".id\",\n            expected: '(string & Format<\"uuid\">)',\n            value: input.id,\n          })) &&\n        ((\"string\" === typeof input.email &&\n          (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n            input.email,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".email\",\n              expected: 'string & Format<\"email\">',\n              value: input.email,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".email\",\n            expected: '(string & Format<\"email\">)',\n            value: input.email,\n          })) &&\n        ((\"number\" === typeof input.age &&\n          ((Math.floor(input.age) === input.age &&\n            0 <= input.age &&\n            input.age <= 4294967295) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: 'number & Type<\"uint32\">',\n              value: input.age,\n            })) &&\n          (19 < input.age ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & ExclusiveMinimum<19>\",\n              value: input.age,\n            })) &&\n          (input.age <= 100 ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & Maximum<100>\",\n              value: input.age,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".age\",\n            expected:\n              '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n            value: input.age,\n          }));\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $ao0(input, _path + \"\", true)) ||\n        $guard(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  return input;\n})({\n  id: (0, uuid_1.v4)(),\n  email: \"samchon.github@gmail.com\",\n  age: 30,\n  sex: 1, // extra\n})","assertguard-functions#assertGuard() functions":"export function assertGurad<T>(input: T): asserts inut is T;\nexport function assertGuard<T>(input: unknown): asserts input is T;\nexport function assertGuardEquals<T>(input: T): asserts inut is T;\nexport function assertGuardEquals<T>(input: unknown): asserts input is T;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nAssertion guard of a value type.typia.assertGuard<T>() is similar with typia.assert<T>() throwing a TypeGuardError when wrong type.However, typia.assert<T>() returns the paramteric input value itself when there's no type problem on the parametric input value, whereas the typia.assertGuard<T>() function returns nothing. Instead, the parametric input value would be automatically cased to the type T. This is the concept of \"Assertion Guard\" of a value type.Such similarities and differences of typia.assertGuard<T>() and typia.assert<T>() functions are the same in the case of typia.assertGuardEquals<T>() and typia.assertEquals<T>() functions. If there's no type problem on the typia.assertGuardEquals<T>() function, it also performs the \"Assertion Guard\".Look at the below code, then you may understand what the \"Assertion Guard\" means.\nimport typia from \"typia\";\ninterface IPoint {\n  x: number;\n  y: number;\n}\nconst input: unknown = { x: 1, y: 2 };\n// PERFORM THE ASSERTION GUARD\ntypia.assertGuard<IPoint>(input);\n// FROM NOW ON, \"input\" IS THE \"IPoint\" TYPE\ninput.x; // OK\ninput.y; // OK","reusable-functions#Reusable functions":"export function createAssert<T>(): (input: unknown) => T;\nexport function createAssertEquals<T>(): (input: unknown) => T;\nexport function createAssertGuard<T>(): AssertionGuard<T>;\nexport function createAssertGuardEquals<T>(): AssertionGuard<T>;\nexport class TypeGuardError extends Error {\n  public readonly method: string;\n  public readonly path: string | undefined;\n  public readonly expected: string;\n  public readonly value: any;\n}\nexport type AssertionGuard<T> = (input: unknown) => asserts input is T;\nReusable typia.assert<T>() function generators.If you repeat to call typia.assert<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.createAssert<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const assertMember = typia.createAssert<IMember>();\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertMember = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst assertMember = (input) => {\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  if (false === __is(input))\n    ((input, _path, _exceptionable = true) => {\n      const $guard = typia_1.default.createAssert.guard;\n      const $ao0 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.id &&\n          (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n            input.id,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".id\",\n              expected: 'string & Format<\"uuid\">',\n              value: input.id,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".id\",\n            expected: '(string & Format<\"uuid\">)',\n            value: input.id,\n          })) &&\n        ((\"string\" === typeof input.email &&\n          (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n            input.email,\n          ) ||\n            $guard(_exceptionable, {\n              path: _path + \".email\",\n              expected: 'string & Format<\"email\">',\n              value: input.email,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".email\",\n            expected: '(string & Format<\"email\">)',\n            value: input.email,\n          })) &&\n        ((\"number\" === typeof input.age &&\n          ((Math.floor(input.age) === input.age &&\n            0 <= input.age &&\n            input.age <= 4294967295) ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: 'number & Type<\"uint32\">',\n              value: input.age,\n            })) &&\n          (19 < input.age ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & ExclusiveMinimum<19>\",\n              value: input.age,\n            })) &&\n          (input.age <= 100 ||\n            $guard(_exceptionable, {\n              path: _path + \".age\",\n              expected: \"number & Maximum<100>\",\n              value: input.age,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".age\",\n            expected:\n              '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n            value: input.age,\n          }));\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $ao0(input, _path + \"\", true)) ||\n        $guard(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  return input;\n};\nexports.assertMember = assertMember;\nExplicity of Assertion Guard\nBe careful when using typia.createAssertGuard<T>() or typia.createAssertGuardEquals<T>() functions.When calling those functions, you've to declare the variable type explicit on the caller variable. If you don't do it, so that the caller variables come the implicit function type, TypeScript compiler throws an error like below. This is a special limitation of TypeScript compiler about the \"Assertion Guard\".\nimport typia, { AssertionGuard } from \"typia\";\n//MUST DECLARE THE VARIABLE TYPE\nconst explicit: AssertionGuard<number> = typia.createAssertGuard<number>();\n// IF NOT, COMPILATION ERROR BE OCCURED\nconst implicit = typia.createAssertGuard<number>();\nAssertions require every name in the call target to be declared with an explicit type annotation.","restrictions#Restrictions":"typia.assert<T>() function does not check function and user-defined class types.It validates only the primitive properties. Therefore, typia.assert<T>() function does not perform the instanceof ClassName for user-defined classes. If you want to validate the user-defined class type in addition to the property types, do it by yourself. Also, typia.assert<T>() function does not validate the function type either, unless configuring functional property of plugin option in the tsconfig.json file.\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"typia/lib/transform\",\n        \"functional\": true\n      }\n    ]\n  }\n}\nBy the way, there're some exception cases.If JS native class type like Date, Uint8Array, or Map<Key, T> being utilized, typia.assert<T>() function validates them. Especially about the Set<T>, and Map<Key, T> class cases, typia.assert<T>() function validates all of their contained element types, too.Therefore, the instanceof statement does not be used only for the user-defined classes.\nimport typia from \"typia\";\ntypia.createIs<Map<string, boolean | number | string>>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  return (\n    input instanceof Map &&\n    (() =>\n      [...input].every(\n        (elem) =>\n          Array.isArray(elem) &&\n          elem.length === 2 &&\n          \"string\" === typeof elem[0] &&\n          (\"string\" === typeof elem[1] ||\n            \"number\" === typeof elem[1] ||\n            \"boolean\" === typeof elem[1]),\n      ))()\n  );\n};","customization#Customization":"You can enhance validation logic by special tags.Also, with those tags, you can add your custom validation logic, too.If you want to know about such special tags detaily, read below article:\nSpecial Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const assertSomething = typia.createAssert<Something>();\n//----\n// DEFINE CUSTOM TYPE TAGS\n//----\ntype Dollar = tags.TagBase<{\n  kind: \"dollar\";\n  target: \"string\";\n  value: undefined;\n  validate: `$input[0] === \"$\" && !isNaN(Number($input.substring(1).split(\",\").join(\"\")))`;\n}>;\ntype Postfix<Value extends string> = tags.TagBase<{\n  kind: \"postfix\";\n  target: \"string\";\n  value: Value;\n  validate: `$input.endsWith(\"${Value}\")`;\n}>;\ntype IsEven<Value extends number | bigint> = tags.TagBase<{\n  kind: \"isEven\";\n  target: Value extends number ? \"number\" : \"bigint\";\n  value: undefined;\n  validate: `$input % ${Numeric<2>} === ${Numeric<0>}`;\n}>;\ntype Numeric<Value extends number | bigint> = Value extends number\n  ? Value\n  : `BigInt(${Value})`;\n//----\n// VALIDATION\n//----\ninterface Something {\n  dollar: string & Dollar;\n  postfix: string & Postfix<\"!!!\">;\n  isEven: number & IsEven<number>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertSomething = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst assertSomething = (input) => {\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.dollar &&\n      input.dollar[0] === \"$\" &&\n      !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\"))) &&\n      \"string\" === typeof input.postfix &&\n      input.postfix.endsWith(\"!!!\") &&\n      \"number\" === typeof input.isEven &&\n      input.isEven % 2 === 0\n    );\n  };\n  if (false === __is(input))\n    ((input, _path, _exceptionable = true) => {\n      const $guard = typia_1.default.createAssert.guard;\n      const $ao0 = (input, _path, _exceptionable = true) =>\n        ((\"string\" === typeof input.dollar &&\n          ((input.dollar[0] === \"$\" &&\n            !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\")))) ||\n            $guard(_exceptionable, {\n              path: _path + \".dollar\",\n              expected: \"string & Dollar\",\n              value: input.dollar,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".dollar\",\n            expected: \"(string & Dollar)\",\n            value: input.dollar,\n          })) &&\n        ((\"string\" === typeof input.postfix &&\n          (input.postfix.endsWith(\"!!!\") ||\n            $guard(_exceptionable, {\n              path: _path + \".postfix\",\n              expected: 'string & Postfix<\"!!!\">',\n              value: input.postfix,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".postfix\",\n            expected: '(string & Postfix<\"!!!\">)',\n            value: input.postfix,\n          })) &&\n        ((\"number\" === typeof input.isEven &&\n          (input.isEven % 2 === 0 ||\n            $guard(_exceptionable, {\n              path: _path + \".isEven\",\n              expected: \"number & IsEven<number>\",\n              value: input.isEven,\n            }))) ||\n          $guard(_exceptionable, {\n            path: _path + \".isEven\",\n            expected: \"(number & IsEven<number>)\",\n            value: input.isEven,\n          }));\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $guard(true, {\n            path: _path + \"\",\n            expected: \"Something\",\n            value: input,\n          })) &&\n          $ao0(input, _path + \"\", true)) ||\n        $guard(true, {\n          path: _path + \"\",\n          expected: \"Something\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  return input;\n};\nexports.assertSomething = assertSomething;","performance#Performance":"Super-fast and super-safe.Comparing typia.assert<T>() function with other competitive libraries, maximum 20,000x faster.Furthermore, only typia can validate complicate union types.\nMeasured on Intel i5-1135g7, Surface Pro 8\nComponents\ttypia\tTypeBox\tajv\tio-ts\tzod\tC.V.\tEasy to use\t✅\t❌\t❌\t❌\t❌\t❌\tObject (simple)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (recursive)\t✔\t❌\t✔\t✔\t✔\t✔\t✔\tObject (union, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tObject (union, explicit)\t✔\t✔\t✔\t✔\t✔\t❌\tObject (additional tags)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (template literal types)\t✔\t✔\t✔\t❌\t❌\t❌\tObject (dynamic properties)\t✔\t✔\t✔\t❌\t❌\t❌\tArray (rest tuple)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tArray (recursive)\t✔\t✔\t✔\t✔\t✔\t❌\tArray (recursive, union)\t✔\t✔\t❌\t✔\t✔\t❌\tArray (R+U, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated, union)\t✅\t❌\t❌\t❌\t❌\t❌\tUltimate Union Type\t✅\t❌\t❌\t❌\t❌\t❌\t\nC.V. means class-validator"}},"/docs/validators/is":{"title":"Is","data":{"is-function#is() function":"export function is<T>(input: T): input is T;\nexport function is<T>(input: unknown): input is T;\nTests a value type.When you need to test an instance type, just call typia.is<T>() function.If the input value is following type T, true value would be returned. Otherwise, false would be returned.\nAOT compliation\nIf you'd used other competitive validator libraries like ajv or class-validator, you may found that typia does not require any extra schema definition. If you have not experienced them, I can sure that you may get shocked after reading below extra schema definition files.\najv requires JSON schema definition.\nclass-validator requires DTO class with decorator function calls.\nYeah, typia needs only pure TypeScript type. As typia is a compiler library, it can analyze TypeScript type by itself, and possible to write the optimal validation code like below. This is the key principle of typia, which needs only one line with pure TypeScript type.\nimport typia, { tags } from \"typia\";\nimport { v4 } from \"uuid\";\nconst matched: boolean = typia.is<IMember>({\n  id: v4(),\n  email: \"samchon.github@gmai19l.com\",\n  age: 30,\n});\nconsole.log(matched); // true\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst uuid_1 = require(\"uuid\");\nconst matched = ((input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.email &&\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n      input.email,\n    ) &&\n    \"number\" === typeof input.age &&\n    Math.floor(input.age) === input.age &&\n    0 <= input.age &&\n    input.age <= 4294967295 &&\n    19 < input.age &&\n    input.age <= 100\n  );\n})({\n  id: (0, uuid_1.v4)(),\n  email: \"samchon.github@gmai19l.com\",\n  age: 30,\n});\nconsole.log(matched); // true","equals-function#equals() function":"export function equals<T>(input: T): input is T;\nexport function equals<T>(input: unknown): input is T;\nMore strict checker prohibiting superfluous properties.typia.is<T>() can test instance type, but it allows superfluous properties.If you want to prohibit those superfluous properties, you can use typia.equals<T>() function instead.\nimport typia, { tags } from \"typia\";\nimport { v4 } from \"uuid\";\nconst input: unknown = {\n  id: v4(),\n  email: \"samchon.github@gmail.com\",\n  age: 30,\n  extra: \"superfluous property\", // extra\n};\nconst is: boolean = typia.is<IMember>(input);\nconst equals: boolean = typia.equals<IMember>(input);\nconsole.log(is, equals); // true, false\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst uuid_1 = require(\"uuid\");\nconst input = {\n  id: (0, uuid_1.v4)(),\n  email: \"samchon.github@gmail.com\",\n  age: 30,\n  extra: \"superfluous property\", // extra\n};\nconst is = ((input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.email &&\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n      input.email,\n    ) &&\n    \"number\" === typeof input.age &&\n    Math.floor(input.age) === input.age &&\n    0 <= input.age &&\n    input.age <= 4294967295 &&\n    19 < input.age &&\n    input.age <= 100\n  );\n})(input);\nconst equals = ((input, _exceptionable = true) => {\n  const $io0 = (input, _exceptionable = true) =>\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.email &&\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n      input.email,\n    ) &&\n    \"number\" === typeof input.age &&\n    Math.floor(input.age) === input.age &&\n    0 <= input.age &&\n    input.age <= 4294967295 &&\n    19 < input.age &&\n    input.age <= 100 &&\n    (3 === Object.keys(input).length ||\n      Object.keys(input).every((key) => {\n        if ([\"id\", \"email\", \"age\"].some((prop) => key === prop)) return true;\n        const value = input[key];\n        if (undefined === value) return true;\n        return false;\n      }));\n  return \"object\" === typeof input && null !== input && $io0(input, true);\n})(input);\nconsole.log(is, equals); // true, false","reusable-functions#Reusable functions":"export function createIs<T>(): (input: unknown) => input is T;\nexport function createEquals<T>(): (input: unknown) => input is T;\nReusable typia.is<T>() function generators.If you repeat to call typia.is<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.createIs<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const check = typia.createIs<IMember>();\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.check = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst check = (input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.email &&\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n      input.email,\n    ) &&\n    \"number\" === typeof input.age &&\n    Math.floor(input.age) === input.age &&\n    0 <= input.age &&\n    input.age <= 4294967295 &&\n    19 < input.age &&\n    input.age <= 100\n  );\n};\nexports.check = check;","auto-type-casting#Auto Type Casting":"export function is<T>(input: unknown): input is T;\nexport function equals<T>(input: unknown): input is T;\nexport function createIs<T>(): (input: unknown) => input is T;\nexport function createEquals<T>(): (input: unknown) => input is T;\ntypia.is<T>() function can be used for type casting.When target input value is following the type T, therefore true value be returned, typia.is<T>() function automatically casts the input value to the type T. Therefore, you can utilize the typia.is<T>() function for safe type casting tool like below:\nconst input: unknown = {\n  id: v4(),\n  email: \"samchon.github@gmail.com\",\n  age: 30,\n} as any;\nif (typia.is<IMember>(input)) {\n  // auto type casting\n  console.log(input.id, input.email, input.age);\n}","restrictions#Restrictions":"typia.is<T>() function does not check function and user-defined class types.It validates only the primitive properties. Therefore, typia.is<T>() function does not perform the instanceof ClassName for user-defined classes. If you want to validate the user-defined class type in addition to the property types, do it by yourself. Also, typia.is<T>() function does not validate the function type either, unless configuring functional property of plugin option in the tsconfig.json file.\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"typia/lib/transform\",\n        \"functional\": true\n      }\n    ]\n  }\n}\nBy the way, there're some exception cases.If JS native class type like Date, Uint8Array, or Map<Key, T> being utilized, typia.is<T>() function validates them. Especially about the Set<T>, and Map<Key, T> class cases, typia.is<T>() function validates all of their contained element types, too.Therefore, the instanceof statement does not be used only for the user-defined classes.\nimport typia from \"typia\";\ntypia.createIs<Map<string, boolean | number | string>>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  return (\n    input instanceof Map &&\n    (() =>\n      [...input].every(\n        (elem) =>\n          Array.isArray(elem) &&\n          elem.length === 2 &&\n          \"string\" === typeof elem[0] &&\n          (\"string\" === typeof elem[1] ||\n            \"number\" === typeof elem[1] ||\n            \"boolean\" === typeof elem[1]),\n      ))()\n  );\n};","customization#Customization":"You can enhance validation logic by special tags.Also, with those tags, you can add your custom validation logic, too.If you want to know about such special tags detaily, read below article:\nSpecial Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSomething = typia.createIs<Something>();\n//----\n// DEFINE CUSTOM TYPE TAGS\n//----\ntype Dollar = tags.TagBase<{\n  kind: \"dollar\";\n  target: \"string\";\n  value: undefined;\n  validate: `$input[0] === \"$\" && !isNaN(Number($input.substring(1).split(\",\").join(\"\")))`;\n}>;\ntype Postfix<Value extends string> = tags.TagBase<{\n  kind: \"postfix\";\n  target: \"string\";\n  value: Value;\n  validate: `$input.endsWith(\"${Value}\")`;\n}>;\ntype IsEven<Value extends number | bigint> = tags.TagBase<{\n  kind: \"isEven\";\n  target: Value extends number ? \"number\" : \"bigint\";\n  value: undefined;\n  validate: `$input % ${Numeric<2>} === ${Numeric<0>}`;\n}>;\ntype Numeric<Value extends number | bigint> = Value extends number\n  ? Value\n  : `BigInt(${Value})`;\n//----\n// VALIDATION\n//----\ninterface Something {\n  dollar: string & Dollar;\n  postfix: string & Postfix<\"!!!\">;\n  isEven: number & IsEven<number>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSomething = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSomething = (input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.dollar &&\n    input.dollar[0] === \"$\" &&\n    !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\"))) &&\n    \"string\" === typeof input.postfix &&\n    input.postfix.endsWith(\"!!!\") &&\n    \"number\" === typeof input.isEven &&\n    input.isEven % 2 === 0\n  );\n};\nexports.checkSomething = checkSomething;","performance#Performance":"Super-fast and super-safe.Comparing typia.is<T>() function with other competitive libraries, maximum 20,000x faster.Furthermore, only typia can validate complicate union types.\nMeasured on Intel i5-1135g7, Surface Pro 8\nComponents\ttypia\tTypeBox\tajv\tio-ts\tzod\tC.V.\tEasy to use\t✅\t❌\t❌\t❌\t❌\t❌\tObject (simple)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (recursive)\t✔\t❌\t✔\t✔\t✔\t✔\t✔\tObject (union, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tObject (union, explicit)\t✔\t✔\t✔\t✔\t✔\t❌\tObject (additional tags)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (template literal types)\t✔\t✔\t✔\t❌\t❌\t❌\tObject (dynamic properties)\t✔\t✔\t✔\t❌\t❌\t❌\tArray (rest tuple)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tArray (recursive)\t✔\t✔\t✔\t✔\t✔\t❌\tArray (recursive, union)\t✔\t✔\t❌\t✔\t✔\t❌\tArray (R+U, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated, union)\t✅\t❌\t❌\t❌\t❌\t❌\tUltimate Union Type\t✅\t❌\t❌\t❌\t❌\t❌\t\nC.V. means class-validator"}},"/docs/validators/tags":{"title":"Tags","data":{"outline#Outline":"typia can perform additional validation through type tags and comment tags.When you need additional validation logic that is not supported in pure TypeScript type spec, you can use type tags and comment tags for it. For example, if you define a type with intersection symbol like number & typia.tags.Type<\"uint32\"> and validates it, typia will check the target numeric value is unsigned integer or not.Also, in TypeScript (and JavaScript), writing @ character in comment is called Comment Tag and typia utilizes such comment tags for enhancing type validation logic. As you can see from below example code, typia analyzes @tagName value patterned comment tags, and generates optimal validation logic in the compilation level.Therefore, don't be afraid typia uses only pure TypeScript types for type validation schema. Don't be afraid about TypeScript does not support integer type. With those type tags and comment tags, you can express every types in the world.\nQ: How to validate integer type? TypeScript does not support it\nA1: Use type tag number & typia.tags.Type<\"int32\">\nA2: Write a comment tag @type int32 on the target property\nQ: Type Tag vs Comment Tags, which one is better\nA1: Type Tag is recommended because it is much safer and generous\nA2: Comment Tag is designed for legacy JSDoc styled projects\nimport typia, { tags } from \"typia\";\nexport const checkCustomTag = typia.createIs<CustomTag>();\ninterface CustomTag {\n  /**\n   * @type uint32\n   */\n  type: number;\n  number?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  /**\n   * @minLength 3\n   */\n  string: string;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  /**\n   * Type tag can perform union type.\n   *\n   * In here case, format can be oneof `ipv4` or `ipv6` format.\n   */\n  format: (string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">)) | null;\n  /**\n   * In the Array case, only type tag can restrict element type.\n   */\n  array: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n  /**\n   * Also, only type tag can handle map type.\n   */\n  map: Map<\n    number & tags.Type<\"uint32\">,\n    Array<string & tags.Format<\"uuid\">> & tags.MinItems<1>\n  >;\n}\n----------------------------------------------------------- */\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkCustomTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkCustomTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.type &&\n    Math.floor(input.type) === input.type &&\n    0 <= input.type &&\n    input.type <= 4294967295 &&\n    (undefined === input.number ||\n      (\"number\" === typeof input.number &&\n        19 < input.number &&\n        input.number <= 100)) &&\n    \"string\" === typeof input.string &&\n    3 <= input.string.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.format ||\n      (\"string\" === typeof input.format &&\n        (/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/.test(\n          input.format,\n        ) ||\n          /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))$/i.test(\n            input.format,\n          )))) &&\n    Array.isArray(input.array) &&\n    3 <= input.array.length &&\n    input.array.length <= 100 &&\n    input.array.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          elem,\n        ),\n    ) &&\n    input.map instanceof Map &&\n    (() =>\n      [...input.map].every(\n        (elem) =>\n          Array.isArray(elem) &&\n          elem.length === 2 &&\n          \"number\" === typeof elem[0] &&\n          Math.floor(elem[0]) === elem[0] &&\n          0 <= elem[0] &&\n          elem[0] <= 4294967295 &&\n          Array.isArray(elem[1]) &&\n          1 <= elem[1].length &&\n          elem[1].every(\n            (elem) =>\n              \"string\" === typeof elem &&\n              /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n                elem,\n              ),\n          ),\n      ))();\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkCustomTag = checkCustomTag;","type-tags#Type Tags":"By using type tags, you can utilize additional validation logics.Just import one of type tags from typia, and combine it with target through intersection symbol like number & typia.tags.Type<\"uint32\"> case. If you want to declare an union validation logic, combine | and bracket (()) symbols properly like below:\nnumber & (Type<\"uint32\"> | Type<\"double\">)\nnumber type can be both uint32 and double\n(number & Type<\"int32\">) | (bigint & Type<\"uint64\">)\nnumber is int32\nbigint is uint64\n(number & (Type<\"int32\">)| Type<\"float\">) | (bigint & Type<\"uint64\">)\nnumber can be both int32 and float\nbigint is uint64\nHere is the entire list of type tags that typia basically supports.For reference, when you take a mistake that choosing different target type, TypeScript compiler would block it with compilation error message. Also, if you take a mistake that placing invalid argument on the type, it would also be blocked IDE and compiler. Therefore, have a confidence when using them.\nnumber\nnumber & Type<{keyword}>\nint32\nuint32\nuint64\nint64\nfloat\ndouble\nnumber & Minimum<{number}>\nnumber & Maximum<{number}>\nnumber & ExclusiveMaximum<{number}>\nnumber & ExclusiveMinimum<{number}>\nnumber & MultipleOf<{number}>\nbigint\nbigint & Type<{keyword}>\nint64\nuint64\nbigint & Minimum<{bigint}>\nbigint & Maximum<{bigint}>\nbigint & ExclusiveMaximum<{bigint}>\nbigint & ExclusiveMinimum<{bigint}>\nbigint & MultipleOf<{bigint}>\nstring\nstring & MinLength<{number}>\nstring & MaxLength<{number}>\nstring & Pattern<{regex}>\nstring & Format<{keyword}>\nbyte\npassword\nregex\nuuid\nemail\nhostname\nidn-email\nidn-hostname\niri\niri-reference\nipv4\nipv6\nuri\nuri-reference\nuri-template\nurl\ndate-time\ndate\ntime\nduration\njson-pointer\nrelative-json-pointer\nAlso, if you need custom validation logic, just make it by yourself referencing Customization section. It is easy to define. For such type safety and generous use case reasons even customization supporting, I recommend you to use type tags instead of comment tags, unless you are maintaining a legacy JSDoc styled project.\nimport typia, { tags } from \"typia\";\nexport const checkCustomTag = typia.createIs<CustomTag>();\ninterface CustomTag {\n  type: number & tags.Type<\"uint32\">;\n  number?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  string: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  /**\n   * Type tag can perform union type.\n   *\n   * In here case, format can be oneof `ipv4` or `ipv6` format.\n   */\n  format: (string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">)) | null;\n  /**\n   * In the Array case, only type tag can restrict element type.\n   */\n  array: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n  /**\n   * Also, only type tag can handle map type.\n   */\n  map: Map<\n    number & tags.Type<\"uint32\">,\n    Array<string & tags.Format<\"uuid\">> & tags.MinItems<1>\n  >;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkCustomTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkCustomTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.type &&\n    Math.floor(input.type) === input.type &&\n    0 <= input.type &&\n    input.type <= 4294967295 &&\n    (undefined === input.number ||\n      (\"number\" === typeof input.number &&\n        19 < input.number &&\n        input.number <= 100)) &&\n    \"string\" === typeof input.string &&\n    3 <= input.string.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.format ||\n      (\"string\" === typeof input.format &&\n        (/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/.test(\n          input.format,\n        ) ||\n          /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))$/i.test(\n            input.format,\n          )))) &&\n    Array.isArray(input.array) &&\n    3 <= input.array.length &&\n    input.array.length <= 100 &&\n    input.array.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n          elem,\n        ),\n    ) &&\n    input.map instanceof Map &&\n    (() =>\n      [...input.map].every(\n        (elem) =>\n          Array.isArray(elem) &&\n          elem.length === 2 &&\n          \"number\" === typeof elem[0] &&\n          Math.floor(elem[0]) === elem[0] &&\n          0 <= elem[0] &&\n          elem[0] <= 4294967295 &&\n          Array.isArray(elem[1]) &&\n          1 <= elem[1].length &&\n          elem[1].every(\n            (elem) =>\n              \"string\" === typeof elem &&\n              /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n                elem,\n              ),\n          ),\n      ))();\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkCustomTag = checkCustomTag;","comment-tags#Comment Tags":"typia supports those comment tags, too.Here is the entire list of comment tags that typia supports.\nnumber\n@type {string}\nint / int32\nuint / uint32\nint64\nuint64\nfloat\n@minimum {number}\n@maximum {number}\n@exclusiveMinimum {number}\n@exclusiveMaximum {number}\n@multipleOf {number}\nbigint\n@type uint64\n@minimum {bigint}\n@maximum {bigint}\n@exclusiveMinimum {bigint}\n@exclusiveMaximum {bigint}\n@multipleOf {bigint}\nstring\n@minLength {number}\n@maxLength {number}\n@pattern {regex}\n@format {keyword}\nbyte\npassword\nregex\nuuid\nemail\nhostname\nidn-email\nidn-hostname\niri\niri-reference\nipv4\nipv6\nuri\nuri-reference\nuri-template\nurl\ndate-time\ndate\ntime\nduration\njson-pointer\nrelative-json-pointer\narray\n@minItems {number}\n@maxItems {number}\nBy the way, I do not recommend this way, because it can't perform union numeric types, and can be used for only object property type. It can't be used standalone, and cannot be used for element type of Array and Map even when they're declared on object property. Also, When you declare @type int32 statement, target number type be fixed as int32 type, and never can have another numeric type by declaring union statements.Also, those comment tags are not type safe. If you take a mistake when writing a comment tag, it will not be detected by the compiler, and will cause an error at runtime. For example, if you write a mis-spelled keyword like @type unit32, the target number type would be double type, and you can identify it just by running the program (or visiting playground website).\nWhy supports comment tags?\nDespite these disadvantages, the reason for maintaining comment tags is as follows.First, it is to support the legacy JSDoc style that had been used in the JS camp for a long time. If you had developed a legacy project and JSDoc being used, you can use it as is.Second, to support Prisma. If a comment is created in the Prisma Schema through the /// statement as shown below and a type is created, it is converted to a TS comment as it is. And since there is no way that union types, numeric Arrays or Maps are used in Prisma (database) schema, these comment tags are surprisingly compatible with Prisma.\nimport typia from \"typia\";\nexport const checkCustomTag = typia.createIs<CustomTag>();\ninterface CustomTag {\n  /**\n   * @type uint32\n   */\n  type: number;\n  /**\n   * @exclusiveMinimum 19\n   * @maximum 100\n   */\n  number?: number;\n  /**\n   * @minLength 3\n   */\n  string: string;\n  /**\n   * @Pattern /^[a-z]+$/\n   */\n  pattern: string;\n  // NO WAY WHEN COMMENT TAG\n  // /**\n  //  * Type tag can perform union type.\n  //  *\n  //  * In here case, format can be oneof `ipv4` or `ipv6` format.\n  //  */\n  // format: (string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">)) | null;\n  // NO WAY WHEN COMMENT TAG\n  // /**\n  //  * In the Array case, only type tag can restrict element type.\n  //  */\n  // array: Array<string & tags.Format<\"uuid\">>\n  //     & tags.MinItems<3>\n  //     & tags.MaxItems<100>;\n  // NO WAY WHEN COMMENT TAG\n  // /**\n  //  * Also, only type tag can handle map type.\n  //  */\n  // map: Map<\n  //     number & tags.Type<\"uint32\">,\n  //     Array<string & tags.Format<\"uuid\">> & tags.MinItems<1>\n  // >;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkCustomTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkCustomTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.type &&\n    Math.floor(input.type) === input.type &&\n    0 <= input.type &&\n    input.type <= 4294967295 &&\n    (undefined === input.number ||\n      (\"number\" === typeof input.number &&\n        19 < input.number &&\n        input.number <= 100)) &&\n    \"string\" === typeof input.string &&\n    3 <= input.string.length &&\n    \"string\" === typeof input.pattern;\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkCustomTag = checkCustomTag;","customization#Customization":"export type TagBase<Props extends TagBase.IProps<any, any, any, any, any>> = {\n  /**\n   * This is a dummy property for compilation.\n   *\n   * It does not mean anything in runtime.\n   */\n  \"typia.tag\"?: Props;\n};\nexport namespace TagBase {\n  export interface IProps<\n    Target extends \"bigint\" | \"number\" | \"string\" | \"array\",\n    Kind extends string,\n    Value extends boolean | bigint | number | string | undefined,\n    Validate extends\n      | string\n      | {\n          [key in Target]?: string;\n        },\n    Exclusive extends boolean | string[],\n  > {\n    /**\n     * Target type.\n     *\n     * If user tries to adapt this tag to a different type, it would be a compile\n     * error.\n     *\n     * For example, you've configured target type as `string`, but user adapted it\n     * onto a `number` type (`number & YourCustomTag<Value>`), then it would be\n     * blocked by TypeScript compiler.\n     */\n    target: Target;\n    /**\n     * What kind of tag is this?\n     */\n    kind: Kind;\n    /**\n     * Value to be configured by user.\n     */\n    value: Value;\n    /**\n     * Validation code.\n     *\n     * This code would be inserted into the generated validation function.\n     * In here script, target variable name must be `$input`. The variable name\n     * `$input` would be transformed to the suitable when compilation.\n     *\n     * Also, If you've take a mistake on this script, compile error would be\n     * occured. So, define it with confidence. Compiler will block all your\n     * mistakes.\n     */\n    validate: Validate;\n    /**\n     * Exclusive option.\n     *\n     * If this property configured as `true`, same {@link kind} tag cannot be\n     * duplicated in the target type. Otherwise, if you've configured this property\n     * as string array, all of the {@link kind} value assigned tag cannot be\n     * compatible in the target type.\n     *\n     * @default false\n     */\n    exclusive?: Exclusive | string[];\n  }\n}\nimport { TagBase } from \"./TagBase\";\nexport type Minimum<Value extends number | bigint> = TagBase<{\n  target: Value extends number ? \"number\" : \"bigint\";\n  kind: \"minimum\";\n  value: Value;\n  validate: `${Numeric<Value>} <= $input`;\n  exclusive: [\"minimum\", \"exclusiveMinimum\"];\n}>;\ntype Numeric<Value extends number | bigint> = Value extends number\n  ? Value\n  : `BigInt(${Value})`;\nimport { TagBase } from \"./TagBase\";\nexport type Type<\n  Value extends \"int32\" | \"uint32\" | \"int64\" | \"uint64\" | \"float\" | \"double\",\n> = TagBase<{\n  target: Value extends \"int64\" | \"uint64\" ? \"bigint\" | \"number\" : \"number\";\n  kind: \"type\";\n  value: Value;\n  validate: Value extends \"int32\"\n    ? `Math.floor($input) === $input && -2147483648 <= $input && $input <= 2147483647`\n    : Value extends \"uint32\"\n    ? `Math.floor($input) === $input && 0 <= $input && $input <= 4294967295`\n    : Value extends \"int64\"\n    ? {\n        number: `Math.floor($input) === $input && -9223372036854775808 <= $input && $input <= 9223372036854775807`;\n        bigint: `true`;\n      }\n    : Value extends \"uint64\"\n    ? {\n        number: `Math.floor($input) === $input && 0 <= $input && $input <= 18446744073709551615`;\n        bigint: `BigInt(0) <= $input`;\n      }\n    : Value extends \"float\"\n    ? `-1.175494351e38 <= $input && $input <= 3.4028235e38`\n    : `true`;\n  exclusive: true;\n}>;\nimport { TagBase } from \"./TagBase\";\nexport type Pattern<Value extends string> = TagBase<{\n  target: \"string\";\n  kind: \"pattern\";\n  value: Value;\n  validate: `/${Value}/.test($input)`;\n}>;\nAbove types are supported by typia basically.If you make a custom type tag extending typia.tags.TagBase<Props> type, and utilize it on your type with intersection symbol like number & Minimum<3>, its validation logic 3 <= $input would be inserted into the compiled JavaScript file.Also, as you can see from the typia.tags.TagBase<Props> type, you have to specify which target type is the tag for, and need to define the tag can be compatible with others or not through exclusive options. If your custom tag has multiple target types, you can support all of those target types by defining validate property as Record<Target, string> type like Type tag case.In the Korean proverb, there's a word that, \"it is much better to do it once than to hear it a hundred times\". Let's see how custom type tag of typia can be defined and utilized through an example code. I'll define three custom tag types, Postfix, Dollar and IsEven.Here is the example code, and I think that it may easy to understand.\nimport typia from \"typia\";\nexport const checkTagCustom = typia.createIs<TagCustom>();\ninterface TagCustom {\n  id: string & typia.tags.Format<\"uuid\">;\n  dollar: string & Dolloar;\n  postfix: string & Postfix<\"abcd\">;\n  powerOf: number & PowerOf<2>;\n}\ntype Dolloar = typia.tags.TagBase<{\n  kind: \"dollar\";\n  target: \"string\";\n  value: undefined;\n  validate: `$input[0] === \"$\" && !isNaN(Number($input.substring(1).split(\",\").join(\"\")))`;\n}>;\ntype Postfix<Value extends string> = typia.tags.TagBase<{\n  kind: \"postfix\";\n  target: \"string\";\n  value: Value;\n  validate: `$input.endsWith(\"${Value}\")`;\n}>;\ntype PowerOf<Value extends number> = typia.tags.TagBase<{\n  kind: \"powerOf\";\n  target: \"number\";\n  value: Value;\n  validate: `(() => {\n        const denominator: number = Math.log(${Value});\n        const value: number = Math.log($input) / denominator;\n        return Math.abs(value - Math.round(value)) < 0.00000001;\n    })()`;\n}>;\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkTagCustom = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkTagCustom = (input) => {\n  return (\n    \"object\" === typeof input &&\n    null !== input &&\n    \"string\" === typeof input.id &&\n    /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n      input.id,\n    ) &&\n    \"string\" === typeof input.dollar &&\n    input.dollar[0] === \"$\" &&\n    !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\"))) &&\n    \"string\" === typeof input.postfix &&\n    input.postfix.endsWith(\"abcd\") &&\n    \"number\" === typeof input.powerOf &&\n    (() => {\n      const denominator = Math.log(2);\n      const value = Math.log(input.powerOf) / denominator;\n      return Math.abs(value - Math.round(value)) < 1e-8;\n    })()\n  );\n};\nexports.checkTagCustom = checkTagCustom;"}},"/docs/validators/validate":{"title":"Validate","data":{"validate-function#validate() function":"export function validate<T>(input: T): IValidation<T>;\nexport function validate<T>(input: unknown): IValidation<T>;\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nValidates a value type.typia.validate<T>() function validates input value type, and archives every type errors detaily into IValidation.IFailure.errors array, when the input value is not following the promised type T. Of course, if the parametric input value is following the type T, IValidation.ISuccess instance would be returned.In the below example case, as id and age values are different with its definition of IMember, such errors would be archived into the IValidation.IFailure.errors array.\nerrors[0]\npath: input.id\nexpected: string & Format<\"uuid\">\nvalue: 5\nerrors[1]\npath: input.age\nexpected: number & Format<\"uint32\">\nvalue: 20.75\nAOT compliation\nIf you'd used other competitive validator libraries like ajv or class-validator, you may found that typia does not require any extra schema definition. If you have not experienced them, I can sure that you may get shocked after reading below extra schema definition files.\najv requires JSON schema definition.\nclass-validator requires DTO class with decorator function calls.\nYeah, typia needs only pure TypeScript type. As typia is a compiler library, it can analyze TypeScript type by itself, and possible to write the optimal validation code like below. This is the key principle of typia, which needs only one line with pure TypeScript type.\nimport typia, { tags } from \"typia\";\nconst res: typia.IValidation<IMember> = typia.validate<IMember>({\n  id: 5, // wrong, must be string (uuid)\n  age: 20.75, // wrong, not integer\n  email: \"samchon.github@gmail.com\",\n});\nif (!res.success) console.log(res.errors);\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst res = ((input) => {\n  const errors = [];\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  if (false === __is(input)) {\n    const $report = typia_1.default.validate.report(errors);\n    ((input, _path, _exceptionable = true) => {\n      const $vo0 = (input, _path, _exceptionable = true) =>\n        [\n          (\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            }),\n          (\"string\" === typeof input.email &&\n            (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n              input.email,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".email\",\n                expected: 'string & Format<\"email\">',\n                value: input.email,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".email\",\n              expected: '(string & Format<\"email\">)',\n              value: input.email,\n            }),\n          (\"number\" === typeof input.age &&\n            ((Math.floor(input.age) === input.age &&\n              0 <= input.age &&\n              input.age <= 4294967295) ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: 'number & Type<\"uint32\">',\n                value: input.age,\n              })) &&\n            (19 < input.age ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".age\",\n              expected:\n                '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n              value: input.age,\n            }),\n        ].every((flag) => flag);\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $report(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $vo0(input, _path + \"\", true)) ||\n        $report(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  }\n  const success = 0 === errors.length;\n  return {\n    success,\n    errors,\n    data: success ? input : undefined,\n  };\n})({\n  id: 5, // wrong, must be string (uuid)\n  age: 20.75, // wrong, not integer\n  email: \"samchon.github@gmail.com\",\n});\nif (!res.success) console.log(res.errors);","validateequals-function#validateEquals() function":"export function validateEquals<T>(input: T): IValidation<T>;\nexport function validateEquals<T>(input: unknown): IValidation<T>;\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nMore strict validatae function prohibiting superfluous properties.typia.validate<T> function detects every type errors of input value, however, it can't detect superfluous properties. If you want to prohibit those superfluous properties, so that archive them into IValidation.IFailure.errors array, use typia.validateEquals<T>() function instead.In the below example case, as id property is different with its type definition and sex property is not defined in the IMember type, such errors would be archived into the IValidation.IFailure.errors array:\nerrors[0]\npath: input.id\nexpected: string (@format uuid)\nvalue: something\nerrors[1]\npath: input.sex\nexpected: undefined\nvalue: 1\nimport typia, { tags } from \"typia\";\nconst res: typia.IValidation<IMember> = typia.validateEquals<IMember>({\n  age: 30,\n  email: \"samchon.github@gmail.com\",\n  id: \"something\", // wrong, must be string (uuid)\n  sex: 1, // extra property\n});\nif (!res.success) console.log(res.errors);\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\nconst res = ((input) => {\n  const errors = [];\n  const __is = (input, _exceptionable = true) => {\n    const $io0 = (input, _exceptionable = true) =>\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100 &&\n      (3 === Object.keys(input).length ||\n        Object.keys(input).every((key) => {\n          if ([\"id\", \"email\", \"age\"].some((prop) => key === prop)) return true;\n          const value = input[key];\n          if (undefined === value) return true;\n          return false;\n        }));\n    return \"object\" === typeof input && null !== input && $io0(input, true);\n  };\n  if (false === __is(input)) {\n    const $report = typia_1.default.validateEquals.report(errors);\n    ((input, _path, _exceptionable = true) => {\n      const $join = typia_1.default.validateEquals.join;\n      const $vo0 = (input, _path, _exceptionable = true) =>\n        [\n          (\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            }),\n          (\"string\" === typeof input.email &&\n            (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n              input.email,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".email\",\n                expected: 'string & Format<\"email\">',\n                value: input.email,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".email\",\n              expected: '(string & Format<\"email\">)',\n              value: input.email,\n            }),\n          (\"number\" === typeof input.age &&\n            ((Math.floor(input.age) === input.age &&\n              0 <= input.age &&\n              input.age <= 4294967295) ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: 'number & Type<\"uint32\">',\n                value: input.age,\n              })) &&\n            (19 < input.age ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".age\",\n              expected:\n                '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n              value: input.age,\n            }),\n          3 === Object.keys(input).length ||\n            false === _exceptionable ||\n            Object.keys(input)\n              .map((key) => {\n                if ([\"id\", \"email\", \"age\"].some((prop) => key === prop))\n                  return true;\n                const value = input[key];\n                if (undefined === value) return true;\n                return $report(_exceptionable, {\n                  path: _path + $join(key),\n                  expected: \"undefined\",\n                  value: value,\n                });\n              })\n              .every((flag) => flag),\n        ].every((flag) => flag);\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $report(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $vo0(input, _path + \"\", true)) ||\n        $report(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  }\n  const success = 0 === errors.length;\n  return {\n    success,\n    errors,\n    data: success ? input : undefined,\n  };\n})({\n  age: 30,\n  email: \"samchon.github@gmail.com\",\n  id: \"something\", // wrong, must be string (uuid)\n  sex: 1, // extra property\n});\nif (!res.success) console.log(res.errors);","reusable-functions#Reusable functions":"export function createValidate<T> = (input: unknown) => IValidation<T>;\nexport function createValidateEquals<T> = (input: unknown) => IValidation<T>;\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nReusable typia.validate<T>() function generators.If you repeat to call typia.validate<T>() function on the same type, size of JavaScript files would be larger because of duplicated AOT compilation. To prevent it, you can generate reusable function through typia.createValidate<T>() function.Just look at the code below, then you may understand how to use it.\nimport typia, { tags } from \"typia\";\nexport const validateMember = typia.createValidate<IMember>();\ninterface IMember {\n  id: string & tags.Format<\"uuid\">;\n  email: string & tags.Format<\"email\">;\n  age: number &\n    tags.Type<\"uint32\"> &\n    tags.ExclusiveMinimum<19> &\n    tags.Maximum<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMember = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst validateMember = (input) => {\n  const errors = [];\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.id &&\n      /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n        input.id,\n      ) &&\n      \"string\" === typeof input.email &&\n      /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n        input.email,\n      ) &&\n      \"number\" === typeof input.age &&\n      Math.floor(input.age) === input.age &&\n      0 <= input.age &&\n      input.age <= 4294967295 &&\n      19 < input.age &&\n      input.age <= 100\n    );\n  };\n  if (false === __is(input)) {\n    const $report = typia_1.default.createValidate.report(errors);\n    ((input, _path, _exceptionable = true) => {\n      const $vo0 = (input, _path, _exceptionable = true) =>\n        [\n          (\"string\" === typeof input.id &&\n            (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n              input.id,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".id\",\n                expected: 'string & Format<\"uuid\">',\n                value: input.id,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".id\",\n              expected: '(string & Format<\"uuid\">)',\n              value: input.id,\n            }),\n          (\"string\" === typeof input.email &&\n            (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n              input.email,\n            ) ||\n              $report(_exceptionable, {\n                path: _path + \".email\",\n                expected: 'string & Format<\"email\">',\n                value: input.email,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".email\",\n              expected: '(string & Format<\"email\">)',\n              value: input.email,\n            }),\n          (\"number\" === typeof input.age &&\n            ((Math.floor(input.age) === input.age &&\n              0 <= input.age &&\n              input.age <= 4294967295) ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: 'number & Type<\"uint32\">',\n                value: input.age,\n              })) &&\n            (19 < input.age ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & ExclusiveMinimum<19>\",\n                value: input.age,\n              })) &&\n            (input.age <= 100 ||\n              $report(_exceptionable, {\n                path: _path + \".age\",\n                expected: \"number & Maximum<100>\",\n                value: input.age,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".age\",\n              expected:\n                '(number & Type<\"uint32\"> & ExclusiveMinimum<19> & Maximum<100>)',\n              value: input.age,\n            }),\n        ].every((flag) => flag);\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $report(true, {\n            path: _path + \"\",\n            expected: \"IMember\",\n            value: input,\n          })) &&\n          $vo0(input, _path + \"\", true)) ||\n        $report(true, {\n          path: _path + \"\",\n          expected: \"IMember\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  }\n  const success = 0 === errors.length;\n  return {\n    success,\n    errors,\n    data: success ? input : undefined,\n  };\n};\nexports.validateMember = validateMember;","restrictions#Restrictions":"typia.validate<T>() function does not check function and user-defined class types.It validates only the primitive properties. Therefore, typia.validate<T>() function does not perform the instanceof ClassName for user-defined classes. If you want to validate the user-defined class type in addition to the property types, do it by yourself. Also, typia.validate<T>() function does not validate the function type either, unless configuring functional property of plugin option in the tsconfig.json file.\n{\n  \"compilerOptions\": {\n    \"plugins\": [\n      {\n        \"transform\": \"typia/lib/transform\",\n        \"functional\": true\n      }\n    ]\n  }\n}\nBy the way, there're some exception cases.If JS native class type like Date, Uint8Array, or Map<Key, T> being utilized, typia.validate<T>() function validates them. Especially about the Set<T>, and Map<Key, T> class cases, typia.validate<T>() function validates all of their contained element types, too.Therefore, the instanceof statement does not be used only for the user-defined classes.\nimport typia from \"typia\";\ntypia.createIs<Map<string, boolean | number | string>>();\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typia_1 = __importDefault(require(\"typia\"));\n(input) => {\n  return (\n    input instanceof Map &&\n    (() =>\n      [...input].every(\n        (elem) =>\n          Array.isArray(elem) &&\n          elem.length === 2 &&\n          \"string\" === typeof elem[0] &&\n          (\"string\" === typeof elem[1] ||\n            \"number\" === typeof elem[1] ||\n            \"boolean\" === typeof elem[1]),\n      ))()\n  );\n};","discriminated-union#Discriminated Union":"export function validate<T>(input: T): IValidation<T>;\nexport function validate<T>(input: unknown): IValidation<T>;\nexport function createValidate<T>(): (input: unknown) => IValidation<T>;\nexport type IValidation<T> = IValidation.ISuccess<T> | IValidation.IFailure;\nexport namespace IValidation {\n  export interface ISuccess<T> {\n    success: true;\n    data: T;\n  }\n  export interface IFailure {\n    success: false;\n    errors: IError[];\n  }\n  export interface IError {\n    path: string;\n    expected: string;\n    value: any;\n  }\n}\nSpecify type through if condition.typia.IValidation<T> is an union type of typia.IValidation.ISuccess<T> and typia.IValidation.IFailure. Also, they have a common property success of boolean type, but different literal values. In that case, if you write a if condition about the success property, you can specify the union type like below.In TypeScript, such union type specification through common property (of different literal value() is called \"Discriminated Union\". Therefore, when using typia.validate<T>() function, let's utilize such discriminated union specification for convenience.\nimport typia from \"typia\";\nconst something: unknown = ...;\nconst result: typia.IValidation<string> = typia.validate<string>(something);\nif (results.success) {\n  // become typia.IValidation.Success<string> type\n  result.data; // accessible\n} else {\n  // become typia.IValidation.Failure type\n  result.errors; //accessible\n}","customization#Customization":"You can enhance validation logic by special tags.Also, with those tags, you can add your custom validation logic, too.If you want to know about such special tags detaily, read below article:\nSpecial Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const validateSomething = typia.createValidate<Something>();\n//----\n// DEFINE CUSTOM TYPE TAGS\n//----\ntype Dollar = tags.TagBase<{\n  kind: \"dollar\";\n  target: \"string\";\n  value: undefined;\n  validate: `$input[0] === \"$\" && !isNaN(Number($input.substring(1).split(\",\").join(\"\")))`;\n}>;\ntype Postfix<Value extends string> = tags.TagBase<{\n  kind: \"postfix\";\n  target: \"string\";\n  value: Value;\n  validate: `$input.endsWith(\"${Value}\")`;\n}>;\ntype IsEven<Value extends number | bigint> = tags.TagBase<{\n  kind: \"isEven\";\n  target: Value extends number ? \"number\" : \"bigint\";\n  value: undefined;\n  validate: `$input % ${Numeric<2>} === ${Numeric<0>}`;\n}>;\ntype Numeric<Value extends number | bigint> = Value extends number\n  ? Value\n  : `BigInt(${Value})`;\n//----\n// VALIDATION\n//----\ninterface Something {\n  dollar: string & Dollar;\n  postfix: string & Postfix<\"!!!\">;\n  isEven: number & IsEven<number>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSomething = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst validateSomething = (input) => {\n  const errors = [];\n  const __is = (input) => {\n    return (\n      \"object\" === typeof input &&\n      null !== input &&\n      \"string\" === typeof input.dollar &&\n      input.dollar[0] === \"$\" &&\n      !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\"))) &&\n      \"string\" === typeof input.postfix &&\n      input.postfix.endsWith(\"!!!\") &&\n      \"number\" === typeof input.isEven &&\n      input.isEven % 2 === 0\n    );\n  };\n  if (false === __is(input)) {\n    const $report = typia_1.default.createValidate.report(errors);\n    ((input, _path, _exceptionable = true) => {\n      const $vo0 = (input, _path, _exceptionable = true) =>\n        [\n          (\"string\" === typeof input.dollar &&\n            ((input.dollar[0] === \"$\" &&\n              !isNaN(Number(input.dollar.substring(1).split(\",\").join(\"\")))) ||\n              $report(_exceptionable, {\n                path: _path + \".dollar\",\n                expected: \"string & Dollar\",\n                value: input.dollar,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".dollar\",\n              expected: \"(string & Dollar)\",\n              value: input.dollar,\n            }),\n          (\"string\" === typeof input.postfix &&\n            (input.postfix.endsWith(\"!!!\") ||\n              $report(_exceptionable, {\n                path: _path + \".postfix\",\n                expected: 'string & Postfix<\"!!!\">',\n                value: input.postfix,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".postfix\",\n              expected: '(string & Postfix<\"!!!\">)',\n              value: input.postfix,\n            }),\n          (\"number\" === typeof input.isEven &&\n            (input.isEven % 2 === 0 ||\n              $report(_exceptionable, {\n                path: _path + \".isEven\",\n                expected: \"number & IsEven<number>\",\n                value: input.isEven,\n              }))) ||\n            $report(_exceptionable, {\n              path: _path + \".isEven\",\n              expected: \"(number & IsEven<number>)\",\n              value: input.isEven,\n            }),\n        ].every((flag) => flag);\n      return (\n        (((\"object\" === typeof input && null !== input) ||\n          $report(true, {\n            path: _path + \"\",\n            expected: \"Something\",\n            value: input,\n          })) &&\n          $vo0(input, _path + \"\", true)) ||\n        $report(true, {\n          path: _path + \"\",\n          expected: \"Something\",\n          value: input,\n        })\n      );\n    })(input, \"$input\", true);\n  }\n  const success = 0 === errors.length;\n  return {\n    success,\n    errors,\n    data: success ? input : undefined,\n  };\n};\nexports.validateSomething = validateSomething;","performance#Performance":"Super-fast and super-safe.Comparing typia.validate<T>() function with other competitive libraries, maximum 20,000x faster.Furthermore, only typia can validate complicate union types.\nMeasured on Intel i5-1135g7, Surface Pro 8\nComponents\ttypia\tTypeBox\tajv\tio-ts\tzod\tC.V.\tEasy to use\t✅\t❌\t❌\t❌\t❌\t❌\tObject (simple)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (recursive)\t✔\t❌\t✔\t✔\t✔\t✔\t✔\tObject (union, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tObject (union, explicit)\t✔\t✔\t✔\t✔\t✔\t❌\tObject (additional tags)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (template literal types)\t✔\t✔\t✔\t❌\t❌\t❌\tObject (dynamic properties)\t✔\t✔\t✔\t❌\t❌\t❌\tArray (rest tuple)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tArray (recursive)\t✔\t✔\t✔\t✔\t✔\t❌\tArray (recursive, union)\t✔\t✔\t❌\t✔\t✔\t❌\tArray (R+U, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (repeated, union)\t✅\t❌\t❌\t❌\t❌\t❌\tUltimate Union Type\t✅\t❌\t❌\t❌\t❌\t❌\t\nC.V. means class-validator"}}}